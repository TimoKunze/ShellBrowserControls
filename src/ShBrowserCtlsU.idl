//////////////////////////////////////////////////////////////////////
/// \mainpage ShellBrowserControls Documentation
///
/// \section intro_sec Introduction
///
/// %ShellBrowserControls is a collection of ActiveX controls that can extend some of my other controls (e.
/// g. \c ExplorerListView and \c ExplorerTreeView) by shell-browsing functionality. It is optimized for
/// Visual Basic 6.0, but should also work in any other environment that supports COM controls.
///
/// \section basics_sec Basics
///
/// The controls can be attached to instances of \c ExplorerListView and \c ExplorerTreeView to enhance
/// them with shell-browsing capabilities. All the complicated things like enumerating shell namespaces,
/// providing and handling shell context menus, drag'n'drop, extracting thumbnails, reacting automatically
/// to changes within the shell and many other things are done by %ShellBrowserControls in a highly
/// optimized (e. g. by using parallelization) way. While %ShellBrowserControls will take over as much work
/// as it can by default, the client application can decide very precisely which tasks are done by
/// %ShellBrowserControls and which are done by the application itself.\n
/// While I implemented more checks and error handling than I have done in any other control before, this
/// is also the most complex control library that I ever wrote. Shell programming is a very challenging
/// task and Microsoft does anything to keep it like this, e. g. by not documenting things, documenting
/// things wrong and implementing things in a very Windows Explorer specific way. So applications that use
/// this library should be tested really well, especially with different versions of Windows.
///
/// \section reqs_sec Requirements
///
/// %ShellBrowserControls Unicode runs on the following operating systems:
/// - Windows XP (SP3 or later)
/// - Windows Server 2003 (SP2 or later)
/// - Windows Vista (SP2 or later)
/// - Windows Server 2008 (SP2 or later)
/// - Windows 7 (SP1 or later)
/// - Windows Server 2008 R2 (SP1 or later)
/// - Windows 8
/// - Windows Server 2012
/// - Windows 8.1
/// - Windows Server 2012 R2
/// - Windows 10
/// - Windows Server 2016
/// - Systems supported by Wine (Wine is a Win32 subsystem for alternative operating systems) - <strong>limited support</strong>
/// - ReactOS (a free Windows 2000 clone) - <strong>limited support</strong>
///
/// The files \c shlwapi.dll and \c shell32.dll must have version 5.0 or later.\n
/// Some features have additional requirements which are mentioned in the affected feature's
/// documentation.\n
/// Limited support means, that I won't invest much work to support those systems. If a feature works on
/// a system marked with "limited support" - fine; if it does not and it's easy to fix, I'll fix it, but if
/// it's difficult to fix, I probably won't fix it. Also I will test the control much less on those systems.
///
/// \section support_sec Support
///
/// Although there's no entitlement to support, you've good chances to get help if you either post
/// to the <a href="https://www.timosoft-software.de/forum/viewforum.php?f=41">forums</a> or
/// <a href="mailto:Timo@TimoSoft-Software.de">send me a mail</a>.\n
/// Bugs and feature requests should be entered into the <a href="https://bugtracker.timosoft-software.de">bug tracking system</a>.
///
/// \section lic_sec License
///
/// <pre>
///      MIT License
///
///      Copyright (c) 2010-2018 Timo Kunze
///
///      Permission is hereby granted, free of charge, to any person obtaining a copy
///      of this software and associated documentation files (the "Software"), to deal
///      in the Software without restriction, including without limitation the rights
///      to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
///      copies of the Software, and to permit persons to whom the Software is
///      furnished to do so, subject to the following conditions:
///
///      The above copyright notice and this permission notice shall be included in all
///      copies or substantial portions of the Software.
///
///      THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
///      IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
///      FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
///      AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
///      LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
///      OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
///      SOFTWARE.
/// </pre>
///
/// \section acks_sec Acknowledgements
///
/// Thanks go to:
/// - Henk Devos, because without his work and insider infos, I wouldn't have the knowledge about Windows
///   Shell programming that I have.
/// - <a href="http://www.zabkat.com/">Nikos Bozinis</a>, for inspiration and his awesome help especially
///   with the Vista drag'n'drop stuff.
/// - Jim Kueneman, for much help on tricky shell stuff, for inspiration and motivation.
/// - Jim Barry, for much help on tricky shell stuff, especially thumbnail support.
/// - <a href="https://www.geoffchappell.com">Geoff Chappell</a>, for his website about undocumented Win32
///   API stuff.
/// - <a href="https://www.winehq.com">Wine Headquarters</a>, because Wine helped me a lot on
///   understanding how Windows is working.
/// - Microsoft, for ATL, WTL and Visual Studio - great libraries and a great IDE
/// - Igor Tandetnik, for his great help on learning ATL and WTL
/// - Dimitri van Heesch, for Doxygen
/// - <a href="https://www.dateicommander.de">Christian LÃ¼tgens</a>, for his great work as beta-tester
///   and for his help when I needed a 2nd opinion on some decisions.
/// - All donators
/// - For great music: Heaven Shall Burn, Arch Enemy, Machine Head, Trivium, Deadlock, Draconian, Soulfly,
///   Delain, Lacuna Coil, Ensiferum, Epica, Sirenia, Tristania, Nightwish, Battlelore, Amon Amarth, Volbeat,
///   Guns N' Roses
///
/// No thanks go to:
/// - The persons at Microsoft responsible for documentation - If a part of the non-managed API is
///   documented, one can bet that the article is either an unsubstantial one-liner, an article full of
///   failures or an article that doesn't cover the most important parts.
/// - The persons at Microsoft that don't care whether important features of the common controls and the
///   shell are useable by 3rd party software. First you scare skilled developers away, then the users
///   follow due to the lack of good software. Think about it.
///
/// \section faq_sec FAQ
///
/// <strong>1. Why is event xyz not fired?</strong>\n
/// Firing an event is relative time-consuming, even if the event isn't handled by the application at all.
/// Therefore I implemented a \c DisabledEvents property which can be used to deactivate certain events.\n
/// By default many events are deactivated.
//////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////
/// \namespace ShBrowserCtlsLibU
/// \brief <em>Contains COM definitions for the control's public interface</em>
///
/// This is the Unicode version of the ShellBrowserControls COM library.
//////////////////////////////////////////////////////////////////////


#include "olectl.h"
#include "CompilerFlags.h"
#include "DispIDs.h"

#ifndef DOXYGEN_SHOULD_SKIP_THIS
	// interface is not automation marshaling conformant, requires Windows NT 4.0 SP4 or greater
	midl_pragma warning(disable: 2039)
	// identifier length exceeds 31 characters
	midl_pragma warning(disable: 2111)
	// too many methods in the interface, requires Windows NT 4.0 SP3 or greater
	midl_pragma warning(disable: 2362)
#endif

import "oaidl.idl";
import "ocidl.idl";


[
	uuid(1F9B9092-BEE4-4caf-9C7B-9384AF087C63),
	version(1.5),
	helpstring("TimoSoft ShellBrowserControls 1.5 (Unicode)")
]
library ShBrowserCtlsLibU
{
	importlib("stdole2.tlb");

	interface IShListViewNamespace;
	interface IShTreeViewNamespace;


	/// \brief <em>Constants used with the \c IShListViewColumn::Alignment property</em>
	///
	/// \sa IShListViewColumn::Alignment
	[helpstring("Constants used with the 'ShellListViewColumn.Alignment' property.")]
	typedef enum AlignmentConstants {
		/// \brief The content is left-aligned
		[helpstring("The content is left-aligned.")]
		alLeft,
		/// \brief The content is centered
		[helpstring("The content is centered.")]
		alCenter,
		/// \brief The content is right-aligned
		[helpstring("The content is right-aligned.")]
		alRight
	} AlignmentConstants;

	/// \brief <em>Constants used with the \c IShListViewNamespace::AutoSortItems property</em>
	///
	/// \sa IShListViewNamespace::AutoSortItems
	[helpstring("Constants used with the 'ShellListViewNamespace.AutoSortItems' property.")]
	typedef enum AutoSortItemsConstants {
		/// \brief The namespace doesn't trigger item sorting automatically
		[helpstring("The namespace doesn't trigger item sorting automatically.")]
		asiNoAutoSort,
		/// \brief The namespace triggers item sorting automatically when the namespace content is loaded
		[helpstring("The namespace triggers item sorting automatically when the namespace content is loaded.")]
		asiAutoSortOnce,
		/// \brief The namespace triggers item sorting automatically when the namespace content is loaded or updated
		[helpstring("The namespace triggers item sorting automatically when the namespace content is loaded or updated.")]
		asiAutoSort
	} AutoSortItemsConstants;

	/// \brief <em>Constants used with the \c SelectedShellContextMenuItem events</em>
	///
	/// \sa _IShListViewEvents::SelectedShellContextMenuItem,
	///     _IShTreeViewEvents::SelectedShellContextMenuItem
	[helpstring("Constants used with the 'SelectedShellContextMenuItem' events.")]
	typedef enum CommandInvocationFlagsConstants {
		/// \brief Don't display any user interface like error messages
		[helpstring("Don't display any user interface like error messages.")]
		cifNoUI = 0x00000400/*CMIC_MASK_FLAG_NO_UI*/,
		/// \brief Allow the shell to handle the command in a separate thread
		[helpstring("Allow the shell to handle the command in a separate thread.")]
		cifAllowAsynchronousExecution = 0x00100000/*CMIC_MASK_ASYNCOK*/,
		/// \brief Ask the shell to handle the command synchronously
		///
		/// \remarks Requires Windows Vista or newer.
		[helpstring("Ask the shell to handle the command synchronously. Requires Windows Vista or newer.")]
		cifPreferSynchronousExecution = 0x00000100/*CMIC_MASK_NOASYNC*/,
		/// \brief Tell the command handler that the [SHIFT] key is pressed
		///
		/// \remarks Requires Internet Explorer 5.01 or newer.
		[helpstring("Tell the command handler that the [SHIFT] key is pressed. Requires Internet Explorer 5.01 or newer.")]
		cifSHIFTKeyPressed = 0x10000000/*CMIC_MASK_SHIFT_DOWN*/,
		/// \brief Tell the command handler that the [CTRL] key is pressed
		///
		/// \remarks Requires Internet Explorer 5.01 or newer.
		[helpstring("Tell the command handler that the [CTRL] key is pressed. Requires Internet Explorer 5.01 or newer.")]
		cifCTRLKeyPressed = 0x40000000/*CMIC_MASK_CONTROL_DOWN*/,
		/// \brief Notify the command handler that it might want to keep track of the item being invoked for features like the "Recent documents" menu
		///
		/// \remarks Requires Internet Explorer 6.0 or newer.
		[helpstring("Notify the command handler that it might want to keep track of the item being invoked for features like the \"Recent documents\" menu. Requires Internet Explorer 6.0 or newer.")]
		cifLogUsage = 0x04000000/*CMIC_MASK_FLAG_LOG_USAGE*/,
		/// \brief Do not perform a zone check
		///
		/// \remarks Requires Internet Explorer 6.0 or newer.
		[helpstring("Do not perform a zone check. Requires Internet Explorer 6.0 or newer.")]
		cifNoZoneChecks = 0x00800000/*CMIC_MASK_NOZONECHECKS*/
	} CommandInvocationFlagsConstants;

	/// \brief <em>Flags used with the \c DisabledEvents properties</em>
	///
	/// \sa IShListView::DisabledEvents, IShTreeView::DisabledEvents
	[helpstring("Flags used with the 'DisabledEvents' properties. They can be combined.")]
	typedef enum DisabledEventsConstants {
		/// \brief The \c ChangedNamespacePIDL event won't be fired
		///
		/// The following event won't be fired: \c ChangedNamespacePIDL
		///
		/// \sa _IShListViewEvents::ChangedNamespacePIDL, _IShTreeViewEvents::ChangedNamespacePIDL
		[helpstring("Disables the following event: ChangedNamespacePIDL")]
		deNamespacePIDLChangeEvents = 0x1,
		/// \brief The \c InsertedNamespace event won't be fired
		///
		/// The following event won't be fired: \c InsertedNamespace
		///
		/// \sa _IShListViewEvents::InsertedNamespace, _IShTreeViewEvents::InsertedNamespace
		[helpstring("Disables the following event: InsertedNamespace")]
		deNamespaceInsertionEvents = 0x2,
		/// \brief The \c RemovingNamespace event won't be fired
		///
		/// The following event won't be fired: \c RemovingNamespace
		///
		/// \sa _IShListViewEvents::RemovingNamespace, _IShTreeViewEvents::RemovingNamespace
		[helpstring("Disables the following event: RemovingNamespace")]
		deNamespaceDeletionEvents = 0x4,
		/// \brief The \c ChangedItemPIDL event won't be fired
		///
		/// The following event won't be fired: \c ChangedItemPIDL
		///
		/// \sa _IShListViewEvents::ChangedItemPIDL, _IShTreeViewEvents::ChangedItemPIDL
		[helpstring("Disables the following event: ChangedItemPIDL")]
		deItemPIDLChangeEvents = 0x8,
		/// \brief Events concerning changes of column visibility won't be fired
		///
		/// The following events won't be fired: \c ChangingColumnVisibility, \c ChangedColumnVisibility
		///
		/// \sa _IShListViewEvents::ChangingColumnVisibility, _IShListViewEvents::ChangedColumnVisibility
		[helpstring("Disables the following events: ChangingColumnVisibility, ChangedColumnVisibility")]
		deColumnVisibilityEvents = 0x10,
		/// \brief Events concerning item-insertions won't be fired
		///
		/// The following events won't be fired: \c InsertingItem, \c InsertedItem
		///
		/// \sa _IShListViewEvents::InsertingItem, _IShListViewEvents::InsertedItem,
		///     _IShTreeViewEvents::InsertingItem, _IShTreeViewEvents::InsertedItem
		[helpstring("Disables the following events: InsertingItem, InsertedItem")]
		deItemInsertionEvents = 0x20,
		/// \brief The \c RemovingItem event won't be fired
		///
		/// The following event won't be fired: \c RemovingItem
		///
		/// \sa _IShListViewEvents::RemovingItem, _IShTreeViewEvents::RemovingItem
		[helpstring("Disables the following event: RemovingItem")]
		deItemDeletionEvents = 0x40,
		/// \brief Events concerning loading of shell columns won't be fired
		///
		/// The following events won't be fired: \c LoadedColumn, \c UnloadedColumn
		///
		/// \sa _IShListViewEvents::LoadedColumn, _IShListViewEvents::UnloadedColumn
		[helpstring("Disables the following events: LoadedColumn, UnloadedColumn")]
		deColumnLoadingEvents = 0x80
	} DisabledEventsConstants;

	/// \brief <em>Constants used with the \c DisplayName properties</em>
	///
	/// \sa IShListViewItem::DisplayName, IShTreeViewItem::DisplayName
	[helpstring("Constants used with the 'DisplayName' properties.")]
	typedef enum DisplayNameTypeConstants {
		/// \brief The item's normal display name
		///
		/// \remarks This is the only name that can be changed.
		[helpstring("The item's normal display name. This is the only name that can be changed.")]
		dntDisplayName = 0x0000/*SHGDN_NORMAL*/,
		/// \brief The item's editing name, i. e. the name that is displayed as current name when renaming the item
		[helpstring("The item's editing name, i. e. the name that is displayed as current name when renaming the item.")]
		dntEditingName = 0x1000/*SHGDN_FOREDITING*/,
		/// \brief The item's address as it may be displayed in address bars
		[helpstring("The item's address as it may be displayed in address bars.")]
		dntAddressBarName = 0x4000/*SHGDN_FORADDRESSBAR*/,
		/// \brief The item's address as it should be displayed in address bars according to the system settings
		[helpstring("The item's address as it should be displayed in address bars according to the system settings.")]
		dntAddressBarNameFollowSysSettings = 0x80000000,
		/// \brief A name that can be used to generate a pIDL for the item
		[helpstring("A name that can be used to generate a pIDL for the item.")]
		dntParsingName = 0x8000/*SHGDN_FORPARSING*/,
		/// \brief The item's path within the file system
		[helpstring("The item's path within the file system.")]
		dntFileSystemPath = 0x80058000/*SIGDN_FILESYSPATH*/,
		/// \brief The item's URL
		[helpstring("The item's URL.")]
		dntURL = 0x80068000/*SIGDN_URL*/
	} DisplayNameTypeConstants;

	/// \brief <em>Constants used with the \c FilterType properties</em>
	///
	/// \sa IShListViewItems::FilterType, IShTreeViewItems::FilterType
	[helpstring("Constants used with the 'FilterType' properties.")]
	typedef enum FilterTypeConstants {
		/// \brief The filter is deactivated
		[helpstring("The filter is deactivated.")]
		ftDeactivated,
		/// \brief An item must match this filter to be in the collection
		[helpstring("An item must match this filter to be in the collection.")]
		ftIncluding,
		/// \brief An item must not match this filter to be in the collection
		[helpstring("An item must not match this filter to be in the collection.")]
		ftExcluding
	} FilterTypeConstants;

	/// \brief <em>Flags used with the \c HandleOLEDragDrop properties</em>
	///
	/// \sa IShListViewItems::HandleOLEDragDrop, IShTreeViewItems::HandleOLEDragDrop
	[helpstring("Flags used with the 'HandleOLEDragDrop' properties.")]
	typedef enum HandleOLEDragDropConstants {
		/// \brief The control automatically initiates drag'n'drop operations if the user drags a shell item
		///
		/// If this flag is set, the control watches for item drags in the attached control. If a drag is
		/// detected, the attached control's OLEDrag method is called to start an OLE drag'n'drop operation.
		[helpstring("The control automatically initiates drag'n'drop operations if the user drags a shell item.")]
		hoddSourcePart = 0x01,
		/// \brief Data being dragged (and maybe dropped) over the attached control is handled automatically
		///
		/// If this flag is set, the control reacts to data being dragged and maybe dropped into the attached
		/// control. It determines the best drop effect before the attached control's \c OLEDrag* events are
		/// raised. These events can still be used to customize the drag'n'drop operation. No drop-hiliting is
		/// done automatically.
		///
		/// \sa hoddTargetPartWithDropHilite
		[helpstring("Data being dragged (and maybe dropped) over the attached control is handled automatically.")]
		hoddTargetPart = 0x02,
		/// \brief Data being dragged (and maybe dropped) over the attached control is handled automatically
		///
		/// If this flag is set, the control reacts to data being dragged and maybe dropped into the attached
		/// control. It determines the best drop effect before the attached control's \c OLEDrag* events are
		/// raised. Additionally the determined drop target item is highlighted. The \c OLEDrag* events can
		/// still be used to customize the drag'n'drop operation.
		///
		/// \sa hoddTargetPart
		[helpstring("Data being dragged (and maybe dropped) over the attached control is handled automatically. Drop-hiliting is done automatically by the control.")]
		hoddTargetPartWithDropHilite = 0x06
	} HandleOLEDragDropConstants;

	/// \brief <em>Constants used with the \c HiddenItemsStyle properties</em>
	///
	/// \sa IShListView::HiddenItemsStyle, IShTreeView::HiddenItemsStyle
	[helpstring("Constants used with the 'HiddenItemsStyle' properties.")]
	typedef enum HiddenItemsStyleConstants {
		/// \brief Hidden items are displayed like other items
		[helpstring("Hidden items are displayed like other items.")]
		hisNormal,
		/// \brief Hidden items are displayed ghosted
		///
		/// Hidden items are displayed ghosted. Whether an item is hidden or not is decided when adding the
		/// item.
		///
		/// \sa hisGhostedOnDemand
		[helpstring("Hidden items are displayed ghosted. Whether an item is hidden or not is decided when adding the item.")]
		hisGhosted,
		/// \brief Hidden items are displayed ghosted
		///
		/// Hidden items are displayed ghosted. Whether an item is hidden or not is decided when the item is
		/// initially drawn.
		///
		/// \sa hisGhosted
		[helpstring("Hidden items are displayed ghosted. Whether an item is hidden or not is decided when the item is initially drawn.")]
		hisGhostedOnDemand
	} HiddenItemsStyleConstants;

	/// \brief <em>Constants used with the \c hImageList properties</em>
	///
	/// \sa IShListView::hImageList, IShTreeView::hImageList
	[helpstring("Constants used with the 'hImageList' properties.")]
	typedef enum ImageListConstants {
		/// \brief Identifies the image list containing the icons used for non-shell items
		///
		/// Identifies the image list containing the icons used for non-shell items. If this image list is set
		/// to 0, the same image list, that is used for shell-items, is used.
		///
		/// \sa IShListView::UseSystemImageList, IShTreeView::UseSystemImageList
		[helpstring("Identifies the image list containing the icons used for non-shell items.")]
		ilNonShellItems
	} ImageListConstants;

	/// \brief <em>Flags used with the \c InfoTipFlags properties</em>
	///
	/// \sa IShListView::InfoTipFlags, IShTreeView::InfoTipFlags
	[helpstring("Flags used with the 'InfoTipFlags' properties.")]
	typedef enum InfoTipFlagsConstants {
		/// \brief Don't display an info tip
		[helpstring("Don't display an info tip.")]
		itfNoInfoTip = 0x20000000,
		/// \brief Follow the system settings when deciding whether to display an info tip
		[helpstring("Follow the system settings when deciding whether to display an info tip.")]
		itfNoInfoTipFollowSystemSettings = 0x40000000,
		/// \brief Retrieve the item's default info tip text
		[helpstring("Retrieve the item's default info tip text.")]
		itfDefault = 0x0000/*QITIPF_DEFAULT*/,
		/// \brief Retrieve the item's display name if it is a link
		[helpstring("Retrieve the item's display name if it is a link.")]
		itfLinkName = 0x0001/*QITIPF_USENAME*/,
		/// \brief Exclude the link's target info tip text from the info tip, if the item is a link
		[helpstring("Exclude the link's target info tip text from the info tip, if the item is a link.")]
		itfNoLinkTarget = 0x0002/*QITIPF_LINKNOTARGET*/,
		/// \brief Retrieve the path to the link's target if the item is a link
		[helpstring("Retrieve the path to the link's target if the item is a link.")]
		itfLinkTarget = 0x0004/*QITIPF_LINKUSETARGET*/,
		/// \brief Allow the shell to perform time-consuming tasks to retrieve the item's info tip text
		///
		/// \remarks Requires Windows XP or newer.
		[helpstring("Allow the shell to perform time-consuming tasks to retrieve the item's info tip text. Requires Windows XP or newer.")]
		itfAllowSlowInfoTip = 0x0008/*QITIPF_USESLOWTIP*/,
		/// \brief Allow or disallow (following the system settings) the shell to perform time-consuming tasks to retrieve the item's info tip text
		///
		/// \remarks Requires Windows XP or newer.
		[helpstring("Allow or disallow (following the system settings) the shell to perform time-consuming tasks to retrieve the item's info tip text. Requires Windows XP or newer.")]
		itfAllowSlowInfoTipFollowSysSettings = 0x80000000,
		/// \brief Retrieve the info tip text in a single line
		///
		/// \remarks Requires Windows Vista or newer.
		[helpstring("Retrieve the info tip text in a single line. Requires Windows Vista or newer.")]
		itfSingleLine = 0x0010/*QITIPF_SINGLELINE*/
	} InfoTipFlagsConstants;

	/// \brief <em>Flags used with the \c FileAttributes properties</em>
	///
	/// \sa IShListViewItem::FileAttributes, IShTreeViewItem::FileAttributes,
	///     INamespaceEnumSettings::ExcludedFileItemFileAttributes,
	///     INamespaceEnumSettings::ExcludedFolderItemFileAttributes,
	///     INamespaceEnumSettings::IncludedFileItemFileAttributes,
	///     INamespaceEnumSettings::IncludedFolderItemFileAttributes
	[helpstring("Flags used with the 'FileAttributes' properties.")]
	typedef enum ItemFileAttributesConstants {
		/// \brief The object is read-only
		[helpstring("The object is read-only.")]
		ifaReadOnly = 0x00000001/*FILE_ATTRIBUTE_READONLY*/,
		/// \brief The object is hidden
		[helpstring("The object is hidden.")]
		ifaHidden = 0x00000002/*FILE_ATTRIBUTE_HIDDEN*/,
		/// \brief The object is a system object, i. e. it's part of the operating system
		[helpstring("The object is a system object, i. e. it's part of the operating system.")]
		ifaSystem = 0x00000004/*FILE_ATTRIBUTE_SYSTEM*/,
		/// \brief The object is a directory
		///
		/// \remarks This attribute is read-only.
		[helpstring("The object is a directory. This attribute is read-only.")]
		ifaDirectory = 0x00000010/*FILE_ATTRIBUTE_DIRECTORY*/,
		/// \brief The object is an archive object
		[helpstring("The object is an archive object.")]
		ifaArchive = 0x00000020/*FILE_ATTRIBUTE_ARCHIVE*/,
		/// \brief The object does not have other attributes set
		[helpstring("The object does not have other attributes set.")]
		ifaNormal = 0x00000080/*FILE_ATTRIBUTE_NORMAL*/,
		/// \brief The file is used for temporary storage
		[helpstring("The file is used for temporary storage.")]
		ifaTemporary = 0x00000100/*FILE_ATTRIBUTE_TEMPORARY*/,
		/// \brief The file is a sparse file
		///
		/// \remarks This attribute cannot be removed.
		[helpstring("The file is a sparse file. This attribute cannot be removed.")]
		ifaSparseFile = 0x00000200/*FILE_ATTRIBUTE_SPARSE_FILE*/,
		/// \brief The object has an associated reparse point or the file is a symbolic link
		///
		/// \remarks This attribute is read-only.
		[helpstring("The object has an associated reparse point or the file is a symbolic link. This attribute is read-only.")]
		ifaReparsePoint = 0x00000400/*FILE_ATTRIBUTE_REPARSE_POINT*/,
		/// \brief The object is compressed
		[helpstring("The object is compressed.")]
		ifaCompressed = 0x00000800/*FILE_ATTRIBUTE_COMPRESSED*/,
		/// \brief The file is not available immediately because it is physically moved to offline storage
		[helpstring("The file is not available immediately because it is physically moved to offline storage.")]
		ifaOffline = 0x00001000/*FILE_ATTRIBUTE_OFFLINE*/,
		/// \brief The file is not to be indexed by the content indexing service
		[helpstring("The file is not to be indexed by the content indexing service.")]
		ifaNotContentIndexed = 0x00002000/*FILE_ATTRIBUTE_NOT_CONTENT_INDEXED*/,
		/// \brief The object is encrypted
		[helpstring("The object is encrypted.")]
		ifaEncrypted = 0x00004000/*FILE_ATTRIBUTE_ENCRYPTED*/,
		/// \brief The file is a virtual file
		[helpstring("The file is a virtual file.")]
		ifaVirtual = 0x00010000/*FILE_ATTRIBUTE_VIRTUAL*/
	} ItemFileAttributesConstants;

	/// \brief <em>Flags used with the \c ShellAttributes properties</em>
	///
	/// \sa IShListViewItem::ShellAttributes, IShTreeViewItem::ShellAttributes,
	///     INamespaceEnumSettings::ExcludedFileItemShellAttributes,
	///     INamespaceEnumSettings::ExcludedFolderItemShellAttributes,
	///     INamespaceEnumSettings::IncludedFileItemShellAttributes,
	///     INamespaceEnumSettings::IncludedFolderItemShellAttributes
	[helpstring("Flags used with the 'ShellAttributes' properties.")]
	typedef enum ItemShellAttributesConstants {
		/// \brief The object can be copied
		[helpstring("The object can be copied.")]
		isaCanBeCopied = 0x00000001/*SFGAO_CANCOPY*/,
		/// \brief The object can be moved
		[helpstring("The object can be moved.")]
		isaCanBeMoved = 0x00000002/*SFGAO_CANMOVE*/,
		/// \brief The object can be linked
		[helpstring("The object can be linked.")]
		isaCanBeLinked = 0x00000004/*SFGAO_CANLINK*/,
		/// \brief The object provides an \c IStorage or \c IPropertySetStorage object
		///
		/// \sa isaProvidesStream, isaContainsStreamsOrStorages,
		///     <a href="https://msdn.microsoft.com/en-us/library/aa380034.aspx">IStorage</a>,
		///     <a href="https://msdn.microsoft.com/en-us/library/aa379840.aspx">IPropertySetStorage</a>
		[helpstring("The object provides an 'IStorage' or 'IPropertySetStorage' object")]
		isaProvidesStorage = 0x00000008/*SFGAO_STORAGE*/,
		/// \brief The object can be renamed
		[helpstring("The object can be renamed.")]
		isaCanBeRenamed = 0x00000010/*SFGAO_CANRENAME*/,
		/// \brief The object can be deleted
		[helpstring("The object can be deleted.")]
		isaCanBeDeleted = 0x00000020/*SFGAO_CANDELETE*/,
		/// \brief The object has property sheets
		[helpstring("The object has property sheets.")]
		isaHasPropertySheets = 0x00000040/*SFGAO_HASPROPSHEET*/,
		/// \brief The object can be the target of a drag'n'drop operation and support paste operations
		[helpstring("The object can be the target of a drag'n'drop operation and support paste operations")]
		isaAcceptsDrops = 0x00000100/*SFGAO_DROPTARGET*/,
		/// \brief The object is a system object
		[helpstring("The object is a system object.")]
		isaIsSystemObject = 0x00001000/*SFGAO_SYSTEM*/,
		/// \brief The object is encrypted
		///
		/// \sa isaIsCompressed, IShListView::ColorEncryptedItems, IShTreeView::ColorEncryptedItems
		[helpstring("The object is encrypted.")]
		isaIsEncrypted = 0x00002000/*SFGAO_ENCRYPTED*/,
		/// \brief Accessing the object is slow
		[helpstring("Accessing the object is slow.")]
		isaIsSlow = 0x00004000/*SFGAO_ISSLOW*/,
		/// \brief The object's icon should be displayed ghosted
		///
		/// \sa isaIsHidden, IShListView::HiddenItemsStyle, IShTreeView::HiddenItemsStyle
		[helpstring("The object's icon should be displayed ghosted.")]
		isaIsGhosted = 0x00008000/*SFGAO_GHOSTED*/,     // = isaIsHidden
		/// \brief The object is a link
		///
		/// \sa IShListViewItem::LinkTarget, IShTreeViewItem::LinkTarget
		[helpstring("The object is a link.")]
		isaIsLink = 0x00010000/*SFGAO_LINK*/,
		/// \brief The object is shared
		[helpstring("The object is shared.")]
		isaIsShared = 0x00020000/*SFGAO_SHARE*/,
		/// \brief The object is read-only
		[helpstring("The object is read-only.")]
		isaIsReadOnly = 0x00040000/*SFGAO_READONLY*/,
		/// \brief The object is hidden
		///
		/// \sa isaIsGhosted, IShListView::HiddenItemsStyle, IShTreeView::HiddenItemsStyle
		[helpstring("The object is hidden.")]
		isaIsHidden = 0x00080000/*SFGAO_HIDDEN*/,     // = isaIsGhosted
		/// \brief The object is not enumerated by its parent \c IEnumIDList implementation
		[helpstring("The object is not enumerated by its parent 'IEnumIDList' implementation.")]
		isaIsNonEnumerated = 0x00100000/*SFGAO_NONENUMERATED*/,
		/// \brief The object is new content
		[helpstring("The object is new content.")]
		isaIsNewContent = 0x00200000/*SFGAO_NEWCONTENT*/,
		/// \brief The object provides an \c IStream object
		///
		/// \sa isaProvidesStorage, isaContainsStreamsOrStorages,
		///     <a href="https://msdn.microsoft.com/en-us/library/aa380034.aspx">IStream</a>
		[helpstring("The object provides an 'IStream' object.")]
		isaProvidesStream = 0x00400000/*SFGAO_STREAM*/,
		/// \brief The object contains items that have the \c isaProvidesStorage or \c isaProvidesStream attribute set
		///
		/// \sa isaProvidesStorage, isaProvidesStream
		[helpstring("The object contains items that have the 'isaProvidesStorage' or 'isaProvidesStream' attribute set.")]
		isaContainsStreamsOrStorages = 0x00800000/*SFGAO_STORAGEANCESTOR*/,
		/// \brief The object is a removable media or is located on it
		[helpstring("The object is a removable media or is located on it.")]
		isaIsRemovable = 0x02000000/*SFGAO_REMOVABLE*/,
		/// \brief The object is compressed
		///
		/// \sa isaIsEncrypted, IShListView::ColorCompressedItems, IShTreeView::ColorCompressedItems
		[helpstring("The object is compressed.")]
		isaIsCompressed = 0x04000000/*SFGAO_COMPRESSED*/,
		/// \brief The object supports the \c IShellFolder interface like folders do, but doesn't implement any of its sub-item specific methods
		///
		/// Objects with this attribute (e. g. the Internet Explorer icon on the Desktop) are no folders, but
		/// support the \c IShellFolder interface just like folders do. However, they only implement the
		/// \c CreateViewObject method and no method that works on a single sub-item.
		///
		/// \sa isaIsFolder,
		///     <a href="https://msdn.microsoft.com/en-us/library/ms632968.aspx">IShellFolder</a>
		[helpstring("The object supports the 'IShellFolder' interface like folders do, but doesn't implement any of its sub-item specific methods.")]
		isaBrowsableInPlace = 0x08000000/*SFGAO_BROWSABLE*/,
		/// \brief The object contains items that are file system objects
		///
		/// \sa isaIsPartOfFileSystem
		[helpstring("The object contains items that are file system objects.")]
		isaContainsFileSystemItems = 0x10000000/*SFGAO_FILESYSANCESTOR*/,
		/// \brief The object is a (file system or virtual) folder
		///
		/// \sa isaContainsFileSystemItems, isaContainsSubFolders
		[helpstring("The object is a (file system or virtual) folder.")]
		isaIsFolder = 0x20000000/*SFGAO_FOLDER*/,
		/// \brief The object is a file system object (file, folder, drive root)
		[helpstring("The object is a file system object (file, folder, drive root).")]
		isaIsPartOfFileSystem = 0x40000000/*SFGAO_FILESYSTEM*/,
		/// \brief The object contains items that have the \c isaIsFolder attribute set
		///
		/// \sa isaIsFolder
		[helpstring("The object contains items that have the 'isaIsFolder' attribute set.")]
		isaContainsSubFolders = 0x80000000/*SFGAO_HASSUBFOLDER*/
	} ItemShellAttributesConstants;

	/// \brief <em>Constants used with the \c ItemTypeSortOrder properties</em>
	///
	/// \sa IShListView::ItemTypeSortOrder, IShTreeView::ItemTypeSortOrder
	[helpstring("Constants used with the 'ItemTypeSortOrder' properties.")]
	typedef enum ItemTypeSortOrderConstants {
		/// \brief Sort the shell items before other items
		[helpstring("Sort the shell items before other items.")]
		itsoShellItemsFirst,
		/// \brief Sort the shell items after other items
		[helpstring("Sort the shell items after other items.")]
		itsoShellItemsLast
	} ItemTypeSortOrderConstants;

	/// \brief <em>Flags used with the \c CreatingShellContextMenu events</em>
	///
	/// \sa _IShListViewEvents::CreatingShellContextMenu, _IShTreeViewEvents::CreatingShellContextMenu
	[helpstring("Flags used with the 'CreatingShellContextMenu' events.")]
	typedef enum ShellContextMenuStyleConstants {
		/// \brief Create a context menu for normal use, i. e. with all menu items
		[helpstring("Create a context menu for normal use, i. e. with all menu items.")]
		scmsNormal = 0x00000000/*CMF_NORMAL*/,
		/// \brief Create a context menu which contains the default menu item only
		[helpstring("Create a context menu which contains the default menu item only.")]
		scmsDefaultOnly = 0x00000001/*CMF_DEFAULTONLY*/,
		/// \brief Create a context menu for a shortcut object instead of the shortcut's target
		[helpstring("Create a context menu for a shortcut object instead of the shortcut's target.")]
		scmsForShortcut = 0x00000002/*CMF_VERBSONLY*/,
		/// \brief Create a context menu like Windows Explorer's context menu in case that the Explorer's tree window is activated
		[helpstring("Create a context menu like Windows Explorer's context menu in case that the Explorer's tree window is activated.")]
		scmsExplorerTreeVisible = 0x00000004/*CMF_EXPLORE*/,
		/// \brief Create a context menu for items displayed in the Send To menu
		[helpstring("Create a context menu for items displayed in the Send To menu.")]
		scmsForSendToItems = 0x00000008/*CMF_NOVERBS*/,
		/// \brief Create a context menu which allows renaming the item for which it is displayed
		[helpstring("Create a context menu which allows renaming the item for which it is displayed.")]
		scmsCanRenameItem = 0x00000010/*CMF_CANRENAME*/,
		/// \brief Create a context menu which doesn't have a default item
		///
		/// \remarks The shell may ignore this flag and seems to do so very often.
		///
		/// \sa scmsNoImplicitDefaultVerb
		[helpstring("Create a context menu which doesn't have a default item. The shell may ignore this flag and seems to do so very often.")]
		scmsNoDefaultItem = 0x00000020/*CMF_NODEFAULT*/,
		// NOTE: CMF_INCLUDESTATIC is deprecated starting with Vista and has no real use, so ignore it
		/// \brief Create an item context menu instead of a background context menu
		///
		/// \remarks Requires Windows Vista or newer.
		[helpstring("Create an item context menu instead of a background context menu. Requires Windows Vista or newer.")]
		scmsForItem = 0x00000080/*CMF_ITEMMENU*/,
		/// \brief Create a context menu which contains extended verbs, i. e. verbs that are activated by pressing the [SHIFT] key
		[helpstring("Create a context menu which contains extended verbs, i. e. verbs that are activated by pressing the [SHIFT] key.")]
		scmsExtendedVerbs = 0x00000100/*CMF_EXTENDEDVERBS*/,
		// NOTE: CMF_DISABLEDVERBS influences the Invoke method only, so ignore it
		/// \brief Create a context menu and creates and populates all sub-menus synchronously instead of lazy-loading the sub-menus
		///
		/// \remarks Requires Windows 7 or newer.
		[helpstring("Create a context menu and creates and populates all sub-menus synchronously instead of lazy-loading the sub-menus. Requires Windows 7 or newer.")]
		scmsPopulateSubMenusSynchronously = 0x00001000/*CMF_SYNCCASCADEMENU*/,
		/// \brief Create a context menu which has a default item only if the system settings define such a verb explicitly
		///
		/// \remarks Requires Windows 7 or newer.
		///
		/// \sa scmsNoDefaultItem
		[helpstring("Create a context menu which has a default item only if the system settings define such a verb explicitly. Requires Windows 7 or newer.")]
		scmsNoImplicitDefaultVerb = 0x00002000/*CMF_DONOTPICKDEFAULT*/,
		/// \brief Create a context menu like Windows Explorer's file pull down menu
		[helpstring("Create a context menu like Windows Explorer's file pull down menu.")]
		scmsForFilePullDown = 0x00010000/*CMF_DVFILE*/
		/* NOTE: There's also CMF_BANDCMD (0x00020000) for background menus, but we don't know how to use it
		         and therefore ignore it. */
		// TODO: CMF_ASYNCVERBSTATE, CMF_OPTIMIZEFORINVOKE
	} ShellContextMenuStyleConstants;

	/// \brief <em>Constants used with the \c IShListViewColumn::ContentType property</em>
	///
	/// \sa IShListViewColumn::ContentType
	[helpstring("Constants used with the 'ShellListViewColumn.ContentType' property.")]
	typedef enum ShLvwColumnContentTypeConstants {
		/// \brief The column contains string data
		[helpstring("The column contains string data.")]
		slcctStringData = 0x00000000/*PDDT_STRING*/,
		/// \brief The column contains integer values
		[helpstring("The column contains integer values.")]
		slcctIntegerData = 0x00000001/*PDDT_NUMBER*/,
		/// \brief The column contains boolean values
		[helpstring("The column contains boolean values.")]
		slcctBooleanData = 0x00000002/*PDDT_BOOLEAN*/,
		/// \brief The column contains date-time values
		[helpstring("The column contains date-time values.")]
		slcctDateTimeData = 0x00000003/*PDDT_DATETIME*/,
		/// \brief The column contains values displayed as an enumerated type-list
		[helpstring("The column contains values displayed as an enumerated type-list.")]
		slcctEnumeratedData = 0x00000004/*PDDT_ENUMERATED*/
	} ShLvwColumnContentTypeConstants;

	/// \brief <em>Constants used to identify columns within an \c IShListViewColumns collection</em>
	///
	/// \sa IShListViewColumns
	[helpstring("Constants used to identify columns within a 'ShellListViewColumns' collection.")]
	typedef enum ShLvwColumnIdentifierTypeConstants {
		/// \brief The column is identified by its shell index
		///
		/// A shell listview column's shell index will never change.
		///
		/// \remarks This is the preferred and fastest method to identify a shell listview column.
		///
		/// \sa IShListViewColumn::ShellIndex
		[helpstring("The column is identified by its shell index.")]
		slcitShellIndex,
		/// \brief The column is identified by its unique ID
		///
		/// \sa IShListViewColumn::ID
		[helpstring("The column is identified by its unique ID.")]
		slcitID
	} ShLvwColumnIdentifierTypeConstants;

	/// \brief <em>Flags used with the \c IShListViewColumn::Visibility property</em>
	///
	/// \sa IShListViewColumn::Visibility
	[helpstring("Flags used with the 'ShellListViewColumn.Visibility' property.")]
	typedef enum ShLvwColumnVisibilityConstants {
		/// \brief The column is visible by default
		///
		/// \sa IShListViewColumn::Visible
		[helpstring("The column is visible by default.")]
		slcvVisibleByDefault = 0x0010/*SHCOLSTATE_ONBYDEFAULT*/,
		/// \brief The column is not listed in the header context menu, but in the &ldquo;Set Columns&rdquo; dialog
		[helpstring("The column is not listed in the header context menu, but in the 'Set Columns' dialog.")]
		slcvNotListedInContextMenu = 0x0080/*SHCOLSTATE_SECONDARYUI*/,
		/// \brief The column is a hidden column
		[helpstring("The column is a hidden column.")]
		slcvHidden = 0x0100/*SHCOLSTATE_HIDDEN*/
	} ShLvwColumnVisibilityConstants;

	/// \brief <em>Flags used with the \c IShListView::DisplayFileTypeOverlays property</em>
	///
	/// \sa IShListView::DisplayFileTypeOverlays
	[helpstring("Flags used with the 'ShellListView.DisplayFileTypeOverlays' property.")]
	typedef enum ShLvwDisplayFileTypeOverlaysConstants {
		/// \brief Thumbnails are drawn with file type overlays as specified by the system settings
		[helpstring("Thumbnails are drawn with file type overlays as specified by the system settings.")]
		sldftoFollowSystemSettings = 0xFFFFFFFF,
		/// \brief Thumbnails are drawn without file type overlays
		[helpstring("Thumbnails are drawn without file type overlays.")]
		sldftoNone = 0x0,
		/// \brief Thumbnails are drawn with the files' associated executables' icons as overlays
		[helpstring("Thumbnails are drawn with the files' associated executables' icons as overlays.")]
		sldftoExecutableIcon = 0x0001,
		// \brief Thumbnails are drawn with a specific image resource as overlay
		//[helpstring("Thumbnails are drawn with a specific image resource as overlay.")]
		//sldftoImageResource = 0x0002
	} ShLvwDisplayFileTypeOverlaysConstants;

	/// \brief <em>Flags used with the \c IShListView::DisplayThumbnailAdornments property</em>
	///
	/// \sa IShListView::DisplayThumbnailAdornments
	[helpstring("Flags used with the 'ShellListView.DisplayThumbnailAdornments' property.")]
	typedef enum ShLvwDisplayThumbnailAdornmentsConstants {
		/// \brief Any thumbnail adornments specified by the system are drawn
		///
		/// \remarks Requires Windows Vista or newer.
		[helpstring("Any thumbnail adornments specified by the system are drawn. Requires Windows Vista or newer.")]
		sldtaAny = 0xFFFFFFFF,
		/// \brief No thumbnail adornments are drawn
		[helpstring("No thumbnail adornments are drawn.")]
		sldtaNone = 0x0,
		/// \brief The system-defined 'Drop Shadow' thumbnail adornment is used if the system suggests its usage for an item
		///
		/// \remarks Requires Windows Vista or newer.
		[helpstring("The system-defined 'Drop Shadow' thumbnail adornment is used if the system suggests its usage for an item. Requires Windows Vista or newer.")]
		sldtaDropShadow = 0x0001,
		/// \brief The system-defined 'Photo Border' thumbnail adornment is used if the system suggests its usage for an item
		///
		/// \remarks Requires Windows Vista or newer.
		[helpstring("The system-defined 'Photo Border' thumbnail adornment is used if the system suggests its usage for an item. Requires Windows Vista or newer.")]
		sldtaPhotoBorder = 0x0002,
		/// \brief The system-defined 'Video Sprocket' thumbnail adornment is used if the system suggests its usage for an item
		///
		/// \remarks Requires Windows Vista or newer.
		[helpstring("The system-defined 'Video Sprocket' thumbnail adornment is used if the system suggests its usage for an item. Requires Windows Vista or newer.")]
		sldtaVideoSprocket = 0x0004
	} ShLvwDisplayThumbnailAdornmentsConstants;

	/// \brief <em>Constants used with the \c IShListViewItems::Filter property</em>
	///
	/// \sa IShListViewItems::Filter
	[helpstring("Constants used with the 'ShellListViewItems.Filter' property.")]
	typedef enum ShLvwFilteredPropertyConstants {
		/// \brief Retrieve or set the filter that filters by the \c FullyQualifiedPIDL property
		///
		/// \sa IShListViewItem::FullyQualifiedPIDL
		[helpstring("Retrieve or set the filter that filters by the 'FullyQualifiedPIDL' property.")]
		slfpFullyQualifiedPIDL = 0,
		/// \brief Retrieve or set the filter that filters by the \c ID property
		///
		/// \sa IShListViewItem::ID
		[helpstring("Retrieve or set the filter that filters by the 'ID' property.")]
		slfpID = 3,
		/// \brief Retrieve or set the filter that filters by the \c ManagedProperties property
		///
		/// \sa IShListViewItem::ManagedProperties
		[helpstring("Retrieve or set the filter that filters by the 'ManagedProperties' property.")]
		slfpManagedProperties = 1,
		/// \brief Retrieve or set the filter that filters by the \c Namespace property
		///
		/// \sa IShListViewItem::Namespace
		[helpstring("Retrieve or set the filter that filters by the 'Namespace' property.")]
		slfpNamespace = 2
	} ShLvwFilteredPropertyConstants;

	/// \brief <em>Constants used to identify items within an \c IShListViewItems collection</em>
	///
	/// \sa IShListViewItems
	[helpstring("Constants used to identify items within a 'ShellListViewItems' collection.")]
	typedef enum ShLvwItemIdentifierTypeConstants {
		/// \brief The item is identified by its unique ID
		///
		/// A shell listview item's ID will never change.
		///
		/// \remarks This is the preferred and fastest method to identify a shell listview item.
		///
		/// \sa IShListViewItem::ID
		[helpstring("The item is identified by its unique ID.")]
		sliitID,
		/// \brief The item is identified by its pIDL (exact match)
		///
		/// The item is identified by its fully qualified pIDL. The pIDLs' themselves are compared (not their
		/// contents).
		///
		/// \sa IShListViewItem::FullyQualifiedPIDL
		[helpstring("The item is identified by its fully qualified pIDL. The pIDLs' themselves are compared (not their contents).")]
		sliitExactPIDL,
		/// \brief The item is identified by its pIDL
		///
		/// The item is identified by its fully qualified pIDL. The pIDLs' contents are compared (not the
		/// pIDLs themselves).
		///
		/// \attention It's technically possible, that there're multiple shell listview items with equal pIDLs.
		///            \c ShellListView isn't designed to fully support such cases and will use the first item
		///            whith a matching pIDL.
		///
		/// \sa IShListViewItem::FullyQualifiedPIDL
		[helpstring("The item is identified by its fully qualified pIDL. The pIDLs' contents are compared (not the pIDLs themselves).")]
		sliitEqualPIDL,
		/// \brief The item is identified by its parsing name
		///
		/// The item is identified by its fully qualified parsing name. The string comparison is case-insensitive.
		///
		/// \sa IShListViewItem::DisplayName
		[helpstring("The item is identified by its fully qualified parsing name. The string comparison is case-insensitive.")]
		sliitParsingName
	} ShLvwItemIdentifierTypeConstants;

	/// \brief <em>Flags used with the \c IShListViewItem::ManagedProperties property and the \c IShListViewItems::Add method</em>
	///
	/// \sa IShListViewItem::ManagedProperties, IShListView::DefaultManagedItemProperties,
	///     IShListViewItems::Add, IShListViewItems::AddExisting
	[helpstring("Flags used with the 'ShellListViewItem.ManagedProperties' property and the 'ShellListViewItems.Add()' method.")]
	typedef enum ShLvwManagedItemPropertiesConstants {
		/// \brief The listview item's \c Ghosted property is managed by the \c ShellListView control
		[helpstring("The listview item's 'Ghosted' property is managed by the ShellListView control.")]
		slmipGhosted = 0x0001,
		/// \brief The listview item's \c IconIndex property is managed by the \c ShellListView control
		[helpstring("The listview item's 'IconIndex' property is managed by the ShellListView control.")]
		slmipIconIndex = 0x0002,
		/// \brief The listview item's \c OverlayIndex property is managed by the \c ShellListView control
		[helpstring("The listview item's 'OverlayIndex' property is managed by the ShellListView control.")]
		slmipOverlayIndex = 0x0004,
		/// \brief The listview item's \c Text property is managed by the \c ShellListView control
		///
		/// \sa slmipSubItemsText
		[helpstring("The listview item's 'Text' property is managed by the ShellListView control.")]
		slmipText = 0x0008,
		/// \brief The listview sub-item's \c Text property is managed by the \c ShellListView control
		///
		/// \sa slmipText, slmipTileViewColumns
		[helpstring("The listview sub-item's 'Text' property is managed by the ShellListView control.")]
		slmipSubItemsText = 0x0010,
		/// \brief The listview item's \c TileViewColumns property is managed by the \c ShellListView control
		///
		/// \sa slmipSubItemsText
		[helpstring("The listview item's 'TileViewColumns' property is managed by the ShellListView control.")]
		slmipTileViewColumns = 0x0020,
		/// \brief Renaming of the listview item is managed by the \c ShellListView control
		///
		/// \sa IShListView::LimitLabelEditInput
		[helpstring("Renaming of the listview item is managed by the ShellListView control.")]
		slmipRenaming = 0x0040,
		/// \brief The listview item's info tip is managed by the \c ShellListView control
		///
		/// \sa IShListView::InfoTipFlags
		[helpstring("The listview item's info tip is managed by the ShellListView control.")]
		slmipInfoTip = 0x0080,
		/// \brief The listview item's sub-item controls are managed by the \c ShellListView control
		[helpstring("The listview item's sub-item controls are managed by the ShellListView control.")]
		slmipSubItemControls = 0x0100,
		/// \brief All the listview item's manageable properties are managed by the \c ShellListView control
		[helpstring("All the listview item's manageable properties are managed by the ShellListView control.")]
		slmipAll = (slmipGhosted | slmipIconIndex | slmipOverlayIndex | slmipText | slmipSubItemsText | slmipTileViewColumns | slmipRenaming | slmipInfoTip | slmipSubItemControls)
	} ShLvwManagedItemPropertiesConstants;

	/// \brief <em>Constants used to identify shell namespaces within an \c IShListViewNamespaces collection</em>
	///
	/// \sa IShListViewNamespaces
	[helpstring("Constants used to identify shell namespaces within a 'ShellListViewNamespaces' collection.")]
	typedef enum ShLvwNamespaceIdentifierTypeConstants {
		/// \brief The namespace is identified by a zero-based index
		///
		/// A shell namespace's index may change if another namespace is removed from the collection.
		///
		/// \sa IShListViewNamespace::Index
		[helpstring("The namespace is identified by a zero-based index.")]
		slnsitIndex,
		/// \brief The namespace is identified by its pIDL (exact match)
		///
		/// The namespace is identified by its fully qualified pIDL. The pIDLs' themselves are compared (not
		/// their contents).
		///
		/// \remarks This is the preferred and fastest method to identify a shell namespace.
		///
		/// \sa IShListViewNamespace::FullyQualifiedPIDL
		[helpstring("The namespace is identified by its fully qualified pIDL. The pIDLs' themselves are compared (not their contents).")]
		slnsitExactPIDL,
		/// \brief The namespace is identified by its pIDL
		///
		/// The namespace is identified by its fully qualified pIDL. The pIDLs' contents are compared (not the
		/// pIDLs themselves).
		///
		/// \attention It's technically possible, that the shell listview contains multiple namespaces with
		///            equal pIDLs. \c ShellListView isn't designed to fully support such cases and will use
		///            the first namespace whith a matching pIDL.
		///
		/// \sa IShListViewNamespace::FullyQualifiedPIDL
		[helpstring("The namespace is identified by its fully qualified pIDL. The pIDLs' contents are compared (not the pIDLs themselves).")]
		slnsitEqualPIDL,
		/// \brief The namespace is identified by its parsing name
		///
		/// The namespace is identified by its fully qualified parsing name. The string comparison is
		/// case-insensitive.
		[helpstring("The namespace is identified by its fully qualified parsing name. The string comparison is case-insensitive.")]
		slnsitParsingName
	} ShLvwNamespaceIdentifierTypeConstants;

	/// \brief <em>Constants used with the \c IShListView::PersistColumnSettingsAcrossNamespaces property</em>
	///
	/// \sa IShListView::PersistColumnSettingsAcrossNamespaces
	[helpstring("Constants used with the 'ShellListView.PersistColumnSettingsAcrossNamespaces' property.")]
	typedef enum ShLvwPersistColumnSettingsAcrossNamespacesConstants {
		/// \brief Don't persist column settings across namespaces
		[helpstring("The column settings are not persisted across namespaces.")]
		slpcsanDontPersist = 0,
		/// \brief Persist column settings across namespaces
		[helpstring("The column settings are persisted across namespaces.")]
		slpcsanPersist = 1
		// \brief Persist column settings across namespaces and by folder type
		//
		// This option is the same as \c slpcsanPersist except that it persists column visibilities separately
		// for different folder types. Folder can be categorized by their content. For instance folders that
		// contain mainly music files, can be categorized as music folders and folders that contain mainly
		// videos can be categorized as video folders. For different kinds of folders, different sets of
		// columns are useful. By using this option, the control loads the column set of the last folder
		// (namespace) of the same category.
		//[helpstring("The column settings are persisted across namespaces and by folder type.")]
		//slpcsanPersistByFolderType = 2
	} ShLvwPersistColumnSettingsAcrossNamespacesConstants;

	/// \brief <em>Flags used with the \c INamespaceEnumSettings::EnumerationFlags property</em>
	///
	/// \sa INamespaceEnumSettings::EnumerationFlags
	[helpstring("Flags used with the 'INamespaceEnumSettings.EnumerationFlags' property.")]
	typedef enum ShNamespaceEnumerationConstants {
		/// \brief The item enumeration includes items that are folders
		[helpstring("The item enumeration includes items that are folders.")]
		snseIncludeFolders = 0x0020/*SHCONTF_FOLDERS*/,
		/// \brief The item enumeration includes items that are no folders (e. g. files)
		[helpstring("The item enumeration includes items that are no folders (e. g. files).")]
		snseIncludeNonFolders = 0x0040/*SHCONTF_NONFOLDERS*/,
		/// \brief The item enumeration includes items that are hidden
		[helpstring("The item enumeration includes items that are hidden.")]
		snseIncludeHiddenItems = 0x0080/*SHCONTF_INCLUDEHIDDEN*/,
		/// \brief The item enumeration may include items that are hidden following the system settings
		[helpstring("The item enumeration may include items that are hidden following the system settings.")]
		snseMayIncludeHiddenItems = 0x0081,
		/// \brief The item enumeration includes network printer objects
		[helpstring("The item enumeration includes network printer objects.")]
		snseIncludeNetPrinters = 0x0200/*SHCONTF_NETPRINTERSRCH*/,
		/// \brief The item enumeration includes items that can be shared
		[helpstring("The item enumeration includes items that can be shared.")]
		snseIncludeShareableItems = 0x0400/*SHCONTF_SHAREABLE*/,
		/// \brief The item enumeration includes items that are storages (i. e. can be accessed via \c IStorage) or contain storages
		[helpstring("The item enumeration includes items that are storages (i. e. can be accessed via 'IStorage') or contain storages.")]
		snseIncludeStoragesAndAncestors = 0x0800/*SHCONTF_STORAGE*/,
		/// \brief Set this flag if you want an enumeration suitable for a navigation pane
		///
		/// \remarks Requires Windows 7 or newer.
		[helpstring("Set this flag if you want an enumeration suitable for a navigation pane. Requires Windows 7 or newer.")]
		snseEnumForNavigationPane = 0x1000/*SHCONTF_NAVIGATION_ENUM*/,
		/// \brief Set this flag if you want items that can be enumerated quickly
		///
		/// \remarks Requires Windows Vista or newer.
		[helpstring("Set this flag if you want items that can be enumerated quickly. Requires Windows Vista or newer.")]
		snseLookingForFastItems = 0x2000/*SHCONTF_FASTITEMS*/,
		/// \brief The item enumeration retrieves the items as a simple list even if the namespace is not structured in that way
		///
		/// \remarks Requires Windows Vista or newer.
		[helpstring("The item enumeration retrieves the items as a simple list even if the namespace is not structured in that way. Requires Windows Vista or newer.")]
		snseFlatList = 0x4000/*SHCONTF_FLATLIST*/,
		/// \brief The item enumerator may return only a few items and report the other items via asynchronous shell change notifications
		///
		/// \remarks Requires Windows Vista or newer.
		///
		/// \sa IShListView::ProcessShellNotifications, IShTreeView::ProcessShellNotifications
		[helpstring("The item enumerator may return only a few items and report the other items via asynchronous shell change notifications. Requires Windows Vista or newer.")]
		snseUseShellNotifications = 0x8000/*SHCONTF_ENABLE_ASYNC*/
		// TODO: SHCONTF_CHECKING_FOR_CHILDREN
	} ShNamespaceEnumerationConstants;

	/// \brief <em>Constants used with the \c IShTreeViewItems::Filter property</em>
	///
	/// \sa IShTreeViewItems::Filter
	[helpstring("Constants used with the 'ShellTreeViewItems.Filter' property.")]
	typedef enum ShTvwFilteredPropertyConstants {
		/// \brief Retrieve or set the filter that filters by the \c FullyQualifiedPIDL property
		///
		/// \sa IShTreeViewItem::FullyQualifiedPIDL
		[helpstring("Retrieve or set the filter that filters by the 'FullyQualifiedPIDL' property.")]
		stfpFullyQualifiedPIDL = 0,
		/// \brief Retrieve or set the filter that filters by the \c Handle property
		///
		/// \sa IShTreeViewItem::Handle
		[helpstring("Retrieve or set the filter that filters by the 'Handle' property.")]
		stfpHandle = 3,
		/// \brief Retrieve or set the filter that filters by the \c ManagedProperties property
		///
		/// \sa IShTreeViewItem::ManagedProperties
		[helpstring("Retrieve or set the filter that filters by the 'ManagedProperties' property.")]
		stfpManagedProperties = 1,
		/// \brief Retrieve or set the filter that filters by the \c Namespace property
		///
		/// \sa IShTreeViewItem::Namespace
		[helpstring("Retrieve or set the filter that filters by the 'Namespace' property.")]
		stfpNamespace = 2
	} ShTvwFilteredPropertyConstants;

	/// \brief <em>Constants used to identify items within an \c IShTreeViewItems collection</em>
	///
	/// \sa IShTreeViewItems
	[helpstring("Constants used to identify items within a 'ShellTreeViewItems' collection.")]
	typedef enum ShTvwItemIdentifierTypeConstants {
		/// \brief The item is identified by its handle
		///
		/// A shell treeview item's handle will never change.
		///
		/// \remarks This is the preferred and fastest method to identify a shell treeview item.
		///
		/// \sa IShTreeViewItem::Handle
		[helpstring("The item is identified by its handle.")]
		stiitHandle,
		/// \brief The item is identified by its pIDL (exact match)
		///
		/// The item is identified by its fully qualified pIDL. The pIDLs' themselves are compared (not their
		/// contents).
		///
		/// \sa IShTreeViewItem::FullyQualifiedPIDL
		[helpstring("The item is identified by its fully qualified pIDL. The pIDLs' themselves are compared (not their contents).")]
		stiitExactPIDL,
		/// \brief The item is identified by its pIDL
		///
		/// The item is identified by its fully qualified pIDL. The pIDLs' contents are compared (not the
		/// pIDLs themselves).
		///
		/// \attention It's technically possible, that there're multiple shell treeview items with equal pIDLs.
		///            \c ShellTreeView isn't designed to fully support such cases and will use the first item
		///            whith a matching pIDL.
		///
		/// \sa IShTreeViewItem::FullyQualifiedPIDL
		[helpstring("The item is identified by its fully qualified pIDL. The pIDLs' contents are compared (not the pIDLs themselves).")]
		stiitEqualPIDL,
		/// \brief The item is identified by its parsing name
		///
		/// The item is identified by its fully qualified parsing name. The string comparison is case-insensitive.
		///
		/// \sa IShTreeViewItem::DisplayName
		[helpstring("The item is identified by its fully qualified parsing name. The string comparison is case-insensitive.")]
		stiitParsingName
	} ShTvwItemIdentifierTypeConstants;

	/// \brief <em>Flags used with the \c IShTreeViewItem::ManagedProperties property and the \c IShTreeViewItems::Add method</em>
	///
	/// \sa IShTreeViewItem::ManagedProperties, IShTreeView::DefaultManagedItemProperties,
	///     IShTreeViewItems::Add, IShTreeViewItems::AddExisting
	[helpstring("Flags used with the 'ShellTreeViewItem.ManagedProperties' property and the 'ShellTreeViewItems.Add()' method.")]
	typedef enum ShTvwManagedItemPropertiesConstants {
		/// \brief The treeview item's \c Ghosted property is managed by the \c ShellTreeView control
		[helpstring("The treeview item's 'Ghosted' property is managed by the ShellTreeView control.")]
		stmipGhosted = 0x0001,
		/// \brief The treeview item's \c IconIndex property is managed by the \c ShellTreeView control
		[helpstring("The treeview item's 'IconIndex' property is managed by the ShellTreeView control.")]
		stmipIconIndex = 0x0002,
		/// \brief The treeview item's \c OverlayIndex property is managed by the \c ShellTreeView control
		///
		/// \sa IShTreeView::LoadOverlaysOnDemand
		[helpstring("The treeview item's 'OverlayIndex' property is managed by the ShellTreeView control.")]
		stmipOverlayIndex = 0x0004,
		/// \brief The treeview item's \c SelectedIconIndex property is managed by the \c ShellTreeView control
		[helpstring("The treeview item's 'SelectedIconIndex' property is managed by the ShellTreeView control.")]
		stmipSelectedIconIndex = 0x0008,
		/// \brief The treeview item's \c SubItems property is managed by the \c ShellTreeView control
		///
		/// \sa stmipSubItemsSorting
		[helpstring("The treeview item's 'SubItems' property is managed by the ShellTreeView control.")]
		stmipSubItems = 0x0010,
		/// \brief The treeview item's sub-items are sorted automatically by the \c ShellTreeView control
		///
		/// \remarks This flag includes \c stmipSubItems.
		///
		/// \sa stmipSubItems
		[helpstring("The treeview item's sub-items are sorted automatically by the ShellTreeView control.")]
		stmipSubItemsSorting = 0x0030,
		/// \brief The treeview item's \c Text property is managed by the \c ShellTreeView control
		[helpstring("The treeview item's 'Text' property is managed by the ShellTreeView control.")]
		stmipText = 0x0040,
		/// \brief Renaming of the treeview item is managed by the \c ShellTreeView control
		///
		/// \sa IShTreeView::LimitLabelEditInput
		[helpstring("Renaming of the treeview item is managed by the ShellTreeView control.")]
		stmipRenaming = 0x0080,
		/// \brief The treeview item's info tip is managed by the \c ShellTreeView control
		///
		/// \sa IShTreeView::InfoTipFlags
		[helpstring("The treeview item's info tip is managed by the ShellTreeView control.")]
		stmipInfoTip = 0x0100,
		/// \brief All the treeview item's manageable properties are managed by the \c ShellTreeView control
		[helpstring("All the treeview item's manageable properties are managed by the ShellTreeView control.")]
		stmipAll = (stmipGhosted | stmipIconIndex | stmipOverlayIndex | stmipSelectedIconIndex | stmipSubItems | stmipSubItemsSorting | stmipText | stmipRenaming | stmipInfoTip)
	} ShTvwManagedItemPropertiesConstants;

	/// \brief <em>Constants used to identify shell namespaces within an \c IShTreeViewNamespaces collection</em>
	///
	/// \sa IShTreeViewNamespaces
	[helpstring("Constants used to identify shell namespaces within a 'ShellTreeViewNamespaces' collection.")]
	typedef enum ShTvwNamespaceIdentifierTypeConstants {
		/// \brief The namespace is identified by a zero-based index
		///
		/// A shell namespace's index may change if another namespace is removed from the collection.
		///
		/// \sa IShTreeViewNamespace::Index
		[helpstring("The namespace is identified by a zero-based index.")]
		stnsitIndex,
		/// \brief The namespace is identified by its pIDL (exact match)
		///
		/// The namespace is identified by its fully qualified pIDL. The pIDLs' themselves are compared (not
		/// their contents).
		///
		/// \remarks This is the preferred and fastest method to identify a shell namespace.
		///
		/// \sa IShTreeViewNamespace::FullyQualifiedPIDL
		[helpstring("The namespace is identified by its fully qualified pIDL. The pIDLs' themselves are compared (not their contents).")]
		stnsitExactPIDL,
		/// \brief The namespace is identified by its pIDL
		///
		/// The namespace is identified by its fully qualified pIDL. The pIDLs' contents are compared (not the
		/// pIDLs themselves).
		///
		/// \attention It's technically possible, that the shell treeview contains multiple namespaces with
		///            equal pIDLs. \c ShellTreeView isn't designed to fully support such cases and will use
		///            the first namespace whith a matching pIDL.
		///
		/// \sa IShTreeViewNamespace::FullyQualifiedPIDL
		[helpstring("The namespace is identified by its fully qualified pIDL. The pIDLs' contents are compared (not the pIDLs themselves).")]
		stnsitEqualPIDL,
		/// \brief The namespace is identified by its parsing name
		///
		/// The namespace is identified by its fully qualified parsing name. The string comparison is
		/// case-insensitive.
		[helpstring("The namespace is identified by its fully qualified parsing name. The string comparison is case-insensitive.")]
		stnsitParsingName
	} ShTvwNamespaceIdentifierTypeConstants;

	/// \brief <em>Constants used with the \c InitialSortOrder property</em>
	///
	/// \sa IShListView::InitialSortOrder
	[helpstring("Constants used with the 'InitialSortOrder' property.")]
	typedef enum SortOrderConstants {
		/// \brief The items get sorted in ascending order
		[helpstring("The items get sorted in ascending order.")]
		soAscending,
		/// \brief The items get sorted in descending order
		[helpstring("The items get sorted in descending order.")]
		soDescending
	} SortOrderConstants;

	/// \brief <em>Constants used with the \c UseGenericIcons properties</em>
	///
	/// \sa IShListView::UseGenericIcons, IShTreeView::UseGenericIcons
	[helpstring("Constants used with the 'UseGenericIcons' properties.")]
	typedef enum UseGenericIconsConstants {
		/// \brief The control always displays the item-specific icons and never generic ones
		[helpstring("The control always displays the item-specific icons and never generic ones.")]
		ugiNever,
		/// \brief The control displays generic icons for slow items (like network) and the item-specific icons for other items
		[helpstring("The control displays generic icons for slow items (like network) and the item-specific icons for other items.")]
		ugiOnlyForSlowItems,
		/// \brief The control always displays generic icons and never the item-specific ones
		[helpstring("The control always displays generic icons and never the item-specific ones.")]
		ugiAlways
	} UseGenericIconsConstants;

	/// \brief <em>Flags used with the \c UseSystemImageList properties</em>
	///
	/// \sa IShListView::UseSystemImageList, IShTreeView::UseSystemImageList
	[helpstring("Flags used with the 'UseSystemImageList' properties. They can be combined.")]
	typedef enum UseSystemImageListConstants {
		/// \brief Use the system imagelist for small icons
		///
		/// If this flag is set, the system imagelist is used in the following situations:
		/// - ListView: 'Small Icons' view, 'List' view, 'Details' view
		/// - TreeView: (always)
		[helpstring("Use the system imagelist for small icons.")]
		usilSmallImageList = 1,
		/// \brief Use the system imagelist for large icons
		///
		/// If this flag is set, the system imagelist is used in the following situations:
		/// - ListView: 'Icons' view
		/// - TreeView: (ignored)
		[helpstring("Use the system imagelist for large icons.")]
		usilLargeImageList = 2,
		/// \brief Use the system imagelist for extra-large icons
		///
		/// If this flag is set, the system imagelist is used in the following situations:
		/// - ListView: 'Tiles' view
		/// - TreeView: (ignored)
		///
		/// \remarks Requires Windows XP or newer.
		[helpstring("Use the system imagelist for extra-large icons. Requires Windows XP or newer")]
		usilExtraLargeImageList = 4
	} UseSystemImageListConstants;

	/// \brief <em>Constants used with the \c SelectedShellContextMenuItem events</em>
	///
	/// \sa _IShListViewEvents::SelectedShellContextMenuItem,
	///     _IShTreeViewEvents::SelectedShellContextMenuItem
	[helpstring("Constants used with the 'SelectedShellContextMenuItem' events.")]
	typedef enum WindowModeConstants {
		/// \brief Keep the window hidden
		[helpstring("Keep the window hidden.")]
		wmHidden = 0/*SW_HIDE*/,
		/// \brief Activate and display the window in its default size and position
		[helpstring("Activate and display the window in its default size and position.")]
		wmNormal = 1/*SW_SHOWNORMAL*/,
		/// \brief Activate and display the window as a minimized window
		[helpstring("Activate and display the window as a minimized window.")]
		wmMinimized = 2/*SW_SHOWMINIMIZED*/,
		/// \brief Activate and display the window as a maximized window
		[helpstring("Activate and display the window as a maximized window.")]
		wmMaximized = 3/*SW_SHOWMAXIMIZED*/,
		/// \brief Display the window in its default size and position, but don't activate it
		[helpstring("Display the window in its default size and position, but don't activate it.")]
		wmNotActivated = 4/*SW_SHOWNOACTIVATE*/,
		// NOTE: SW_SHOW is inappropriate for IContextMenu::InvokeCommand, so ignore it
		// NOTE: SW_MINIMIZE is inappropriate for IContextMenu::InvokeCommand, so ignore it
		/// \brief Display the window as a minimized window, but don't activate it
		[helpstring("Display the window as a minimized window, but don't activate it.")]
		wmMinimizedNotActivated = 7/*SW_SHOWMINNOACTIVE*/,
		// NOTE: SW_SHOWNA and SW_RESTORE are inappropriate for IContextMenu::InvokeCommand, so ignore them
		/// \brief Let Windows decide how to display the window
		[helpstring("Let Windows decide how to display the window.")]
		wmDefault = 10/*SW_SHOWDEFAULT*/
	} WindowModeConstants;


	/// \brief <em>Holds the 128 bits of a shell column's format identifier</em>
	///
	/// \sa IShListViewColumn::FormatIdentifier
	[helpstring("Holds the 128 bits of a shell column's format identifier."), uuid(6F7DD493-7863-4e68-89FB-EA081AFD0E66)]
	typedef struct FORMATID
	{
		/// \brief <em>Holds bits 0 to 31</em>
		[helpstring("Holds bits 0 to 31.")]
		LONG Data1;
		/// \brief <em>Holds bits 32 to 47</em>
		[helpstring("Holds bits 32 to 47.")]
		SHORT Data2;
		/// \brief <em>Holds bits 48 to 63</em>
		[helpstring("Holds bits 48 to 63.")]
		SHORT Data3;
		/// \brief <em>Holds bits 64 to 127</em>
		[helpstring("Holds bits 64 to 127.")]
		BYTE Data4[8];
	} FORMATID;


	/// \interface INamespaceEnumSettings
	/// \brief <em>Holds the settings used to enumerate a namespace</em>
	///
	/// This interface defines a container class used to store namespace enumeration settings.
	///
	/// \sa _INamespaceEnumSettingsEvents, IShTreeViewNamespace::NamespaceEnumSettings,
	///     IShTreeViewItem::NamespaceEnumSettings
	[
		object,
		uuid(43E8D5C9-0F0F-4f57-86BF-ED1FD867A738),
		dual,
		nonextensible,
		helpstring("INamespaceEnumSettings interface"),
		pointer_default(unique)
	]
	interface INamespaceEnumSettings : IDispatch
	{
		/// \brief <em>Specifies the kinds of items that shall be enumerated</em>
		///
		/// Retrieves or sets a bit field indicating which kinds of items shall be displayed and how the items
		/// shall be enumerated. Any combination of the values defined by the
		/// \c ShNamespaceEnumerationConstants enumeration is valid.
		///
		/// \sa ShNamespaceEnumerationConstants
		[propget, id(DISPID_NSES_ENUMERATIONFLAGS), helpstring("Retrieves or sets the kinds of items that shall be enumerated.")]
		HRESULT EnumerationFlags([out, retval] ShNamespaceEnumerationConstants* pValue);
		[propput, id(DISPID_NSES_ENUMERATIONFLAGS), helpstring("Retrieves or sets the kinds of items that shall be enumerated.")]
		HRESULT EnumerationFlags([in] ShNamespaceEnumerationConstants newValue);
		/// \brief <em>Specifies the kinds of file items that shall not be inserted into the control</em>
		///
		/// Retrieves or sets a bit field specifying the file attributes that mustn't be set for any file item
		/// of the enumeration in order to have it inserted into the control. If an enumerated item has any of
		/// the specified file attributes set, this item isn't inserted into the control.\n
		/// Any combination of the values defined by the \c ItemFileAttributesConstants enumeration is valid.
		///
		/// \remarks This property affects filesystem items only.
		///
		/// \sa ExcludedFolderItemFileAttributes, IncludedFileItemFileAttributes,
		///     ExcludedFileItemShellAttributes, ItemFileAttributesConstants
		[propget, id(DISPID_NSES_EXCLUDEDFILEITEMFILEATTRIBUTES), helpstring("Retrieves or sets the kinds of file items that shall not be inserted into the control.")]
		HRESULT ExcludedFileItemFileAttributes([out, retval] ItemFileAttributesConstants* pValue);
		[propput, id(DISPID_NSES_EXCLUDEDFILEITEMFILEATTRIBUTES), helpstring("Retrieves or sets the kinds of file items that shall not be inserted into the control.")]
		HRESULT ExcludedFileItemFileAttributes([in] ItemFileAttributesConstants newValue);
		/// \brief <em>Specifies the kinds of file items that shall not be inserted into the control</em>
		///
		/// Retrieves or sets a bit field specifying the shell attributes that mustn't be set for any file item
		/// of the enumeration in order to have it inserted into the control. If an enumerated item has any of
		/// the specified shell attributes set, this item isn't inserted into the control.\n
		/// Any combination of the values defined by the \c ItemShellAttributesConstants enumeration is valid.
		///
		/// \sa ExcludedFolderItemShellAttributes, IncludedFileItemShellAttributes,
		///     ExcludedFileItemFileAttributes, ItemShellAttributesConstants
		[propget, id(DISPID_NSES_EXCLUDEDFILEITEMSHELLATTRIBUTES), helpstring("Retrieves or sets the kinds of file items that shall not be inserted into the control.")]
		HRESULT ExcludedFileItemShellAttributes([out, retval] ItemShellAttributesConstants* pValue);
		[propput, id(DISPID_NSES_EXCLUDEDFILEITEMSHELLATTRIBUTES), helpstring("Retrieves or sets the kinds of file items that shall not be inserted into the control.")]
		HRESULT ExcludedFileItemShellAttributes([in] ItemShellAttributesConstants newValue);
		/// \brief <em>Specifies the kinds of folder items that shall not be inserted into the control</em>
		///
		/// Retrieves or sets a bit field specifying the file attributes that mustn't be set for any folder
		/// item of the enumeration in order to have it inserted into the control. If an enumerated item has
		/// any of the specified file attributes set, this item isn't inserted into the control.\n
		/// Any combination of the values defined by the \c ItemFileAttributesConstants enumeration is valid.
		///
		/// \remarks This property affects filesystem items only.
		///
		/// \sa ExcludedFileItemFileAttributes, IncludedFolderItemFileAttributes,
		///     ExcludedFolderItemShellAttributes, ItemFileAttributesConstants
		[propget, id(DISPID_NSES_EXCLUDEDFOLDERITEMFILEATTRIBUTES), helpstring("Retrieves or sets the kinds of folder items that shall not be inserted into the control.")]
		HRESULT ExcludedFolderItemFileAttributes([out, retval] ItemFileAttributesConstants* pValue);
		[propput, id(DISPID_NSES_EXCLUDEDFOLDERITEMFILEATTRIBUTES), helpstring("Retrieves or sets the kinds of folder items that shall not be inserted into the control.")]
		HRESULT ExcludedFolderItemFileAttributes([in] ItemFileAttributesConstants newValue);
		/// \brief <em>Specifies the kinds of folder items that shall not be inserted into the control</em>
		///
		/// Retrieves or sets a bit field specifying the shell attributes that mustn't be set for any folder
		/// item of the enumeration in order to have it inserted into the control. If an enumerated item has
		/// any of the specified shell attributes set, this item isn't inserted into the control.\n
		/// Any combination of the values defined by the \c ItemShellAttributesConstants enumeration is valid.
		///
		/// \sa ExcludedFileItemShellAttributes, IncludedFolderItemShellAttributes,
		///     ExcludedFolderItemFileAttributes, ItemShellAttributesConstants
		[propget, id(DISPID_NSES_EXCLUDEDFOLDERITEMSHELLATTRIBUTES), helpstring("Retrieves or sets the kinds of folder items that shall not be inserted into the control.")]
		HRESULT ExcludedFolderItemShellAttributes([out, retval] ItemShellAttributesConstants* pValue);
		[propput, id(DISPID_NSES_EXCLUDEDFOLDERITEMSHELLATTRIBUTES), helpstring("Retrieves or sets the kinds of folder items that shall not be inserted into the control.")]
		HRESULT ExcludedFolderItemShellAttributes([in] ItemShellAttributesConstants newValue);
		/// \brief <em>Specifies the kinds of file items that shall be inserted into the control</em>
		///
		/// Retrieves or sets a bit field specifying the file attributes that must be set for any file item of
		/// the enumeration in order to have it inserted into the control. If an enumerated item doesn't have
		/// all of the specified file attributes set, this item isn't inserted into the control.\n
		/// Any combination of the values defined by the \c ItemFileAttributesConstants enumeration is valid.
		///
		/// \remarks This property affects filesystem items only.
		///
		/// \sa IncludedFolderItemFileAttributes, ExcludedFileItemFileAttributes,
		///     IncludedFileItemShellAttributes, ItemFileAttributesConstants
		[propget, id(DISPID_NSES_INCLUDEDFILEITEMFILEATTRIBUTES), helpstring("Retrieves or sets the kinds of file items that shall be inserted into the control.")]
		HRESULT IncludedFileItemFileAttributes([out, retval] ItemFileAttributesConstants* pValue);
		[propput, id(DISPID_NSES_INCLUDEDFILEITEMFILEATTRIBUTES), helpstring("Retrieves or sets the kinds of file items that shall be inserted into the control.")]
		HRESULT IncludedFileItemFileAttributes([in] ItemFileAttributesConstants newValue);
		/// \brief <em>Specifies the kinds of file items that shall be inserted into the control</em>
		///
		/// Retrieves or sets a bit field specifying the shell attributes that must be set for any file item of
		/// the enumeration in order to have it inserted into the control. If an enumerated item doesn't have
		/// all of the specified shell attributes set, this item isn't inserted into the control.\n
		/// Any combination of the values defined by the \c ItemShellAttributesConstants enumeration is valid.
		///
		/// \sa IncludedFolderItemShellAttributes, ExcludedFileItemShellAttributes,
		///     IncludedFileItemFileAttributes, ItemShellAttributesConstants
		[propget, id(DISPID_NSES_INCLUDEDFILEITEMSHELLATTRIBUTES), helpstring("Retrieves or sets the kinds of file items that shall be inserted into the control.")]
		HRESULT IncludedFileItemShellAttributes([out, retval] ItemShellAttributesConstants* pValue);
		[propput, id(DISPID_NSES_INCLUDEDFILEITEMSHELLATTRIBUTES), helpstring("Retrieves or sets the kinds of file items that shall be inserted into the control.")]
		HRESULT IncludedFileItemShellAttributes([in] ItemShellAttributesConstants newValue);
		/// \brief <em>Specifies the kinds of folder items that shall be inserted into the control</em>
		///
		/// Retrieves or sets a bit field specifying the file attributes that must be set for any folder item
		/// of the enumeration in order to have it inserted into the control. If an enumerated item doesn't
		/// have all of the specified file attributes set, this item isn't inserted into the control.\n
		/// Any combination of the values defined by the \c ItemFileAttributesConstants enumeration is valid.
		///
		/// \remarks This property affects filesystem items only.
		///
		/// \sa IncludedFileItemFileAttributes, ExcludedFolderItemFileAttributes,
		///     IncludedFolderItemShellAttributes, ItemFileAttributesConstants
		[propget, id(DISPID_NSES_INCLUDEDFOLDERITEMFILEATTRIBUTES), helpstring("Retrieves or sets the kinds of folder items that shall be inserted into the control.")]
		HRESULT IncludedFolderItemFileAttributes([out, retval] ItemFileAttributesConstants* pValue);
		[propput, id(DISPID_NSES_INCLUDEDFOLDERITEMFILEATTRIBUTES), helpstring("Retrieves or sets the kinds of folder items that shall be inserted into the control.")]
		HRESULT IncludedFolderItemFileAttributes([in] ItemFileAttributesConstants newValue);
		/// \brief <em>Specifies the kinds of folder items that shall be inserted into the control</em>
		///
		/// Retrieves or sets a bit field specifying the shell attributes that must be set for any folder item
		/// of the enumeration in order to have it inserted into the control. If an enumerated item doesn't
		/// have all of the specified shell attributes set, this item isn't inserted into the control.\n
		/// Any combination of the values defined by the \c ItemShellAttributesConstants enumeration is valid.
		///
		/// \sa IncludedFileItemShellAttributes, ExcludedFolderItemShellAttributes,
		///     IncludedFolderItemFileAttributes, ItemShellAttributesConstants
		[propget, id(DISPID_NSES_INCLUDEDFOLDERITEMSHELLATTRIBUTES), helpstring("Retrieves or sets the kinds of folder items that shall be inserted into the control.")]
		HRESULT IncludedFolderItemShellAttributes([out, retval] ItemShellAttributesConstants* pValue);
		[propput, id(DISPID_NSES_INCLUDEDFOLDERITEMSHELLATTRIBUTES), helpstring("Retrieves or sets the kinds of folder items that shall be inserted into the control.")]
		HRESULT IncludedFolderItemShellAttributes([in] ItemShellAttributesConstants newValue);
	}


	/// \interface _INamespaceEnumSettingsEvents
	/// \author Timo "TimoSoft" Kunze
	/// \brief <em>The \c NamespaceEnumSettings class' events interface</em>
	///
	/// This interface defines all events the \c NamespaceEnumSettings class may raise.
	///
	/// \sa INamespaceEnumSettings
	[
		uuid(30F812D7-51CD-463d-9A89-08475DF3DBEE),
		helpstring("INamespaceEnumSettings-event-interface")
	]
	dispinterface _INamespaceEnumSettingsEvents
	{
		properties:
		methods:
	};


	/// \brief <em>The \c NamespaceEnumSettings class</em>
	///
	/// This COM class implements the \c INamespaceEnumSettings and \c _INamespaceEnumSettingsEvents
	/// interfaces.
	///
	/// \sa INamespaceEnumSettings, _INamespaceEnumSettingsEvents, IShTreeViewNamespaces::Add
	[
		uuid(CC889E2B-5A0D-42f0-AA08-D5FD5863410C),
		version(1.5),
		helpstring("NamespaceEnumSettings Class 1.5 (Unicode)")
	]
	coclass NamespaceEnumSettings
	{
		[default] interface INamespaceEnumSettings;
		[default, source] dispinterface _INamespaceEnumSettingsEvents;
	};


	#ifdef ACTIVATE_SECZONE_FEATURES
		/// \interface ISecurityZone
		/// \brief <em>Wraps an Internet Explorer security zone</em>
		///
		/// This interface wraps an Internet Explorer security zone.
		///
		/// \sa _ISecurityZoneEvents, IShListViewNamespace::SecurityZone, IShTreeViewNamespace::SecurityZone
		[
			object,
			uuid(FE7D3DB6-B7BE-4ae2-81D6-D6F79F0E0FA2),
			dual,
			nonextensible,
			helpstring("ISecurityZone interface"),
			pointer_default(unique)
		]
		interface ISecurityZone : IDispatch
		{
			/// \brief <em>Retrieves the security zone's description</em>
			///
			/// Retrieves the security zone's description as provided by the shell.
			///
			/// \remarks This property is read-only.
			///
			/// \sa DisplayName
			[propget, id(DISPID_SZ_DESCRIPTION), helpstring("Retrieves the security zone's description."), nonbrowsable]
			HRESULT Description([out, retval] BSTR* pValue);
			/// \brief <em>Retrieves the security zone's name</em>
			///
			/// Retrieves the security zone's display name as provided by the shell.
			///
			/// \remarks This is the default property of the \c ISecurityZone interface.\n
			///          This property is read-only.
			///
			/// \sa Description
			[propget, id(DISPID_SZ_DISPLAYNAME), helpstring("Retrieves the security zone's display name."), nonbrowsable]
			HRESULT DisplayName([out, retval] BSTR* pValue);
			/// \brief <em>Retrieves the security zone's icon</em>
			///
			/// Retrieves the security zone's icon as provided by the shell.
			///
			/// \remarks The calling application must destroy the icon if it doesn't need it anymore.\n
			///          This property is read-only.
			///
			/// \sa IconPath
			[propget, id(DISPID_SZ_HICON), helpstring("Retrieves the security zone's icon. Don't forget to destroy the icon if it isn't needed anymore."), nonbrowsable]
			HRESULT hIcon([out, retval] OLE_HANDLE* pValue);
			/// \brief <em>Retrieves the path to the security zone's icon</em>
			///
			/// Retrieves the path to the security zone's icon as provided by the shell.
			///
			/// \remarks This property is read-only.
			///
			/// \sa hIcon
			[propget, id(DISPID_SZ_ICONPATH), helpstring("Retrieves the path to the security zone's icon."), nonbrowsable]
			HRESULT IconPath([out, retval] BSTR* pValue);
		}


		/// \interface _ISecurityZoneEvents
		/// \author Timo "TimoSoft" Kunze
		/// \brief <em>The \c SecurityZone class' events interface</em>
		///
		/// This interface defines all events the \c SecurityZone class may raise.
		///
		/// \sa ISecurityZone
		[
			uuid(D9B8D13F-B74B-4db4-99F1-883641422C44),
			helpstring("ISecurityZone-event-interface")
		]
		dispinterface _ISecurityZoneEvents
		{
			properties:
			methods:
		};


		/// \brief <em>The \c SecurityZone class</em>
		///
		/// This COM class implements the \c ISecurityZone and \c _ISecurityZoneEvents interfaces.
		///
		/// \sa ISecurityZone, _ISecurityZoneEvents
		[
			uuid(E65CD417-A1D9-4933-A82B-066E1DE8B4DB),
			version(1.5),
			helpstring("SecurityZone Class 1.5 (Unicode)")
		]
		coclass SecurityZone
		{
			[default] interface ISecurityZone;
			[default, source] dispinterface _ISecurityZoneEvents;
		};


		/// \interface ISecurityZones
		/// \brief <em>Manages a collection of \c SecurityZone objects</em>
		///
		/// This interface wraps the Internet Explorer security zones.
		///
		/// \sa _ISecurityZonesEvents, IShListView::SecurityZones, IShTreeView::SecurityZones
		[
			object,
			uuid(D41F4118-72AB-4a33-A30D-43DF8FD5AD68),
			dual,
			nonextensible,
			helpstring("ISecurityZones interface"),
			pointer_default(unique)
		]
		interface ISecurityZones : IDispatch
		{
			/// \brief <em>Retrieves a \c SecurityZone object from the collection</em>
			///
			/// Retrieves a \c SecurityZone object from the collection that wraps the Internet Explorer security
			/// zone identified by \c zoneIndex.
			///
			/// \param[in] zoneIndex A zero-based index that identifies the security zone to be retrieved.
			///
			/// \remarks This is the default property of the \c ISecurityZones interface.\n
			///          This property is read-only.
			///
			/// \sa ISecurityZone, Count
			[propget, id(DISPID_SZS_ITEM), helpstring("Retrieves a 'SecurityZone' object from the collection that wraps the Internet Explorer security zone identified by 'zoneIndex'.")]
			HRESULT Item([in] LONG zoneIndex, [out, retval] ISecurityZone** ppZone);
			/// \if PRIVATEDOC
			///   \brief <em>Retrieves a \c VARIANT enumerator</em>
			///
			///   Retrieves a \c VARIANT enumerator that may be used to iterate the \c SecurityZone objects
			///   managed by this collection object. This iterator is used by Visual Basic's \c For...Each
			///   construct.
			///
			///   \remarks This property is read-only and hidden.
			///
			///   \sa <a href="https://msdn.microsoft.com/en-us/library/ms221053.aspx">IEnumVARIANT</a>
			/// \endif
			[propget, id(DISPID_SZS__NEWENUM), restricted]
			HRESULT _NewEnum([out, retval] IUnknown** ppEnumerator);

			/// \brief <em>Counts the Internet Explorer security zones in the collection</em>
			///
			/// Retrieves the number of \c SecurityZone objects in the collection.
			///
			/// \return The number of elements in the collection.
			///
			/// \sa Item
			[id(DISPID_SZS_COUNT), helpstring("Retrieves the number of 'SecurityZone' objects in the collection.")]
			HRESULT Count([out, retval] LONG* pValue);
		}


		/// \interface _ISecurityZonesEvents
		/// \author Timo "TimoSoft" Kunze
		/// \brief <em>The \c SecurityZones class' events interface</em>
		///
		/// This interface defines all events the \c SecurityZones class may raise.
		///
		/// \sa ISecurityZones
		[
			uuid(F483C9BB-E384-4de4-8837-0C4D9B903F5C),
			helpstring("ISecurityZones-event-interface")
		]
		dispinterface _ISecurityZonesEvents
		{
			properties:
			methods:
		};


		/// \brief <em>The \c SecurityZones class</em>
		///
		/// This COM class implements the \c ISecurityZones and \c _ISecurityZonesEvents interfaces.
		///
		/// \sa ISecurityZones, _ISecurityZonesEvents
		[
			uuid(B16BA585-F5D6-4211-8A69-60428B8FAC73),
			version(1.5),
			helpstring("SecurityZones Class 1.5 (Unicode)")
		]
		coclass SecurityZones
		{
			[default] interface ISecurityZones;
			[default, source] dispinterface _ISecurityZonesEvents;
		};
	#endif


	/// \interface IShListViewColumn
	/// \brief <em>Wraps an existing shell column</em>
	///
	/// This interface is a wrapper around a shell column.
	///
	/// \sa _IShListViewColumnEvents, IShListViewColumns, IShListView
	[
		object,
		uuid(25DD97ED-A469-43c9-B432-A30E200AF915),
		dual,
		nonextensible,
		helpstring("IShListViewColumn interface"),
		pointer_default(unique)
	]
	interface IShListViewColumn : IDispatch
	{
		/// \brief <em>Specifies the alignment of the column's content as provided by the shell</em>
		///
		/// Retrieves or sets the alignment of the column's content as provided by the shell. Any of the values
		/// defined by the \c AlignmentConstants enumeration is valid.
		///
		/// \sa Caption, AlignmentConstants
		[propget, id(DISPID_SHLVC_ALIGNMENT), helpstring("Retrieves or sets the alignment of the column's content as provided by the shell.")]
		HRESULT Alignment([out, retval] AlignmentConstants* pValue);
		[propput, id(DISPID_SHLVC_ALIGNMENT), helpstring("Retrieves or sets the alignment of the column's content as provided by the shell.")]
		HRESULT Alignment([in] AlignmentConstants newValue);
		/// \brief <em>Retrieves the name by which the property displayed in the column is known to the system</em>
		///
		/// Retrieves the case-sensitive name by which the property displayed in the column is known to the
		/// system. This name does not depend on the localization.
		///
		/// \remarks This property returns an empty string if the column does not display a registered property
		///          that is part of the Windows property system.\n
		///          This property is read-only.
		///
		/// \sa Caption, IShListViewColumns::FindByCanonicalPropertyName
		[propget, id(DISPID_SHLVC_CANONICALPROPERTYNAME), helpstring("Retrieves the column's caption as provided by the shell. This property returns an empty string if the column does not display a registered property that is part of the Windows property system."), nonbrowsable]
		HRESULT CanonicalPropertyName([out, retval] BSTR* pValue);
		/// \brief <em>Specifies the column's caption as provided by the shell</em>
		///
		/// Retrieves or sets the column's caption as provided by the shell.
		///
		/// \remarks This is the default property of the \c IShListViewColumn interface.
		///
		/// \sa Alignment, ContentType
		[propget, id(DISPID_SHLVC_CAPTION), helpstring("Retrieves or sets the column's caption as provided by the shell.")]
		HRESULT Caption([out, retval] BSTR* pValue);
		[propput, id(DISPID_SHLVC_CAPTION), helpstring("Retrieves or sets the column's caption as provided by the shell.")]
		HRESULT Caption([in] BSTR newValue);
		/// \brief <em>Retrieves the data type of the column's content as provided by the shell</em>
		///
		/// Retrieves the data type of the column's content as provided by the shell. Any of the values defined
		/// by the \c ShLvwColumnContentTypeConstants enumeration is valid.
		///
		/// \remarks This property is read-only.
		///
		/// \sa Caption, ShLvwColumnContentTypeConstants
		[propget, id(DISPID_SHLVC_CONTENTTYPE), helpstring("Retrieves the data type of the column's content as provided by the shell."), nonbrowsable]
		HRESULT ContentType([out, retval] ShLvwColumnContentTypeConstants* pValue);
		/// \brief <em>Retrieves the column's format identifier as provided by the shell</em>
		///
		/// Retrieves the column's format identifier as provided by the shell. Together with the property value
		/// (see \c PropertyIdentifier property), the format identifier specifies which of the shell items'
		/// properties is displayed in the column. A list of some predefined format/property identifiers can be
		/// found on <a href="https://msdn.microsoft.com/en-us/library/bb759748.aspx">MSDN Online</a>.
		///
		/// \remarks This property is read-only.
		///
		/// \sa PropertyIdentifier, IShListViewColumns::FindByPropertyKey, FORMATID
		[propget, id(DISPID_SHLVC_FORMATIDENTIFIER), helpstring("Retrieves the column's format identifier as provided by the shell."), nonbrowsable]
		HRESULT FormatIdentifier([out, retval] FORMATID* pValue);
		/// \brief <em>Retrieves the column's ID</em>
		///
		/// Retrieves an unique ID identifying this column within the attached \c ExplorerListView control. If
		/// the column is not currently part of the column set of the attached \c ExplorerListView control,
		/// this property will be -1.
		///
		/// \remarks This property is read-only.
		///
		/// \sa ShellIndex, ListViewColumnObject, Visible
		[propget, id(DISPID_SHLVC_ID), helpstring("Retrieves an unique ID identifying this column within the attached 'ExplorerListView' control.")]
		HRESULT ID([out, retval] LONG* pValue);
		/// \brief <em>Retrieves the column's corresponding \c ListViewColumn object</em>
		///
		/// Retrieves the \c ListViewColumn object of this column from the attached \c ExplorerListView
		/// control. If the column is not currently part of the column set of the attached \c ExplorerListView
		/// control, this property will be \c Nothing.
		///
		/// \remarks This property is read-only.
		///
		/// \sa ID, Visible
		[propget, id(DISPID_SHLVC_LISTVIEWCOLUMNOBJECT), helpstring("Retrieves the 'ListViewColumn' object of this column from the attached 'ExplorerListView' control.")]
		HRESULT ListViewColumnObject([out, retval] IDispatch** ppColumn);
		/// \brief <em>Retrieves the column's property identifier as provided by the shell</em>
		///
		/// Retrieves the column's property identifier as provided by the shell. Together with the format value
		/// (see \c FormatIdentifier property), the property identifier specifies which of the shell items'
		/// properties is displayed in the column. A list of some predefined format/property identifiers can be
		/// found on <a href="https://msdn.microsoft.com/en-us/library/bb759748.aspx">MSDN Online</a>.
		///
		/// \remarks This property is read-only.
		///
		/// \sa FormatIdentifier, IShListViewColumns::FindByPropertyKey
		[propget, id(DISPID_SHLVC_PROPERTYIDENTIFIER), helpstring("Retrieves the column's property identifier as provided by the shell."), nonbrowsable]
		HRESULT PropertyIdentifier([out, retval] LONG* pValue);
		/// \brief <em>Retrieves whether the column is provided by a shell column handler</em>
		///
		/// Retrieves whether the column is provided by a shell column handler. If set to \c True, the column
		/// is provided by such a shell extension; otherwise it is a column provided by the shell namespace
		/// itself.
		///
		/// \remarks This property is read-only.
		[propget, id(DISPID_SHLVC_PROVIDEDBYSHELLEXTENSION), helpstring("Retrieves whether the column is provided by a shell column handler."), nonbrowsable]
		HRESULT ProvidedByShellExtension([out, retval] VARIANT_BOOL* pValue);
		/// \brief <em>Retrieves whether the shell suggests to make the column's width changeable by the user</em>
		///
		/// Retrieves whether the shell suggests to make the column's width changeable by the user. If set to
		/// \c True, the shell suggests to make the column resizable (i. e. allow the user to change its
		/// width); otherwise it suggests to keep the column fixed-sized.
		///
		/// \remarks This property is read-only.
		///
		/// \sa IShListView::UseColumnResizability, Width
		[propget, id(DISPID_SHLVC_RESIZABLE), helpstring("Retrieves whether the shell suggests to make the column's width changeable by the user."), nonbrowsable]
		HRESULT Resizable([out, retval] VARIANT_BOOL* pValue);
		/// \brief <em>Retrieves the column's zero-based index</em>
		///
		/// Retrieves a zero-based index identifying this column within the collection of shell columns. It's
		/// the index that is used by the shell to identify the column.
		///
		/// \remarks This property is read-only.
		///
		/// \sa ID, ListViewColumnObject
		[propget, id(DISPID_SHLVC_SHELLINDEX), helpstring("Retrieves a zero-based index identifying this column within the collection of shell columns.")]
		HRESULT ShellIndex([out, retval] LONG* pValue);
		/// \brief <em>Retrieves whether retrieving the column's content will be slow</em>
		///
		/// Retrieves whether retrieving the column's content will be slow. If set to \c True, the column is
		/// tagged as a slow column, meaning that retrieving its content will be slow; otherwise retrieving the
		/// content isn't expected to be slow.
		///
		/// \remarks This property is read-only.
		///
		/// \sa IShListView::UseThreadingForSlowColumns
		[propget, id(DISPID_SHLVC_SLOW), helpstring("Retrieves whether retrieving the column's content will be slow."), nonbrowsable]
		HRESULT Slow([out, retval] VARIANT_BOOL* pValue);
		/// \brief <em>Retrieves the column's visibility settings as provided by the shell</em>
		///
		/// Retrieves the column's visibility settings as provided by the shell. Any combination of the values
		/// defined by the \c ShLvwColumnVisibilityConstants enumeration is valid.
		///
		/// \remarks This property is read-only.
		///
		/// \sa Visible, ShLvwColumnVisibilityConstants
		[propget, id(DISPID_SHLVC_VISIBILITY), helpstring("Retrieves the column's visibility settings as provided by the shell."), nonbrowsable]
		HRESULT Visibility([out, retval] ShLvwColumnVisibilityConstants* pValue);
		/// \brief <em>Controls the column's visibility</em>
		///
		/// Retrieves or sets whether the column is currently visible, i. e. part of the column set of the
		/// attached \c ExplorerListView control. If set to \c True, the column is visible; otherwise not.
		///
		/// \sa Visibility
		[propget, id(DISPID_SHLVC_VISIBLE), helpstring("Retrieves or sets whether the column is currently visible, i. e. part of the column set of the attached 'ExplorerListView' control."), nonbrowsable]
		HRESULT Visible([out, retval] VARIANT_BOOL* pValue);
		[propput, id(DISPID_SHLVC_VISIBLE), helpstring("Retrieves or sets whether the column is currently visible, i. e. part of the column set of the attached 'ExplorerListView' control."), nonbrowsable]
		HRESULT Visible([in] VARIANT_BOOL newValue);
		/// \brief <em>Retrieves the column's default width</em>
		///
		/// Retrieves the column's default width in pixels. Initially this width is provided by the shell, but
		/// it can be changed by setting this property. The default column width is used when the column is
		/// made visible.
		///
		/// \sa Resizable
		[propget, id(DISPID_SHLVC_WIDTH), helpstring("Retrieves or sets the column's default width in pixels. Initially this width is provided by the shell, but it can be changed by setting this property.")]
		HRESULT Width([out, retval] OLE_XSIZE_PIXELS* pValue);
		[propput, id(DISPID_SHLVC_WIDTH), helpstring("Retrieves or sets the column's default width in pixels. Initially this width is provided by the shell, but it can be changed by setting this property.")]
		HRESULT Width([in] OLE_XSIZE_PIXELS newValue);
	}


	/// \interface _IShListViewColumnEvents
	/// \brief <em>The \c ShellListViewColumn class' events interface</em>
	///
	/// This interface defines all events the \c ShellListViewColumn class may raise.
	///
	/// \sa IShListViewColumn
	[
		uuid(1B10606E-DBA9-49b5-9314-3EA53BDD35EC),
		helpstring("IShListViewColumn-event-interface")
	]
	dispinterface _IShListViewColumnEvents
	{
		properties:
		methods:
	};


	/// \brief <em>The \c ShellListViewColumn class</em>
	///
	/// This COM class implements the \c IShListViewColumn and \c _IShListViewColumnEvents interfaces.
	///
	/// \sa IShListViewColumn, _IShListViewColumnEvents, ShellListView, ShellListViewColumns
	[
		uuid(F67B473C-4B94-4028-894B-C73DA1AB21E9),
		version(1.5),
		noncreatable,
		helpstring("ShellListViewColumn Class 1.5 (Unicode)")
	]
	coclass ShellListViewColumn
	{
		[default] interface IShListViewColumn;
		[default, source] dispinterface _IShListViewColumnEvents;
	};


	/// \interface IShListViewColumns
	/// \brief <em>Manages a collection of \c ShellListViewColumn objects</em>
	///
	/// This interface provides easy access (including filtering) to collections of \c ShellListViewColumn
	/// objects. A \c ShellListViewColumns object is used to group columns that have certain properties in
	/// common.
	///
	/// \sa _IShListViewColumnsEvents, IShListViewColumn, IShListView
	[
		object,
		uuid(F716C59C-EC6D-4066-801F-47952EC588AB),
		dual,
		nonextensible,
		helpstring("IShListViewColumns interface"),
		pointer_default(unique)
	]
	interface IShListViewColumns : IDispatch
	{
		/// \brief <em>Retrieves a \c ShellListViewColumn object from the collection</em>
		///
		/// Retrieves a \c ShellListViewColumn object from the collection that wraps the shell column
		/// identified by \c columnIdentifier.
		///
		/// \param[in] columnIdentifier A value that identifies the shell column to be retrieved.
		/// \param[in] columnIdentifierType A value specifying the meaning of \c columnIdentifier. Any of the
		///            values defined by the \c ShLvwColumnIdentifierTypeConstants enumeration is valid.
		///
		/// \remarks This is the default property of the \c IShListViewColumn interface.\n
		///          This property is read-only.
		///
		/// \sa IShListViewColumn, ShLvwColumnIdentifierTypeConstants
		[propget, id(DISPID_SHLVCS_ITEM), helpstring("Retrieves a 'ShellListViewColumn' object from the collection that wraps the column identified by 'columnIdentifier'.")]
		HRESULT Item([in] LONG columnIdentifier, [in, defaultvalue(slcitShellIndex)] ShLvwColumnIdentifierTypeConstants columnIdentifierType, [out, retval] IShListViewColumn** ppColumn);
		/// \if PRIVATEDOC
		///   \brief <em>Retrieves a \c VARIANT enumerator</em>
		///
		///   Retrieves a \c VARIANT enumerator that may be used to iterate the \c ShellListViewColumn objects
		///   managed by this collection object. This iterator is used by Visual Basic's \c For...Each
		///   construct.
		///
		///   \remarks This property is read-only and hidden.
		///
		///   \sa <a href="https://msdn.microsoft.com/en-us/library/ms221053.aspx">IEnumVARIANT</a>
		/// \endif
		[propget, id(DISPID_SHLVCS__NEWENUM), restricted]
		HRESULT _NewEnum([out, retval] IUnknown** ppEnumerator);

		/// \brief <em>Counts the columns in the collection</em>
		///
		/// Retrieves the number of \c ShellListViewColumn objects in the collection.
		///
		/// \return The number of elements in the collection.
		[id(DISPID_SHLVCS_COUNT), helpstring("Retrieves the number of 'ShellListViewColumn' objects in the collection.")]
		HRESULT Count([out, retval] LONG* pValue);
		/// \brief <em>Finds a shell column by its canonical property name</em>
		///
		/// Finds a shell column by its case-sensitive name by which the property displayed in the column is
		/// known to the system and retrieves the \c ShellListViewColumn object wrapping this shell column. The
		/// canonical name does not depend on the localization.
		///
		/// \param[in] canonicalName The canonical name for which to search.
		///
		/// \return The \c ShellListViewColumn object wrapping the found shell column.
		///
		/// \sa IShListViewColumn::CanonicalPropertyName, FindByPropertyKey
		[id(DISPID_SHLVCS_FINDBYCANONICALPROPERTYNAME), helpstring("Finds a shell column by its case-sensitive name by which the property displayed in the column is known to the system and retrieves the 'ShellListViewColumn' object wrapping this shell column.")]
		HRESULT FindByCanonicalPropertyName([in] BSTR canonicalName, [out, retval] IShListViewColumn** ppColumn);
		/// \brief <em>Finds a shell column by its property key</em>
		///
		/// Finds a shell column by its property key and retrieves the \c ShellListViewColumn object wrapping
		/// this shell column. The property key consists of a format identifier and a property identifier.
		///
		/// \param[in] formatIdentifier The format identifier of the property key for which to search.
		/// \param[in] propertyIdentifier The property identifier of the property key for which to search.
		///
		/// \return The \c ShellListViewColumn object wrapping the found shell column.
		///
		/// \sa IShListViewColumn::FormatIdentifier, IShListViewColumn::PropertyIdentifier,
		///     FindByCanonicalPropertyName
		[id(DISPID_SHLVCS_FINDBYPROPERTYKEY), helpstring("Finds a shell column by its property key and retrieves the 'ShellListViewColumn' object wrapping this shell column.")]
		HRESULT FindByPropertyKey([in] FORMATID* FormatIdentifier, [in] LONG PropertyIdentifier, [out, retval] IShListViewColumn** ppColumn);
	}


	/// \interface _IShListViewColumnsEvents
	/// \brief <em>The \c ShellListViewColumns class' events interface</em>
	///
	/// This interface defines all events the \c ShellListViewColumns class may raise.
	///
	/// \sa IShListViewColumns
	[
		uuid(6949432B-C154-40b2-A141-BCA7F98F782D),
		helpstring("IShListViewColumns-event-interface")
	]
	dispinterface _IShListViewColumnsEvents
	{
		properties:
		methods:
	};


	/// \brief <em>The \c ShellListViewColumns class</em>
	///
	/// This COM class implements the \c IShListViewColumns and \c _IShListViewColumnsEvents interfaces.
	///
	/// \sa IShListViewColumns, _IShListViewColumnsEvents, ShellListView, ShellListViewColumn
	[
		uuid(FF679B10-ECF2-496a-995A-CDDDF07CC679),
		version(1.5),
		noncreatable,
		helpstring("ShellListViewColumns Class 1.5 (Unicode)")
	]
	coclass ShellListViewColumns
	{
		[default] interface IShListViewColumns;
		[default, source] dispinterface _IShListViewColumnsEvents;
	};


	/// \interface IShListViewItem
	/// \brief <em>Wraps an existing shell listview item</em>
	///
	/// This interface is a wrapper around a shell listview item.
	///
	/// \sa _IShListViewItemEvents, IShListViewItems, IShListView
	[
		object,
		uuid(4EF84C88-DD59-43f8-8F96-7565B8C876C7),
		dual,
		nonextensible,
		helpstring("IShListViewItem interface"),
		pointer_default(unique)
	]
	interface IShListViewItem : IDispatch
	{
		/// \brief <em>Retrieves whether the item can be customized via a Desktop.ini file</em>
		///
		/// Retrieves whether the item can be customized via a Desktop.ini file. If \c True, it can be
		/// customized; otherwise not.
		///
		/// \remarks This property is read-only.
		///
		/// \sa Customize
		[propget, id(DISPID_SHLVI_CUSTOMIZABLE), helpstring("Retrieves whether the item can be customized via a Desktop.ini file."), nonbrowsable]
		HRESULT Customizable([out, retval] VARIANT_BOOL* pValue);
		/// \brief <em>Retrieves the zero-based index of the item's default display column</em>
		///
		/// Retrieves the zero-based index of the item's default display column. This column is the one that
		/// should be displayed if only one column is displayed.
		///
		/// \remarks This property is read-only.
		///
		/// \sa IShListView::Columns, IShListViewNamespace::DefaultDisplayColumnIndex, DefaultSortColumnIndex
		[propget, id(DISPID_SHLVI_DEFAULTDISPLAYCOLUMNINDEX), helpstring("Retrieves the zero-based index of the item's default display column."), nonbrowsable]
		HRESULT DefaultDisplayColumnIndex([out, retval] LONG* pValue);
		/// \brief <em>Retrieves the zero-based index of the item's default sort column</em>
		///
		/// Retrieves the zero-based index of the item's default sort column. This column is the one by which
		/// the item's sub-items should be sorted initially.
		///
		/// \remarks This property is read-only.
		///
		/// \sa IShListView::Columns, IShListViewNamespace::DefaultSortColumnIndex, DefaultDisplayColumnIndex
		[propget, id(DISPID_SHLVI_DEFAULTSORTCOLUMNINDEX), helpstring("Retrieves the zero-based index of the item's default sort column."), nonbrowsable]
		HRESULT DefaultSortColumnIndex([out, retval] LONG* pValue);
		/// \brief <em>Retrieves or sets the item's name</em>
		///
		/// Retrieves the item's name as provided by the shell. For items having the \c isaCanBeRenamed shell
		/// attribute set, the \c dntDisplayName display name can be set.
		///
		/// \param[in] displayNameType Specifies the name to retrieve or set. Any of the values defined by the
		///            \c DisplayNameTypeConstants enumeration is valid.
		/// \param[in] relativeToDesktop If \c True, the retrieved name is relative to the Desktop; otherwise
		///            it is relative to the parent shell item.
		///
		/// \sa ShellAttributes, LinkTarget, DisplayNameTypeConstants
		[propget, id(DISPID_SHLVI_DISPLAYNAME), helpstring("Retrieves or sets the item's display name."), nonbrowsable]
		HRESULT DisplayName([in, defaultvalue(dntDisplayName)] DisplayNameTypeConstants displayNameType, [in, defaultvalue(0)] VARIANT_BOOL relativeToDesktop, [out, retval] BSTR* pValue);
		[propput, id(DISPID_SHLVI_DISPLAYNAME), helpstring("Retrieves or sets the item's display name."), nonbrowsable]
		HRESULT DisplayName([in, defaultvalue(dntDisplayName)] DisplayNameTypeConstants displayNameType, [in, defaultvalue(0)] VARIANT_BOOL relativeToDesktop, [in] BSTR newValue);
		/// \brief <em>Specifies the item's file attributes</em>
		///
		/// Retrieves or sets the item's file attributes. Any combination of the values defined by the
		/// \c ItemFileAttributesConstants enumeration is valid.
		///
		/// \param[in] mask Specifies the file attributes to check. Any combination of the values defined by
		///            the \c ItemFileAttributesConstants enumeration is valid.
		///
		/// \remarks This property will fail for non-filesystem items.
		///
		/// \sa ShellAttributes, ItemFileAttributesConstants
		[propget, id(DISPID_SHLVI_FILEATTRIBUTES), helpstring("Retrieves or sets the item's file attributes. This property will fail for non-filesystem items."), nonbrowsable]
		HRESULT FileAttributes([in, defaultvalue(0x17FB7)] ItemFileAttributesConstants mask, [out, retval] ItemFileAttributesConstants* pValue);
		[propput, id(DISPID_SHLVI_FILEATTRIBUTES), helpstring("Retrieves or sets the item's file attributes. This property will fail for non-filesystem items."), nonbrowsable]
		HRESULT FileAttributes([in, defaultvalue(0x17FB7)] ItemFileAttributesConstants mask, [in] ItemFileAttributesConstants newValue);
		/// \brief <em>Retrieves the listview item's pIDL</em>
		///
		/// Retrieves the fully qualified pIDL associated with this listview item.
		///
		/// \remarks The returned pIDL should NOT be freed!\n
		///          This is the default property of the \c IShListViewItem interface.\n
		///          This property is read-only.
		///
		/// \sa ID
		[propget, id(DISPID_SHLVI_FULLYQUALIFIEDPIDL), helpstring("Retrieves the listview item's fully qualified pIDL. Do NOT free this pIDL!"), nonbrowsable]
		HRESULT FullyQualifiedPIDL([out, retval] LONG* pValue);
		/// \brief <em>Retrieves the listview item's ID</em>
		///
		/// Retrieves an unique ID identifying this listview item.
		///
		/// \remarks A listview item's ID will never change.\n
		///          This property is read-only.
		///
		/// \sa FullyQualifiedPIDL, ListViewItemObject
		[propget, id(DISPID_SHLVI_ID), helpstring("Retrieves the listview item's unique ID.")]
		HRESULT ID([out, retval] LONG* pValue);
		/// \brief <em>Retrieves the item's info tip text</em>
		///
		/// Retrieves the item's info tip text.
		///
		/// \param[in] flags A bit field influencing the info tip being returned. Any combination of the values
		///            defined by the \c InfoTipFlagsConstants enumeration is valid.
		///
		/// \remarks This property is read-only.
		///
		/// \sa IShListView::InfoTipFlags, InfoTipFlagsConstants
		[propget, id(DISPID_SHLVI_INFOTIPTEXT), helpstring("Retrieves the item's info tip text."), nonbrowsable]
		HRESULT InfoTipText([in, defaultvalue(itfDefault | itfNoInfoTipFollowSystemSettings | itfAllowSlowInfoTipFollowSysSettings)] InfoTipFlagsConstants flags, [out, retval] BSTR* pValue);
		/// \brief <em>Retrieves the link target if the item is a link</em>
		///
		/// Retrieves the path to which the item is linking.
		///
		/// \remarks This property raises an error if it is called for an item that isn't a link.\n
		///          This property is read-only.
		///
		/// \sa ShellAttributes, DisplayName, LinkTargetPIDL
		[propget, id(DISPID_SHLVI_LINKTARGET), helpstring("Retrieves the path to which the item is linking."), nonbrowsable]
		HRESULT LinkTarget([out, retval] BSTR* pValue);
		/// \brief <em>Retrieves the link target's fully qualified pIDL if the item is a link</em>
		///
		/// Retrieves the pIDL to which the item is linking.
		///
		/// \remarks The returned pIDL MUST be freed!\n
		///          This property raises an error if it is called for an item that isn't a link.\n
		///          This property is read-only.
		///
		/// \sa ShellAttributes, LinkTarget
		[propget, id(DISPID_SHLVI_LINKTARGETPIDL), helpstring("Retrieves the pIDL to which the item is linking. You MUST free this pIDL!"), nonbrowsable]
		HRESULT LinkTargetPIDL([out, retval] LONG* pValue);
		/// \brief <em>Retrieves the listview item's corresponding \c ListViewItem object</em>
		///
		/// Retrieves the \c ListViewItem object of this listview item from the attached \c ExplorerListView
		/// control.
		///
		/// \remarks This property is read-only.
		///
		/// \sa ID, Namespace
		[propget, id(DISPID_SHLVI_LISTVIEWITEMOBJECT), helpstring("Retrieves the 'ListViewItem' object of this listview item from the attached 'ExplorerListView' control.")]
		HRESULT ListViewItemObject([out, retval] IDispatch** ppItem);
		/// \brief <em>Specifies which of the listview item's properties are managed by the \c ShellListView control</em>
		///
		/// Retrieves or sets a bit field specifying which of the listview item's properties are managed by the
		/// \c ShellListView control rather than the listview control/your application. Any combination of the
		/// values defined by the \c ShLvwManagedItemPropertiesConstants enumeration is valid.
		///
		/// \sa IShListView::DefaultManagedItemProperties, ShLvwManagedItemPropertiesConstants
		[propget, id(DISPID_SHLVI_MANAGEDPROPERTIES), helpstring("Retrieves or sets which of the listview item's properties are managed by the ShellListView control.")]
		HRESULT ManagedProperties([out, retval] ShLvwManagedItemPropertiesConstants* pValue);
		[propput, id(DISPID_SHLVI_MANAGEDPROPERTIES), helpstring("Retrieves or sets which of the listview item's properties are managed by the ShellListView control.")]
		HRESULT ManagedProperties([in] ShLvwManagedItemPropertiesConstants newValue);
		/// \brief <em>Retrieves the shell namespace that the item belongs to</em>
		///
		/// Retrieves the shell namespace that the item belongs to. If set to \c Nothing, the item doesn't
		/// belong to any namespace.
		///
		/// \remarks This property is read-only.
		///
		/// \sa ListViewItemObject
		[propget, id(DISPID_SHLVI_NAMESPACE), helpstring("Retrieves the shell namespace that the item belongs to.")]
		HRESULT Namespace([out, retval] IShListViewNamespace** ppNamespace);
		/// \brief <em>Retrieves whether opening this item requires elevated rights</em>
		///
		/// Retrieves whether opening this item requires elevated rights.
		///
		/// \remarks Requires Windows Vista or newer.\n
		///          This property is read-only.
		///
		/// \sa IShListView::DisplayElevationShieldOverlays
		[propget, id(DISPID_SHLVI_REQUIRESELEVATION), helpstring("Retrieves whether opening this item requires elevated rights. Requires Windows Vista or newer."), nonbrowsable]
		HRESULT RequiresElevation([out, retval] VARIANT_BOOL* pValue);
		/// \brief <em>Retrieves the item's shell attributes</em>
		///
		/// Retrieves the item's shell attributes. Any combination of the values defined by the
		/// \c ItemShellAttributesConstants enumeration is valid.
		///
		/// \param[in] mask Specifies the shell attributes to check. Any combination of the values defined by
		///            the \c ItemShellAttributesConstants enumeration is valid.
		/// \param[in] validate If \c False, cached data may be used to handle the request; otherwise not.
		///
		/// \remarks This property is read-only.
		///
		/// \sa FileAttributes, ItemShellAttributesConstants
		[propget, id(DISPID_SHLVI_SHELLATTRIBUTES), helpstring("Retrieves the item's shell attributes."), nonbrowsable]
		HRESULT ShellAttributes([in, defaultvalue(0xFEFFE17F)] ItemShellAttributesConstants mask, [in, defaultvalue(0)] VARIANT_BOOL Validate, [out, retval] ItemShellAttributesConstants* pValue);
		/// \brief <em>Retrieves whether the item supports the creation of new folders as sub-items</em>
		///
		/// Retrieves whether the item supports the creation of new folders as sub-items. If \c True, it does;
		/// otherwise it doesn't.
		///
		/// \remarks This property is read-only.
		[propget, id(DISPID_SHLVI_SUPPORTSNEWFOLDERS), helpstring("Retrieves whether the item supports the creation of new folders as sub-items."), nonbrowsable]
		HRESULT SupportsNewFolders([out, retval] VARIANT_BOOL* pValue);

		/// \brief <em>Creates the item's shell context menu</em>
		///
		/// \return The shell context menu's handle.
		///
		/// \sa DisplayShellContextMenu, IShListView::CreateShellContextMenu,
		///     IShListViewItems::CreateShellContextMenu, IShListViewNamespace::CreateShellContextMenu,
		///     IShListView::DestroyShellContextMenu
		[id(DISPID_SHLVI_CREATESHELLCONTEXTMENU), helpstring("Creates the item's shell context menu.")]
		HRESULT CreateShellContextMenu([out, retval] OLE_HANDLE* pMenu);
		/// \brief <em>Opens the folder customization dialog for the item</em>
		///
		/// \sa Customizable
		[id(DISPID_SHLVI_CUSTOMIZE), helpstring("Opens the folder customization dialog for the item.")]
		HRESULT Customize(void);
		/// \brief <em>Displays the item's shell context menu</em>
		///
		/// \param[in] x The x-coordinate (in pixels) of the menu's position relative to the attached control's
		///            upper-left corner.
		/// \param[in] y The y-coordinate (in pixels) of the menu's position relative to the attached control's
		///            upper-left corner.
		///
		/// \sa CreateShellContextMenu, IShListView::DisplayShellContextMenu,
		///     IShListViewItems::DisplayShellContextMenu, IShListViewNamespace::DisplayShellContextMenu
		[id(DISPID_SHLVI_DISPLAYSHELLCONTEXTMENU), helpstring("Displays the item's shell context menu.")]
		HRESULT DisplayShellContextMenu([in] OLE_XPOS_PIXELS x, [in] OLE_YPOS_PIXELS y);
		/// \brief <em>Executes the default command from the item's shell context menu</em>
		///
		/// \sa CreateShellContextMenu, DisplayShellContextMenu,
		///     IShListView::InvokeDefaultShellContextMenuCommand,
		///     IShListViewItems::InvokeDefaultShellContextMenuCommand
		[id(DISPID_SHLVI_INVOKEDEFAULTSHELLCONTEXTMENUCOMMAND), helpstring("Executes the default command from the item's shell context menu.")]
		HRESULT InvokeDefaultShellContextMenuCommand(void);
		/// \brief <em>Checks whether the shell item wrapped by this object still exists</em>
		///
		/// \return \c True if the shell item still exists; otherwise \c False.
		[id(DISPID_SHLVI_VALIDATE), helpstring("Checks whether the shell item wrapped by this object still exists.")]
		HRESULT Validate([out, retval] VARIANT_BOOL* pValue);

		#ifdef ACTIVATE_SECZONE_FEATURES
			/// \brief <em>Retrieves the Internet Explorer security zone the item belongs to</em>
			///
			/// Retrieves the Internet Explorer security zone the item belongs to.
			///
			/// \remarks This property is read-only.
			///
			/// \sa ISecurityZone
			[propget, id(DISPID_SHLVI_SECURITYZONE), helpstring("Retrieves the Internet Explorer security zone the item belongs to.")]
			HRESULT SecurityZone([out, retval] ISecurityZone** ppSecurityZone);
		#endif
	}


	/// \interface _IShListViewItemEvents
	/// \brief <em>The \c ShellListViewItem class' events interface</em>
	///
	/// This interface defines all events the \c ShellListViewItem class may raise.
	///
	/// \sa IShListViewItem
	[
		uuid(0CF7DE71-749C-4a13-8B90-007E23F6FE6A),
		helpstring("IShListViewItem-event-interface")
	]
	dispinterface _IShListViewItemEvents
	{
		properties:
		methods:
	};


	/// \brief <em>The \c ShellListViewItem class</em>
	///
	/// This COM class implements the \c IShListViewItem and \c _IShListViewItemEvents interfaces.
	///
	/// \sa IShListViewItem, _IShListViewItemEvents, ShellListView, ShellListViewItems
	[
		uuid(469CD397-8EA7-4201-82E1-24EAC34EF7ED),
		version(1.5),
		noncreatable,
		helpstring("ShellListViewItem Class 1.5 (Unicode)")
	]
	coclass ShellListViewItem
	{
		[default] interface IShListViewItem;
		[default, source] dispinterface _IShListViewItemEvents;
	};


	/// \interface IShListViewItems
	/// \brief <em>Manages a collection of \c ShellListViewItem objects</em>
	///
	/// This interface provides easy access (including filtering) to collections of \c ShellListViewItem
	/// objects. A \c ShellListViewItems object is used to group items that have certain properties in
	/// common.
	///
	/// \sa _IShListViewItemsEvents, IShListViewItem, IShListView
	[
		object,
		uuid(2FEE1E03-1454-4881-841D-0691BDCC32A0),
		dual,
		nonextensible,
		helpstring("IShListViewItems interface"),
		pointer_default(unique)
	]
	interface IShListViewItems : IDispatch
	{
		/// \brief <em>Specifies whether filters for string properties are case sensitive</em>
		///
		/// Retrieves or sets whether string comparisons, that are done when applying the filters on an item,
		/// are case sensitive. If this property is set to \c True, string comparisons are case sensitive;
		/// otherwise not.
		///
		/// \sa Filter, ComparisonFunction
		[propget, id(DISPID_SHLVIS_CASESENSITIVEFILTERS), helpstring("Retrieves or sets whether string comparisons, that are done when applying the filters on an item, are case sensitive.")]
		HRESULT CaseSensitiveFilters([out, retval] VARIANT_BOOL* pValue);
		[propput, id(DISPID_SHLVIS_CASESENSITIVEFILTERS), helpstring("Retrieves or sets whether string comparisons, that are done when applying the filters on an item, are case sensitive.")]
		HRESULT CaseSensitiveFilters([in] VARIANT_BOOL newValue);
		/// \brief <em>Specifies a filter's comparison function</em>
		///
		/// Retrieves or sets an item filter's comparison function. This property takes the address of a
		/// function having the following signature:\n
		/// \code
		///   IsEqual(ByVal itemProperty As Long, ByVal pattern As Long) As Long
		/// \endcode
		/// This function must compare its arguments and return a non-zero value if the arguments are equal and
		/// zero otherwise.\n
		/// If this property is set to 0, the control compares the values itself using the "=" operator
		/// (\c lstrcmp and \c lstrcmpi for string filters).
		///
		/// \param[in] filteredProperty A value specifying the property that the filter refers to. Any of the
		///            values defined by the \c ShLvwFilteredPropertyConstants enumeration is valid.
		///
		/// \sa Filter, CaseSensitiveFilters, ShLvwFilteredPropertyConstants,
		///     <a href="https://msdn.microsoft.com/en-us/library/ms647488.aspx">lstrcmp</a>,
		///     <a href="https://msdn.microsoft.com/en-us/library/ms647489.aspx">lstrcmpi</a>
		[propget, id(DISPID_SHLVIS_COMPARISONFUNCTION), helpstring("Retrieves or sets an item filter's comparison function."), nonbrowsable]
		HRESULT ComparisonFunction([in] ShLvwFilteredPropertyConstants filteredProperty, [out, retval] LONG* pValue);
		[propput, id(DISPID_SHLVIS_COMPARISONFUNCTION), helpstring("Retrieves or sets an item filter's comparison function."), nonbrowsable]
		HRESULT ComparisonFunction([in] ShLvwFilteredPropertyConstants filteredProperty, [in] LONG newValue);
		/// \brief <em>Specifies a filter for a property</em>
		///
		/// Retrieves or sets an item filter.\n
		/// An \c IShListViewItems collection can be filtered by any of \c IShListViewItem's properties, that
		/// the \c ShLvwFilteredPropertyConstants enumeration defines a constant for. Combinations of multiple
		/// filters are possible, too. A filter is a \c Variant containing an array whose elements are of
		/// type \c Variant. Each element of this array contains a valid value for the property, that the
		/// filter refers to.\n
		/// When applying the filter, the elements of the array are connected using the logical Or operator.\n\n
		/// Setting this property to \c Empty or any other value, that doesn't match the described structure,
		/// deactivates the filter.
		///
		/// \param[in] filteredProperty A value specifying the property that the filter refers to. Any of the
		///            values defined by the \c ShLvwFilteredPropertyConstants enumeration is valid.
		///
		/// \sa FilterType, ComparisonFunction, ShLvwFilteredPropertyConstants
		[propget, id(DISPID_SHLVIS_FILTER), helpstring("Retrieves or sets an item filter.")]
		HRESULT Filter([in] ShLvwFilteredPropertyConstants filteredProperty, [out, retval] VARIANT* pValue);
		[propput, id(DISPID_SHLVIS_FILTER), helpstring("Retrieves or sets an item filter.")]
		HRESULT Filter([in] ShLvwFilteredPropertyConstants filteredProperty, [in] VARIANT newValue);
		/// \brief <em>Specifies a filter's type</em>
		///
		/// Retrieves or sets an item filter's type.
		///
		/// \param[in] filteredProperty A value specifying the property that the filter refers to. Any of the
		///            values defined by the \c ShLvwFilteredPropertyConstants enumeration is valid.
		///
		/// \sa Filter, ShLvwFilteredPropertyConstants, FilterTypeConstants
		[propget, id(DISPID_SHLVIS_FILTERTYPE), helpstring("Retrieves or sets an item filter's type.")]
		HRESULT FilterType([in] ShLvwFilteredPropertyConstants filteredProperty, [out, retval] FilterTypeConstants* pValue);
		[propput, id(DISPID_SHLVIS_FILTERTYPE), helpstring("Retrieves or sets an item filter's type.")]
		HRESULT FilterType([in] ShLvwFilteredPropertyConstants filteredProperty, [in] FilterTypeConstants newValue);
		/// \brief <em>Retrieves a \c ShellListViewItem object from the collection</em>
		///
		/// Retrieves a \c ShellListViewItem object from the collection that wraps the item identified by
		/// \c itemIdentifier.
		///
		/// \param[in] itemIdentifier A value that identifies the listview item to be retrieved.
		/// \param[in] itemIdentifierType A value specifying the meaning of \c itemIdentifier. Any of the
		///            values defined by the \c ShLvwItemIdentifierTypeConstants enumeration is valid.
		///
		/// \remarks This is the default property of the \c IShListViewItem interface.\n
		///          This property is read-only.
		///
		/// \sa IShListViewItem, ShLvwItemIdentifierTypeConstants, Add, Remove, Contains
		[propget, id(DISPID_SHLVIS_ITEM), helpstring("Retrieves a 'ShellListViewItem' object from the collection that wraps the item identified by 'itemIdentifier'.")]
		HRESULT Item([in] VARIANT itemIdentifier, [in, defaultvalue(sliitID)] ShLvwItemIdentifierTypeConstants itemIdentifierType, [out, retval] IShListViewItem** ppItem);
		/// \if PRIVATEDOC
		///   \brief <em>Retrieves a \c VARIANT enumerator</em>
		///
		///   Retrieves a \c VARIANT enumerator that may be used to iterate the \c ShellListViewItem objects
		///   managed by this collection object. This iterator is used by Visual Basic's \c For...Each
		///   construct.
		///
		///   \remarks This property is read-only and hidden.
		///
		///   \sa <a href="https://msdn.microsoft.com/en-us/library/ms221053.aspx">IEnumVARIANT</a>
		/// \endif
		[propget, id(DISPID_SHLVIS__NEWENUM), restricted]
		HRESULT _NewEnum([out, retval] IUnknown** ppEnumerator);

		/// \brief <em>Adds a new shell listview item to the listview control</em>
		///
		/// Adds a shell listview item with the specified properties at the specified position in the listview
		/// control and returns a \c ShellListViewItem object wrapping the inserted item.
		///
		/// \param[in] pIDLOrParsingName The fully qualified pIDL or parsing name of the new item. The control
		///            takes ownership over the pIDL and will free it if the item is transformed into a normal
		///            listview item.
		/// \param[in] insertAt The new item's zero-based index. If set to -1, the item will be inserted
		///            as the last item.
		/// \param[in] managedProperties Specifies which of the listview item's properties are managed by the
		///            \c ShellListView control rather than the listview control/your application. Any
		///            combination of the values defined by the \c ShLvwManagedItemPropertiesConstants
		///            enumeration is valid. If set to -1, the value of the
		///            \c IShListView::DefaultManagedItemProperties property is used.
		/// \param[in] itemText The new item's caption text. The maximum number of characters in this text
		///            is 260. If set to \c vbNullString, the listview control will fire its
		///            \c ItemGetDisplayInfo event each time this property's value is required.
		/// \param[in] iconIndex The zero-based index of the item's icon in the listview control's \c ilSmall,
		///            \c ilLarge, \c ilExtraLarge and \c ilHighResolution imagelists. If set to -1, the
		///            listview control will fire its \c ItemGetDisplayInfo event each time this property's
		///            value is required. A value of -2 means 'not specified' and is valid if there's no
		///            imagelist associated with the listview control.
		/// \param[in] itemIndentation The new item's indentation in 'Details' view in image widths. If set
		///            to 1, the item's indentation will be 1 image width; if set to 2, it will be 2 image
		///            widths and so on. If set to -1, the listview control will fire its \c ItemGetDisplayInfo
		///            event each time this property's value is required.
		/// \param[in] itemData A \c Long value that will be associated with the item.
		/// \param[in] groupID The unique ID of the group that the new item will belong to. If set to \c -2,
		///            the item won't belong to any group. Can't be set to -1.
		/// \param[in] tileViewColumns An array of column indexes which specify the columns that will be
		///            used to display additional details below the new item's text in 'Tiles' view. If set
		///            to an empty array, no details will be displayed. If set to \c Empty, the listview
		///            control will fire its \c ItemGetDisplayInfo event each time this property's value is
		///            required.
		///
		/// \return The inserted item.
		///
		/// \remarks The \c groupID and \c tileViewColumns parameters will be ignored if comctl32.dll is
		///          used in a version older than 6.0.
		///
		/// \sa AddExisting, Count, Remove, RemoveAll, IShListViewItem::FullyQualifiedPIDL,
		///     IShListView::DefaultManagedItemProperties, ShLvwManagedItemPropertiesConstants
		[id(DISPID_SHLVIS_ADD), helpstring("Adds a new shell listview item to the listview control.")]
		HRESULT Add([in] VARIANT pIDLOrParsingName, [in, defaultvalue(-1)] LONG insertAt, [in, defaultvalue(-1)] ShLvwManagedItemPropertiesConstants ManagedProperties, [in, defaultvalue(NULL)] BSTR itemText, [in, defaultvalue(-2)] LONG IconIndex, [in, defaultvalue(0)] LONG itemIndentation, [in, defaultvalue(0)] LONG ItemData, [in, defaultvalue(-2)] LONG groupID, [in, optional] VARIANT TileViewColumns, [out, retval] IShListViewItem** ppAddedItem);
		/// \brief <em>Transfers the specified listview item into a shell listview item</em>
		///
		/// Transfers a listview item into a shell listview item and returns a \c ShellListViewItem object
		/// wrapping the item.
		///
		/// \param[in] itemID The unique ID of the item to transfer. If the item already is a shell item,
		///            its pIDL is freed and replaced with the one specified by \c pIDLOrParsingName.
		/// \param[in] pIDLOrParsingName The fully qualified pIDL or parsing name of the item specified by
		///            \c itemID. The control takes ownership over the pIDL and will free it if the item is
		///            transformed back into a normal listview item.
		/// \param[in] managedProperties Specifies which of the listview item's properties are managed by the
		///            \c ShellListView control rather than the listview control/your application. Any
		///            combination of the values defined by the \c ShLvwManagedItemPropertiesConstants
		///            enumeration is valid. If set to -1, the value of the
		///            \c IShListView::DefaultManagedItemProperties property is used.
		///
		/// \return The transfered item.
		///
		/// \sa Add, Count, Remove, RemoveAll, IShListViewItem::ID, IShListViewItem::FullyQualifiedPIDL,
		///     IShListView::DefaultManagedItemProperties, ShLvwManagedItemPropertiesConstants
		[id(DISPID_SHLVIS_ADDEXISTING), helpstring("Transfers the specified listview item into a shell listview item.")]
		HRESULT AddExisting([in] LONG itemID, [in] VARIANT pIDLOrParsingName, [in, defaultvalue(-1)] ShLvwManagedItemPropertiesConstants ManagedProperties, [out, retval] IShListViewItem** ppAddedItem);
		/// \brief <em>Retrieves whether the specified item is part of the item collection</em>
		///
		/// \param[in] itemIdentifier A value that identifies the item to be checked.
		/// \param[in] itemIdentifierType A value specifying the meaning of \c itemIdentifier. Any of the
		///            values defined by the \c ShLvwItemIdentifierTypeConstants enumeration is valid.
		///
		/// \return \c True, if the specified item is part of the collection; otherwise \c False.
		///
		/// \sa Filter, Add, Remove, ShLvwItemIdentifierTypeConstants
		[id(DISPID_SHLVIS_CONTAINS), helpstring("Retrieves whether the specified item is part of the item collection.")]
		HRESULT Contains([in] VARIANT itemIdentifier, [in, defaultvalue(sliitID)] ShLvwItemIdentifierTypeConstants itemIdentifierType, [out, retval] VARIANT_BOOL* pValue);
		/// \brief <em>Counts the items in the collection</em>
		///
		/// Retrieves the number of \c ShellListViewItem objects in the collection.
		///
		/// \return The number of elements in the collection.
		///
		/// \sa Add, Remove, RemoveAll
		[id(DISPID_SHLVIS_COUNT), helpstring("Retrieves the number of 'ShellListViewItem' objects in the collection.")]
		HRESULT Count([out, retval] LONG* pValue);
		/// \brief <em>Creates the items' shell context menu</em>
		///
		/// \return The shell context menu's handle.
		///
		/// \sa DisplayShellContextMenu, IShListView::CreateShellContextMenu,
		///     IShListViewItem::CreateShellContextMenu, IShListViewNamespace::CreateShellContextMenu,
		///     IShListView::DestroyShellContextMenu
		[id(DISPID_SHLVIS_CREATESHELLCONTEXTMENU), helpstring("Creates the items' shell context menu.")]
		HRESULT CreateShellContextMenu([out, retval] OLE_HANDLE* pMenu);
		/// \brief <em>Displays the items' shell context menu</em>
		///
		/// \param[in] x The x-coordinate (in pixels) of the menu's position relative to the attached control's
		///            upper-left corner.
		/// \param[in] y The y-coordinate (in pixels) of the menu's position relative to the attached control's
		///            upper-left corner.
		///
		/// \sa CreateShellContextMenu, IShListView::DisplayShellContextMenu,
		///     IShListViewItem::DisplayShellContextMenu, IShListViewNamespace::DisplayShellContextMenu
		[id(DISPID_SHLVIS_DISPLAYSHELLCONTEXTMENU), helpstring("Displays the items' shell context menu.")]
		HRESULT DisplayShellContextMenu([in] OLE_XPOS_PIXELS x, [in] OLE_YPOS_PIXELS y);
		/// \brief <em>Executes the default command from the items' shell context menu</em>
		///
		/// \sa CreateShellContextMenu, DisplayShellContextMenu,
		///     IShListView::InvokeDefaultShellContextMenuCommand,
		///     IShListViewItem::InvokeDefaultShellContextMenuCommand
		[id(DISPID_SHLVIS_INVOKEDEFAULTSHELLCONTEXTMENUCOMMAND), helpstring("Executes the default command from the items' shell context menu.")]
		HRESULT InvokeDefaultShellContextMenuCommand(void);
		/// \brief <em>Removes the specified item from the collection</em>
		///
		/// \param[in] itemIdentifier A value that identifies the shell listview item to be removed.
		/// \param[in] itemIdentifierType A value specifying the meaning of \c itemIdentifier. Any of the
		///            values defined by the \c ShLvwItemIdentifierTypeConstants enumeration is valid.
		/// \param[in] removeFromListView If \c True, the item is removed from the listview control, too;
		///            otherwise it becomes a normal listview item.
		///
		/// \sa Add, Count, RemoveAll, Contains, ShLvwItemIdentifierTypeConstants
		[id(DISPID_SHLVIS_REMOVE), helpstring("Removes the specified item from the collection.")]
		HRESULT Remove([in] VARIANT itemIdentifier, [in, defaultvalue(sliitID)] ShLvwItemIdentifierTypeConstants itemIdentifierType, [in, defaultvalue(-1)] VARIANT_BOOL removeFromListView);
		/// \brief <em>Removes all items from the collection</em>
		///
		/// \param[in] removeFromListView If \c True, the items are removed from the listview control, too;
		///            otherwise they become normal listview items.
		///
		/// \sa Add, Count, Remove
		[id(DISPID_SHLVIS_REMOVEALL), helpstring("Removes all items from the collection.")]
		HRESULT RemoveAll([in, defaultvalue(-1)] VARIANT_BOOL removeFromListView);
	}


	/// \interface _IShListViewItemsEvents
	/// \brief <em>The \c ShellListViewItems class' events interface</em>
	///
	/// This interface defines all events the \c ShellListViewItems class may raise.
	///
	/// \sa IShListViewItems
	[
		uuid(1AFE4878-3C4C-4973-94EA-DE3121B959DB),
		helpstring("IShListViewItems-event-interface")
	]
	dispinterface _IShListViewItemsEvents
	{
		properties:
		methods:
	};


	/// \brief <em>The \c ShellListViewItems class</em>
	///
	/// This COM class implements the \c IShListViewItems and \c _IShListViewItemsEvents interfaces.
	///
	/// \sa IShListViewItems, _IShListViewItemsEvents, ShellListView, ShellListViewItem
	[
		uuid(71C6A6A6-175A-4e01-8B54-89D86B30ACC9),
		version(1.5),
		noncreatable,
		helpstring("ShellListViewItems Class 1.5 (Unicode)")
	]
	coclass ShellListViewItems
	{
		[default] interface IShListViewItems;
		[default, source] dispinterface _IShListViewItemsEvents;
	};


	/// \interface IShListViewNamespace
	/// \brief <em>Wraps an existing shell namespace</em>
	///
	/// This interface is a wrapper around a shell namespace.
	///
	/// \sa _IShListViewNamespaceEvents, IShListViewNamespaces, IShListView
	[
		object,
		uuid(F91922B4-F616-4c8e-8CC7-46A91B626E80),
		dual,
		nonextensible,
		helpstring("IShListViewNamespace interface"),
		pointer_default(unique)
	]
	interface IShListViewNamespace : IDispatch
	{
		/// \brief <em>Specifies whether the namespace triggers item sorting automatically</em>
		///
		/// Retrieves or sets whether the namespace triggers item sorting automatically. Any of the values
		/// defined by the \c AutoSortItemsConstants enumeration is valid.
		///
		/// \remarks On automatic sorting the items are sorted like in Windows Explorer.\n
		///          Automatic sorting sorts by the namespace's default sort column until the column is changed
		///          by manually calling \c IShListView::SortItems.\n
		///          If a namespace triggers a sorting action, the whole attached control is sorted instead
		///          of only the shell items that are children of the namespace.
		///
		/// \sa DefaultSortColumnIndex, IShListView::ListItems, IShListView::SortItems,
		///     IShListView::ItemTypeSortOrder, AutoSortItemsConstants
		[propget, id(DISPID_SHLVNS_AUTOSORTITEMS), helpstring("Retrieves or sets whether the namespace triggers item sorting automatically.")]
		HRESULT AutoSortItems([out, retval] AutoSortItemsConstants* pValue);
		[propput, id(DISPID_SHLVNS_AUTOSORTITEMS), helpstring("Retrieves or sets whether the namespace triggers item sorting automatically.")]
		HRESULT AutoSortItems([in] AutoSortItemsConstants newValue);
		/// \brief <em>Retrieves whether the namespace can be customized via a Desktop.ini file</em>
		///
		/// Retrieves whether the namespace can be customized via a Desktop.ini file. If \c True, it can be
		/// customized; otherwise not.
		///
		/// \remarks This property is read-only.
		///
		/// \sa Customize
		[propget, id(DISPID_SHLVNS_CUSTOMIZABLE), helpstring("Retrieves whether the namespace can be customized via a Desktop.ini file."), nonbrowsable]
		HRESULT Customizable([out, retval] VARIANT_BOOL* pValue);
		/// \brief <em>Retrieves the zero-based index of the namespace's default display column</em>
		///
		/// Retrieves the zero-based index of the namespace's default display column. This column is the one
		/// that should be displayed if only one column is displayed.
		///
		/// \remarks This property is read-only.
		///
		/// \sa IShListView::Columns, IShListViewItem::DefaultDisplayColumnIndex, DefaultSortColumnIndex
		[propget, id(DISPID_SHLVNS_DEFAULTDISPLAYCOLUMNINDEX), helpstring("Retrieves the zero-based index of the namespace's default display column."), nonbrowsable]
		HRESULT DefaultDisplayColumnIndex([out, retval] LONG* pValue);
		/// \brief <em>Retrieves the zero-based index of the namespace's default sort column</em>
		///
		/// Retrieves the zero-based index of the namespace's default sort column. This column is the one by
		/// which the namespace's items should be sorted initially.
		///
		/// \remarks This property is read-only.
		///
		/// \sa IShListView::Columns, IShListViewItem::DefaultSortColumnIndex, DefaultDisplayColumnIndex
		[propget, id(DISPID_SHLVNS_DEFAULTSORTCOLUMNINDEX), helpstring("Retrieves the zero-based index of the namespace's default sort column."), nonbrowsable]
		HRESULT DefaultSortColumnIndex([out, retval] LONG* pValue);
		/// \brief <em>Retrieves the pIDL of the namespace's root</em>
		///
		/// Retrieves the fully qualified pIDL associated with this namespace.
		///
		/// \remarks The returned pIDL should NOT be freed!\n
		///          This is the default property of the \c IShListViewNamespace interface.\n
		///          This property is read-only.
		///
		/// \sa Index, ShLvwNamespaceIdentifierTypeConstants
		[propget, id(DISPID_SHLVNS_FULLYQUALIFIEDPIDL), helpstring("Retrieves the fully qualified pIDL of the namespace's root. Do NOT free this pIDL!"), nonbrowsable]
		HRESULT FullyQualifiedPIDL([out, retval] LONG* pValue);
		/// \brief <em>Retrieves the namespace's zero-based index</em>
		///
		/// Retrieves a zero-based index identifying this namespace.
		///
		/// \remarks Adding or removing namespaces changes other namespaces' indexes.\n
		///          This property is read-only.
		///
		/// \sa FullyQualifiedPIDL, ShLvwNamespaceIdentifierTypeConstants
		[propget, id(DISPID_SHLVNS_INDEX), helpstring("Retrieves the namespace's zero-based index.")]
		HRESULT Index([out, retval] LONG* pValue);
		/// \brief <em>Retrieves the shell listview items belonging to this namespace</em>
		///
		/// Retrieves a collection object wrapping the shell listview items belonging to this namespace.
		///
		/// \remarks This property is read-only.
		///
		/// \sa IShListView::ListItems, IShListViewItems
		[propget, id(DISPID_SHLVNS_ITEMS), helpstring("Retrieves a collection object wrapping the shell listview items belonging to this namespace.")]
		HRESULT Items([out, retval] IShListViewItems** ppItems);
		/// \brief <em>Retrieves the namespace enumeration settings used to enumerate items</em>
		///
		/// Retrieves the namespace enumeration settings used to enumerate items within this namespace.
		///
		/// \remarks This property is read-only.
		///
		/// \sa INamespaceEnumSettings
		[propget, id(DISPID_SHLVNS_NAMESPACEENUMSETTINGS), helpstring("Retrieves the namespace enumeration settings used to enumerate items within this namespace.")]
		HRESULT NamespaceEnumSettings([out, retval] INamespaceEnumSettings** ppEnumSettings);
		/// \brief <em>Retrieves whether the namespace supports the creation of new folders as sub-items</em>
		///
		/// Retrieves whether the namespace supports the creation of new folders as sub-items. If \c True, it
		/// does; otherwise it doesn't.
		///
		/// \remarks This property is read-only.
		[propget, id(DISPID_SHLVNS_SUPPORTSNEWFOLDERS), helpstring("Retrieves whether the namespace supports the creation of new folders as sub-items."), nonbrowsable]
		HRESULT SupportsNewFolders([out, retval] VARIANT_BOOL* pValue);

		/// \brief <em>Creates the namespace's background shell context menu</em>
		///
		/// \return The shell context menu's handle.
		///
		/// \sa DisplayShellContextMenu, IShListView::CreateShellContextMenu,
		///     IShListViewItem::CreateShellContextMenu, IShListViewItems::CreateShellContextMenu,
		///     IShListView::DestroyShellContextMenu
		[id(DISPID_SHLVNS_CREATESHELLCONTEXTMENU), helpstring("Creates the namespace's background shell context menu.")]
		HRESULT CreateShellContextMenu([out, retval] OLE_HANDLE* pMenu);
		/// \brief <em>Opens the folder customization dialog for the namespace</em>
		///
		/// \sa Customizable
		[id(DISPID_SHLVNS_CUSTOMIZE), helpstring("Opens the folder customization dialog for the namespace.")]
		HRESULT Customize(void);
		/// \brief <em>Displays the namespace's background shell context menu</em>
		///
		/// \param[in] x The x-coordinate (in pixels) of the menu's position relative to the attached control's
		///            upper-left corner.
		/// \param[in] y The y-coordinate (in pixels) of the menu's position relative to the attached control's
		///            upper-left corner.
		///
		/// \sa CreateShellContextMenu, IShListView::DisplayShellContextMenu,
		///     IShListViewItem::DisplayShellContextMenu, IShListViewItems::DisplayShellContextMenu
		[id(DISPID_SHLVNS_DISPLAYSHELLCONTEXTMENU), helpstring("Displays the namespace's background shell context menu.")]
		HRESULT DisplayShellContextMenu([in] OLE_XPOS_PIXELS x, [in] OLE_YPOS_PIXELS y);

		#ifdef ACTIVATE_SECZONE_FEATURES
			/// \brief <em>Retrieves the Internet Explorer security zone the namespace belongs to</em>
			///
			/// Retrieves the Internet Explorer security zone the namespace belongs to.
			///
			/// \remarks This property is read-only.
			///
			/// \sa ISecurityZone
			[propget, id(DISPID_SHLVNS_SECURITYZONE), helpstring("Retrieves the Internet Explorer security zone the namespace belongs to.")]
			HRESULT SecurityZone([out, retval] ISecurityZone** ppSecurityZone);
		#endif
	}


	/// \interface _IShListViewNamespaceEvents
	/// \brief <em>The \c ShellListViewNamespace class' events interface</em>
	///
	/// This interface defines all events the \c ShellListViewNamespace class may raise.
	///
	/// \sa IShListViewNamespace
	[
		uuid(3C4FDC4F-6EE2-4125-9694-D584ADFC6693),
		helpstring("IShListViewNamespace-event-interface")
	]
	dispinterface _IShListViewNamespaceEvents
	{
		properties:
		methods:
	};


	/// \brief <em>The \c ShellListViewNamespace class</em>
	///
	/// This COM class implements the \c IShListViewNamespace and \c _IShListViewNamespaceEvents interfaces.
	///
	/// \sa IShListViewNamespace, _IShListViewNamespaceEvents, ShellListView, ShellListViewNamespaces
	[
		uuid(0C538CDC-848E-4417-B76C-661E57101B00),
		version(1.5),
		noncreatable,
		helpstring("ShellListViewNamespace Class 1.5 (Unicode)")
	]
	coclass ShellListViewNamespace
	{
		[default] interface IShListViewNamespace;
		[default, source] dispinterface _IShListViewNamespaceEvents;
	};


	/// \interface IShListViewNamespaces
	/// \brief <em>Manages a collection of \c ShellListViewNamespace objects</em>
	///
	/// This interface provides easy access (including filtering) to collections of \c ShellListViewNamespace
	/// objects. A \c ShellListViewNamespaces object is used to group shell namespaces that have certain
	/// properties in common.
	///
	/// \sa _IShListViewNamespacesEvents, IShListViewNamespace, IShListView
	[
		object,
		uuid(9D099112-1E5C-42f5-8CB6-539326EBC3E3),
		dual,
		nonextensible,
		helpstring("IShListViewNamespaces interface"),
		pointer_default(unique)
	]
	interface IShListViewNamespaces : IDispatch
	{
		/// \brief <em>Retrieves a \c ShellListViewNamespace object from the collection</em>
		///
		/// Retrieves a \c ShellListViewNamespace object from the collection that wraps the item identified by
		/// \c namespaceIdentifier.
		///
		/// \param[in] namespaceIdentifier A value that identifies the namespace to be retrieved.
		/// \param[in] namespaceIdentifierType A value specifying the meaning of \c namespaceIdentifier. Any of
		///            the values defined by the \c ShLvwNamespaceIdentifierTypeConstants enumeration is valid.
		///
		/// \remarks This is the default property of the \c IShListViewNamespace interface.\n
		///          This property is read-only.
		///
		/// \sa IShListViewNamespace, ShLvwNamespaceIdentifierTypeConstants, Add, Remove, Contains
		[propget, id(DISPID_SHLVNSS_ITEM), helpstring("Retrieves a 'ShellListViewNamespace' object from the collection that wraps the item identified by 'namespaceIdentifier'.")]
		HRESULT Item([in] VARIANT namespaceIdentifier, [in, defaultvalue(slnsitExactPIDL)] ShLvwNamespaceIdentifierTypeConstants namespaceIdentifierType, [out, retval] IShListViewNamespace** ppNamespace);
		/// \if PRIVATEDOC
		///   \brief <em>Retrieves a \c VARIANT enumerator</em>
		///
		///   Retrieves a \c VARIANT enumerator that may be used to iterate the \c ShellListViewNamespace
		///   objects managed by this collection object. This iterator is used by Visual Basic's \c For...Each
		///   construct.
		///
		///   \remarks This property is read-only and hidden.
		///
		///   \sa <a href="https://msdn.microsoft.com/en-us/library/ms221053.aspx">IEnumVARIANT</a>
		/// \endif
		[propget, id(DISPID_SHLVNSS__NEWENUM), restricted]
		HRESULT _NewEnum([out, retval] IUnknown** ppEnumerator);

		/// \brief <em>Adds a new shell namespace to the listview control</em>
		///
		/// Adds a shell namespace with the specified properties at the specified position in the listview
		/// control and returns a \c ShellListViewNamespace object wrapping the inserted namespace.
		///
		/// \param[in] pIDLOrParsingName The fully qualified pIDL or parsing name of the namespace's parent
		///            shell item. The control takes ownership over the pIDL and will free it if the namespace
		///            is removed from the listview.\n
		///            The shell item specified by \c pIDLOrParsingName won't be inserted into the listview,
		///            but its sub-items will.
		/// \param[in] insertAt The first new item's zero-based index. If set to -1, the items will be inserted
		///            at the end of the list.
		/// \param[in] enumerationSettings A \c NamespaceEnumSettings object specifying various item
		///            enumeration options for this namespace. If not specified, the control's default
		///            enumeration settings specified by \c IShListView::DefaultNamespaceEnumSettings are
		///            used.
		/// \param[in] autoSortItems Specifies whether the items represented by the new namespace shall be
		///            sorted automatically. Any of the values defined by the \c AutoSortItemsConstants
		///            enumeration is valid.
		///
		/// \return The inserted namespace.
		///
		/// \remarks The items' \c ManagedProperties property is set to the value of the
		///          \c IShListView::DefaultManagedItemProperties property.\n
		///          On automatic sorting the items are sorted like in Windows Explorer; shell items are
		///          inserted in front of other items.
		///
		/// \sa Count, Remove, RemoveAll, IShListViewNamespace::FullyQualifiedPIDL, INamespaceEnumSettings,
		///     IShListView::DefaultNamespaceEnumSettings, IShListView::DefaultManagedItemProperties,
		///     IShListViewNamespace::AutoSortItems, AutoSortItemsConstants
		[id(DISPID_SHLVNSS_ADD), helpstring("Adds a new shell namespace to the listview control.")]
		HRESULT Add([in] VARIANT pIDLOrParsingName, [in, defaultvalue(-1)] LONG insertAt, [in, defaultvalue(NULL)] INamespaceEnumSettings* enumerationSettings, [in, defaultvalue(asiAutoSortOnce)] AutoSortItemsConstants AutoSortItems, [out, retval] IShListViewNamespace** ppAddedNamespace);
		/// \brief <em>Retrieves whether the specified namespace is part of the namespace collection</em>
		///
		/// \param[in] namespaceIdentifier A value that identifies the namespace to be checked.
		/// \param[in] namespaceIdentifierType A value specifying the meaning of \c namespaceIdentifier. Any of
		///            the values defined by the \c ShLvwNamespaceIdentifierTypeConstants enumeration is valid.
		///
		/// \return \c True, if the specified namespace is part of the collection; otherwise \c False.
		///
		/// \sa Add, Remove, ShLvwNamespaceIdentifierTypeConstants
		[id(DISPID_SHLVNSS_CONTAINS), helpstring("Retrieves whether the specified namespace is part of the namespace collection.")]
		HRESULT Contains([in] VARIANT namespaceIdentifier, [in, defaultvalue(slnsitExactPIDL)] ShLvwNamespaceIdentifierTypeConstants namespaceIdentifierType, [out, retval] VARIANT_BOOL* pValue);
		/// \brief <em>Counts the namespaces in the collection</em>
		///
		/// Retrieves the number of \c ShellListViewNamespace objects in the collection.
		///
		/// \return The number of elements in the collection.
		///
		/// \sa Add, Remove, RemoveAll
		[id(DISPID_SHLVNSS_COUNT), helpstring("Retrieves the number of 'ShellListViewNamespace' objects in the collection.")]
		HRESULT Count([out, retval] LONG* pValue);
		/// \brief <em>Removes the specified namespace from the collection</em>
		///
		/// \param[in] namespaceIdentifier A value that identifies the namespace to be removed.
		/// \param[in] namespaceIdentifierType A value specifying the meaning of \c namespaceIdentifier. Any of
		///            the values defined by the \c ShLvwNamespaceIdentifierTypeConstants enumeration is valid.
		/// \param[in] removeFromListView If \c True, the items are removed from the listview control, too;
		///            otherwise they become normal listview items.
		///
		/// \sa Add, Count, RemoveAll, Contains, ShTvwNamespaceIdentifierTypeConstants
		[id(DISPID_SHLVNSS_REMOVE), helpstring("Removes the specified namespace from the collection.")]
		HRESULT Remove([in] VARIANT namespaceIdentifier, [in, defaultvalue(slnsitExactPIDL)] ShLvwNamespaceIdentifierTypeConstants namespaceIdentifierType, [in, defaultvalue(-1)] VARIANT_BOOL removeFromListView);
		/// \brief <em>Removes all namespaces from the collection</em>
		///
		/// \param[in] removeFromListView If \c True, the items are removed from the listview control, too;
		///            otherwise they become normal listview items.
		///
		/// \sa Add, Count, Remove
		[id(DISPID_SHLVNSS_REMOVEALL), helpstring("Removes all namespaces from the collection.")]
		HRESULT RemoveAll([in, defaultvalue(-1)] VARIANT_BOOL removeFromListView);
	}


	/// \interface _IShListViewNamespacesEvents
	/// \brief <em>The \c ShellListViewNamespaces class' events interface</em>
	///
	/// This interface defines all events the \c ShellListViewNamespaces class may raise.
	///
	/// \sa IShListViewNamespaces
	[
		uuid(19CA4AFB-DB6D-421b-B76A-82E271F007EC),
		helpstring("IShListViewNamespaces-event-interface")
	]
	dispinterface _IShListViewNamespacesEvents
	{
		properties:
		methods:
	};


	/// \brief <em>The \c ShellListViewNamespaces class</em>
	///
	/// This COM class implements the \c IShListViewNamespaces and \c _IShListViewNamespacesEvents
	/// interfaces.
	///
	/// \sa IShListViewNamespaces, _IShListViewNamespacesEvents, ShellListView, ShellListViewNamespace
	[
		uuid(2820EFAA-EC9E-4eb5-B675-867AA545651B),
		version(1.5),
		noncreatable,
		helpstring("ShellListViewNamespaces Class 1.5 (Unicode)")
	]
	coclass ShellListViewNamespaces
	{
		[default] interface IShListViewNamespaces;
		[default, source] dispinterface _IShListViewNamespacesEvents;
	};


	/// \interface IShListView
	/// \brief <em>The main interface (shell listview)</em>
	///
	/// This is the shell listview control's main interface.
	///
	/// \sa _IShListViewEvents, IShTreeView
	[
		object,
		uuid(7C0691C0-24C1-4cff-9492-53AA6AF7D79C),
		dual,
		nonextensible,
		helpstring("IShListView interface"),
		pointer_default(unique)
	]
	interface IShListView : IDispatch
	{
		/// \if PRIVATEDOC
		///   \brief <em>Retrieves the control's application ID</em>
		///
		///   Retrieves the control's application ID. This property is part of the fingerprint that
		///   uniquely identifies each software written by Timo "TimoSoft" Kunze.
		///
		///   \remarks This property is hidden and read-only.
		///
		///   \sa AppName, AppShortName, Build, CharSet, IsRelease, Programmer, Tester
		/// \endif
		[propget, id(DISPID_SHLVW_APPID), hidden]
		HRESULT AppID([out, retval] SHORT* pValue);
		/// \if PRIVATEDOC
		///   \brief <em>Retrieves the control's application name</em>
		///
		///   Retrieves the control's application name. This property is part of the fingerprint that
		///   uniquely identifies each software written by Timo "TimoSoft" Kunze.
		///
		///   \remarks This property is hidden and read-only.
		///
		///   \sa AppID, AppShortName, Build, CharSet, IsRelease, Programmer, Tester
		/// \endif
		[propget, id(DISPID_SHLVW_APPNAME), hidden]
		HRESULT AppName([out, retval] BSTR* pValue);
		/// \if PRIVATEDOC
		///   \brief <em>Retrieves the control's short application name</em>
		///
		///   Retrieves the control's short application name. This property is part of the fingerprint
		///   that uniquely identifies each software written by Timo "TimoSoft" Kunze.
		///
		///   \remarks This property is hidden and read-only.
		///
		///   \sa AppID, AppName, Build, CharSet, IsRelease, Programmer, Tester
		/// \endif
		[propget, id(DISPID_SHLVW_APPSHORTNAME), hidden]
		HRESULT AppShortName([out, retval] BSTR* pValue);
		/// \brief <em>Specifies whether label-edit mode is entered automatically for items that have been created through the shell new context menu</em>
		///
		/// If the control detects the creation of a new shell item, it can check how this item has been
		/// created. If the item has been created by selecting a menu item from the <em>New</em> sub menu of a
		/// namespace's background shell context menu, you may want to enter label-edit mode for the new item
		/// so the user can rename it immediately. This property retrieves or sets whether the control enters
		/// label-edit mode automatically in the described situation.\n
		/// If set to \c True, it enters label-edit mode automatically; otherwise not.
		///
		/// \remarks This feature won't work if the \c ProcessShellNotifications property is set to \c False.
		///
		/// \sa ProcessShellNotifications
		[propget, id(DISPID_SHLVW_AUTOEDITNEWITEMS), helpstring("Retrieves or sets whether label-edit mode is entered automatically for items that have been created through the shell new context menu.")]
		HRESULT AutoEditNewItems([out, retval] VARIANT_BOOL* pValue);
		[propput, id(DISPID_SHLVW_AUTOEDITNEWITEMS), helpstring("Retrieves or sets whether label-edit mode is entered automatically for items that have been created through the shell new context menu.")]
		HRESULT AutoEditNewItems([in] VARIANT_BOOL newValue);
		/// \brief <em>Specifies whether the control inserts the 1st defined shell namespace's columns automatically into the attached listview control</em>
		///
		/// \c ShellListView can setup the columns for details and tile view automatically. If this property is
		/// set to \c True, the columns are inserted automatically; otherwise not. If the columns are inserted
		/// automatically, the columns of the first defined shell namespace are used.
		///
		/// \sa Namespaces, PersistColumnSettingsAcrossNamespaces
		[propget, id(DISPID_SHLVW_AUTOINSERTCOLUMNS), helpstring("Retrieves or sets whether columns are inserted automatically. The columns of the first specified namespace are used.")]
		HRESULT AutoInsertColumns([out, retval] VARIANT_BOOL* pValue);
		[propput, id(DISPID_SHLVW_AUTOINSERTCOLUMNS), helpstring("Retrieves or sets whether columns are inserted automatically. The columns of the first specified namespace are used.")]
		HRESULT AutoInsertColumns([in] VARIANT_BOOL newValue);
		/// \if PRIVATEDOC
		///   \brief <em>Retrieves the control's build number</em>
		///
		///   Retrieves the control's build number. This property is part of the fingerprint
		///   that uniquely identifies each software written by Timo "TimoSoft" Kunze.
		///
		///   \remarks This property is hidden and read-only.
		///
		///   \sa Version, AppID, AppName, AppShortName, CharSet, IsRelease, Programmer, Tester
		/// \endif
		[propget, id(DISPID_SHLVW_BUILD), hidden]
		HRESULT Build([out, retval] LONG* pValue);
		/// \if PRIVATEDOC
		///   \brief <em>Retrieves the control's character set</em>
		///
		///   Retrieves the control's character set (Unicode or ANSI). This property is part of the
		///   fingerprint that uniquely identifies each software written by Timo "TimoSoft" Kunze.
		///
		///   \remarks This property is hidden and read-only.
		///
		///   \sa AppID, AppName, AppShortName, Build, IsRelease, Programmer, Tester
		/// \endif
		[propget, id(DISPID_SHLVW_CHARSET), hidden]
		HRESULT CharSet([out, retval] BSTR* pValue);
		/// \brief <em>Specifies whether compressed items are displayed in another color</em>
		///
		/// Retrieves or sets whether compressed items are displayed in another color. If set to \c True,
		/// compressed items are displayed in the system's color for compressed items; otherwise the normal
		/// text color is used.
		///
		/// \sa ColorEncryptedItems, IShListViewItem::ShellAttributes
		[propget, id(DISPID_SHLVW_COLORCOMPRESSEDITEMS), helpstring("Retrieves or sets whether compressed items are displayed in another color.")]
		HRESULT ColorCompressedItems([out, retval] VARIANT_BOOL* pValue);
		[propput, id(DISPID_SHLVW_COLORCOMPRESSEDITEMS), helpstring("Retrieves or sets whether compressed items are displayed in another color.")]
		HRESULT ColorCompressedItems([in] VARIANT_BOOL newValue);
		/// \brief <em>Specifies whether encrypted items are displayed in another color</em>
		///
		/// Retrieves or sets whether encrypted items are displayed in another color. If set to \c True,
		/// encrypted items are displayed in the system's color for encrypted items; otherwise the normal
		/// text color is used.
		///
		/// \sa ColorCompressedItems, IShListViewItem::ShellAttributes
		[propget, id(DISPID_SHLVW_COLORENCRYPTEDITEMS), helpstring("Retrieves or sets whether encrypted items are displayed in another color.")]
		HRESULT ColorEncryptedItems([out, retval] VARIANT_BOOL* pValue);
		[propput, id(DISPID_SHLVW_COLORENCRYPTEDITEMS), helpstring("Retrieves or sets whether encrypted items are displayed in another color.")]
		HRESULT ColorEncryptedItems([in] VARIANT_BOOL newValue);
		/// \brief <em>Controls when the \c ColumnEnumerationTimedOut event is fired</em>
		///
		/// Retrieves or sets the number of milliseconds the enumeration of a namespace's columns may take
		/// before the \c ColumnEnumerationTimedOut event is fired. The value must be 1000 or greater. If this
		/// property is set to -1, the event isn't fired.
		///
		/// \sa ItemEnumerationTimeout, Columns, _IShListViewEvents::ColumnEnumerationTimedOut
		[propget, id(DISPID_SHLVW_COLUMNENUMERATIONTIMEOUT), helpstring("Retrieves or sets the number of milliseconds the enumeration of a namespace's columns may take before the 'ColumnEnumerationTimedOut' event is fired.")]
		HRESULT ColumnEnumerationTimeout([out, retval] LONG* pValue);
		[propput, id(DISPID_SHLVW_COLUMNENUMERATIONTIMEOUT), helpstring("Retrieves or sets the number of milliseconds the enumeration of a namespace's columns may take before the 'ColumnEnumerationTimedOut' event is fired.")]
		HRESULT ColumnEnumerationTimeout([in] LONG newValue);
		/// \brief <em>Retrieves the attached listview control's shell columns</em>
		///
		/// Retrieves a collection object wrapping the listview control's shell columns.
		///
		/// \remarks This property is read-only.
		///
		/// \sa ColumnEnumerationTimeout, EnsureShellColumnsAreLoaded, ListItems, Namespaces,
		///     PersistColumnSettingsAcrossNamespaces, IShListViewColumns
		[propget, id(DISPID_SHLVW_COLUMNS), helpstring("Retrieves a collection object wrapping the attached listview control's shell columns."), nonbrowsable]
		HRESULT Columns([out, retval] IShListViewColumns** ppColumns);
		/// \brief <em>Specifies which of the listview items' properties by default are managed by the \c ShellListView control</em>
		///
		/// Retrieves or sets a bit field specifying which of the listview items' properties by default are
		/// managed by the \c ShellListView control rather than the treeview control/your application. Any
		/// combination of the values defined by the \c ShLvwManagedItemPropertiesConstants enumeration is
		/// valid.
		///
		/// \remarks The default settings are used for items that are inserted as part of a namespace or in
		///          response to shell notifications. Changing this property doesn't affect items that already
		///          have been inserted into the listview.
		///
		/// \sa ProcessShellNotifications, IShListViewItem::ManagedProperties,
		///     IShListViewNamespaces::Add, ShLvwManagedItemPropertiesConstants
		[propget, id(DISPID_SHLVW_DEFAULTMANAGEDITEMPROPERTIES), helpstring("Retrieves or sets which of the listview items' properties by default are managed by the ShellListView control."), nonbrowsable]
		HRESULT DefaultManagedItemProperties([out, retval] ShLvwManagedItemPropertiesConstants* pValue);
		[propput, id(DISPID_SHLVW_DEFAULTMANAGEDITEMPROPERTIES), helpstring("Retrieves or sets which of the listview items' properties by default are managed by the ShellListView control."), nonbrowsable]
		HRESULT DefaultManagedItemProperties([in] ShLvwManagedItemPropertiesConstants newValue);
		/// \brief <em>Specifies the control's default namespace enumeration settings</em>
		///
		/// Retrieves or sets the control's default namespace enumeration settings.
		///
		/// \sa INamespaceEnumSettings, IShListViewItem::NamespaceEnumSettings,
		///     IShListViewNamespace::NamespaceEnumSettings
		[propget, id(DISPID_SHLVW_DEFAULTNAMESPACEENUMSETTINGS), helpstring("Retrieves or sets the control's default namespace enumeration settings.")]
		HRESULT DefaultNamespaceEnumSettings([out, retval] INamespaceEnumSettings** ppEnumSettings);
		[propputref, id(DISPID_SHLVW_DEFAULTNAMESPACEENUMSETTINGS), helpstring("Retrieves or sets the control's default namespace enumeration settings.")]
		HRESULT DefaultNamespaceEnumSettings([in] INamespaceEnumSettings* pEnumSettings);
		/// \brief <em>Controls which events are fired</em>
		///
		/// Retrieves or sets the events that won't be fired. Disabling events increases performance.
		/// Any combination of the values defined by the \c DisabledEventsConstants enumeration is valid.
		///
		/// \sa DisabledEventsConstants
		[propget, id(DISPID_SHLVW_DISABLEDEVENTS), helpstring("Retrieves or sets the events that won't be fired. Disabling events increases performance."), nonbrowsable]
		HRESULT DisabledEvents([out, retval] DisabledEventsConstants* pValue);
		[propput, id(DISPID_SHLVW_DISABLEDEVENTS), helpstring("Retrieves or sets the events that won't be fired. Disabling events increases performance."), nonbrowsable]
		HRESULT DisabledEvents([in] DisabledEventsConstants newValue);
		/// \brief <em>Controls the overlays displayed in thumbnail mode</em>
		///
		/// Retrieves or sets whether the elevation shield is displayed as overlay image, if the item requires
		/// elevation. If set to \c True, the elevation shield is displayed; otherwise not.
		///
		/// \remarks Requires Windows Vista or newer.\n
		///          If the item has a thumbnail image and requires elevation, the executable's icon is
		///          displayed, ignoring the setting of the \c DisplayFileTypeOverlays property.
		///
		/// \sa DisplayThumbnails, DisplayThumbnailAdornments, IShListViewItem::RequiresElevation,
		///     DisplayFileTypeOverlays
		[propget, id(DISPID_SHLVW_DISPLAYELEVATIONSHIELDOVERLAYS), helpstring("Retrieves or sets whether the elevation shield is displayed as overlay image, if the item requires elevation. If the item has a thumbnail image and requires elevation, the executable's icon is displayed.")]
		HRESULT DisplayElevationShieldOverlays([out, retval] VARIANT_BOOL* pValue);
		[propput, id(DISPID_SHLVW_DISPLAYELEVATIONSHIELDOVERLAYS), helpstring("Retrieves or sets whether the elevation shield is displayed as overlay image, if the item requires elevation. If the item has a thumbnail image and requires elevation, the executable's icon is displayed.")]
		HRESULT DisplayElevationShieldOverlays([in] VARIANT_BOOL newValue);
		/// \brief <em>Controls the overlays displayed in thumbnail mode</em>
		///
		/// Retrieves or sets which kind of image is drawn over the thumbnail's bottom-right corner in
		/// thumbnail mode. Any of the values defined by the \c ShLvwDisplayFileTypeOverlaysConstants
		/// enumeration is valid.
		///
		/// \remarks Those overlays are displayed only for items that have a thumbnail image.
		///
		/// \sa DisplayThumbnails, DisplayThumbnailAdornments, DisplayElevationShieldOverlays,
		///     ShLvwDisplayFileTypeOverlaysConstants
		[propget, id(DISPID_SHLVW_DISPLAYFILETYPEOVERLAYS), helpstring("Retrieves or sets which kind of image is drawn over the thumbnail's bottom-right corner in thumbnail mode. Those overlays are displayed only for items that have a thumbnail image.")]
		HRESULT DisplayFileTypeOverlays([out, retval] ShLvwDisplayFileTypeOverlaysConstants* pValue);
		[propput, id(DISPID_SHLVW_DISPLAYFILETYPEOVERLAYS), helpstring("Retrieves or sets which kind of image is drawn over the thumbnail's bottom-right corner in thumbnail mode. Those overlays are displayed only for items that have a thumbnail image.")]
		HRESULT DisplayFileTypeOverlays([in] ShLvwDisplayFileTypeOverlaysConstants newValue);
		/// \brief <em>Controls how thumbnails are adorned</em>
		///
		/// Retrieves or sets which adornments are drawn to improve the visual appearance of thumbnail images.
		/// Any combination of the values defined by the \c ShLvwDisplayThumbnailAdornmentsConstants
		/// enumeration is valid.
		///
		/// \sa DisplayThumbnails, DisplayFileTypeOverlays, DisplayElevationShieldOverlays,
		///     ShLvwDisplayThumbnailAdornmentsConstants
		[propget, id(DISPID_SHLVW_DISPLAYTHUMBNAILADORNMENTS), helpstring("Retrieves or sets which adornments are drawn to improve the visual appearance of thumbnail images, e. g. thumbnails of video files can be drawn with a sprocket border."), nonbrowsable]
		HRESULT DisplayThumbnailAdornments([out, retval] ShLvwDisplayThumbnailAdornmentsConstants* pValue);
		[propput, id(DISPID_SHLVW_DISPLAYTHUMBNAILADORNMENTS), helpstring("Retrieves or sets which adornments are drawn to improve the visual appearance of thumbnail images, e. g. thumbnails of video files can be drawn with a sprocket border."), nonbrowsable]
		HRESULT DisplayThumbnailAdornments([in] ShLvwDisplayThumbnailAdornmentsConstants newValue);
		/// \brief <em>Controls which kind of icons are displayed</em>
		///
		/// Retrieves or sets whether thumbnail images instead of normal icons are displayed. If set to
		/// \c True, thumbnail images, otherwise normal icons are displayed.
		///
		/// \sa ThumbnailSize, UseThumbnailDiskCache, DisplayThumbnailAdornments, DisplayFileTypeOverlays,
		///     DisplayElevationShieldOverlays
		[propget, id(DISPID_SHLVW_DISPLAYTHUMBNAILS), helpstring("Retrieves or sets whether thumbnail images instead of normal icons are displayed.")]
		HRESULT DisplayThumbnails([out, retval] VARIANT_BOOL* pValue);
		[propput, id(DISPID_SHLVW_DISPLAYTHUMBNAILS), helpstring("Retrieves or sets whether thumbnail images instead of normal icons are displayed.")]
		HRESULT DisplayThumbnails([in] VARIANT_BOOL newValue);
		/// \brief <em>Specifies which parts of OLE drag'n'drop are handled automatically by the control</em>
		///
		/// Retrieves or sets which parts of OLE drag'n'drop are handled automatically. Any combination of the
		/// values defined by the \c HandleOLEDragDropConstants enumeration is valid.
		///
		/// \sa HandleOLEDragDropConstants
		[propget, id(DISPID_SHLVW_HANDLEOLEDRAGDROP), helpstring("Retrieves or sets which parts of OLE drag'n'drop are handled automatically.")]
		HRESULT HandleOLEDragDrop([out, retval] HandleOLEDragDropConstants* pValue);
		[propput, id(DISPID_SHLVW_HANDLEOLEDRAGDROP), helpstring("Retrieves or sets which parts of OLE drag'n'drop are handled automatically.")]
		HRESULT HandleOLEDragDrop([in] HandleOLEDragDropConstants newValue);
		/// \brief <em>Specifies how hidden items are displayed</em>
		///
		/// Retrieves or sets the display style of hidden shell items. Any of the values defined by the
		/// \c HiddenItemsStyleConstants enumeration is valid.
		///
		/// \remarks Setting this property to \c hisGhostedOnDemand increases performance, but the
		///          \c IListViewItem::Ghosted property always returns the <em>current</em> state which isn't
		///          necessarily correct until the item is initially drawn.\n
		///          Changing this property won't update existing shell items.
		///
		/// \sa HiddenItemsStyleConstants
		[propget, id(DISPID_SHLVW_HIDDENITEMSSTYLE), helpstring("Retrieves or sets the display style of hidden shell items.")]
		HRESULT HiddenItemsStyle([out, retval] HiddenItemsStyleConstants* pValue);
		[propput, id(DISPID_SHLVW_HIDDENITEMSSTYLE), helpstring("Retrieves or sets the display style of hidden shell items.")]
		HRESULT HiddenItemsStyle([in] HiddenItemsStyleConstants newValue);
		/// \brief <em>Specifies one of the control's associated image list</em>
		///
		/// Retrieves or sets the handle of the specified image list.
		///
		/// \param[in] imageList The image list to retrieve or set. Any of the values defined by the
		///            \c ImageListConstants enumeration is valid.
		///
		/// \remarks The previously set image list does NOT get destroyed automatically.
		///
		/// \sa UseSystemImageList, ImageListConstants
		[propget, id(DISPID_SHLVW_HIMAGELIST), helpstring("Retrieves or sets the handle to the specified image list."), nonbrowsable]
		HRESULT hImageList([in] ImageListConstants imageList, [out, retval] OLE_HANDLE* pValue);
		[propput, id(DISPID_SHLVW_HIMAGELIST), helpstring("Retrieves or sets the handle to the specified image list."), nonbrowsable]
		HRESULT hImageList([in] ImageListConstants imageList, [in] OLE_HANDLE newValue);
		/// \brief <em>Retrieves the associated listview's window handle</em>
		///
		/// Retrieves the handle of the \c SysListView32 window that the object is currently attached to.
		///
		/// \remarks This property is read-only.
		///
		/// \sa hWndShellUIParentWindow, Attach, Detach
		[propget, id(DISPID_SHLVW_HWND), helpstring("Retrieves the handle of the 'SysListView32' window that the object is currently attached to."), nonbrowsable]
		HRESULT hWnd([out, retval] OLE_HANDLE* pValue);
		/// \brief <em>Specifies the parent window of any UI displayed by the shell</em>
		///
		/// Retrieves or sets the handle of the window that is used as parent window for any UI that the
		/// shell may display.
		///
		/// \remarks If this property is set to 0, many UI isn't displayed at all.
		///
		/// \sa hWnd
		[propget, id(DISPID_SHLVW_HWNDSHELLUIPARENTWINDOW), helpstring("Retrieves or sets the handle of the window that is used as parent window for any UI that the shell may display."), nonbrowsable]
		HRESULT hWndShellUIParentWindow([out, retval] OLE_HANDLE* pValue);
		[propput, id(DISPID_SHLVW_HWNDSHELLUIPARENTWINDOW), helpstring("Retrieves or sets the handle of the window that is used as parent window for any UI that the shell may display."), nonbrowsable]
		HRESULT hWndShellUIParentWindow([in] OLE_HANDLE newValue);
		/// \brief <em>Customizes the listview items' info tips managed by the \c ShellListView control</em>
		///
		/// Retrieves or sets a bit field influencing the listview items' info tips if they are managed by the
		/// \c ShellListView control. Any combination of the values defined by the \c InfoTipFlagsConstants
		/// enumeration is valid.
		///
		/// \sa IShListViewItem::ManagedProperties, IShListViewItem::InfoTipText, InfoTipFlagsConstants
		[propget, id(DISPID_SHLVW_INFOTIPFLAGS), helpstring("Retrieves or sets a bit field influencing the listview items info tips if they are managed by the ShellListView control."), nonbrowsable]
		HRESULT InfoTipFlags([out, retval] InfoTipFlagsConstants* pValue);
		[propput, id(DISPID_SHLVW_INFOTIPFLAGS), helpstring("Retrieves or sets a bit field influencing the listview items info tips if they are managed by the ShellListView control."), nonbrowsable]
		HRESULT InfoTipFlags([in] InfoTipFlagsConstants newValue);
		/// \brief <em>Specifies the initial sort order</em>
		///
		/// Retrieves or sets the sort order initially used when loading a new shell namespace. Any of the
		/// values defined by the \c SortOrderConstants enumeration is valid.
		///
		/// \sa SortItems, SortOrderConstants
		[propget, id(DISPID_SHLVW_INITIALSORTORDER), helpstring("Retrieves or sets the sort order initially used when loading a new shell namespace.")]
		HRESULT InitialSortOrder([out, retval] SortOrderConstants* pValue);
		[propput, id(DISPID_SHLVW_INITIALSORTORDER), helpstring("Retrieves or sets the sort order initially used when loading a new shell namespace.")]
		HRESULT InitialSortOrder([in] SortOrderConstants newValue);
		/// \if PRIVATEDOC
		///   \brief <em>Retrieves the control's release type</em>
		///
		///   Retrieves the control's release type. This property is part of the fingerprint
		///   that uniquely identifies each software written by Timo "TimoSoft" Kunze. If set to
		///   \c True, the control was compiled for release; otherwise it was compiled for debugging.
		///
		///   \remarks This property is hidden and read-only.
		///
		///   \sa AppID, AppName, AppShortName, Build, CharSet, Programmer, Tester
		/// \endif
		[propget, id(DISPID_SHLVW_ISRELEASE), hidden]
		HRESULT IsRelease([out, retval] VARIANT_BOOL* pValue);
		/// \brief <em>Controls when the \c ItemEnumerationTimedOut event is fired</em>
		///
		/// Retrieves or sets the number of milliseconds the enumeration of a namespace's items may take before
		/// the \c ItemEnumerationTimedOut event is fired. The value must be 1000 or greater. If this property
		/// is set to -1, the event isn't fired.
		///
		/// \sa ColumnEnumerationTimeout, _IShListViewEvents::ItemEnumerationTimedOut
		[propget, id(DISPID_SHLVW_ITEMENUMERATIONTIMEOUT), helpstring("Retrieves or sets the number of milliseconds the enumeration of a namespace's items may take before the 'ItemEnumerationTimedOut' event is fired.")]
		HRESULT ItemEnumerationTimeout([out, retval] LONG* pValue);
		[propput, id(DISPID_SHLVW_ITEMENUMERATIONTIMEOUT), helpstring("Retrieves or sets the number of milliseconds the enumeration of a namespace's items may take before the 'ItemEnumerationTimedOut' event is fired.")]
		HRESULT ItemEnumerationTimeout([in] LONG newValue);
		/// \brief <em>Controls the order of the different kinds of items when sorting</em>
		///
		/// Retrieves or sets the order of the different kinds of items (shell items, normal items) within the
		/// attached listview control. This order is applied when sorting items. Any of the values defined by
		/// the \c ItemTypeSortOrderConstants enumeration is valid.
		///
		/// \sa IShListViewNamespace::AutoSortItems, SortItems, ItemTypeSortOrderConstants
		[propget, id(DISPID_SHLVW_ITEMTYPESORTORDER), helpstring("Retrieves or sets the order of the different kinds of items (shell items, normal items) within the attached listview control.")]
		HRESULT ItemTypeSortOrder([out, retval] ItemTypeSortOrderConstants* pValue);
		[propput, id(DISPID_SHLVW_ITEMTYPESORTORDER), helpstring("Retrieves or sets the order of the different kinds of items (shell items, normal items) within the attached listview control.")]
		HRESULT ItemTypeSortOrder([in] ItemTypeSortOrderConstants newValue);
		/// \brief <em>Specifies whether the keyboard input is validated during input when renaming an item</em>
		///
		/// Retrieves or sets whether characters, that are not allowed in the affected shell item's name, are
		/// recognized and declined at input time. If set to \c True, invalid characters are declined
		/// immediately and an info tip is displayed explaining that the character was invalid. If set to
		/// \c False, no characters are declined, but later the actual renaming will fail and an error message
		/// will be displayed.
		///
		/// \sa IShListViewItem::ManagedProperties, PreselectBasenameOnLabelEdit
		[propget, id(DISPID_SHLVW_LIMITLABELEDITINPUT), helpstring("Retrieves or sets whether characters, that are not allowed in the affected shell item's name, are recognized and declined at input time.")]
		HRESULT LimitLabelEditInput([out, retval] VARIANT_BOOL* pValue);
		[propput, id(DISPID_SHLVW_LIMITLABELEDITINPUT), helpstring("Retrieves or sets whether characters, that are not allowed in the affected shell item's name, are recognized and declined at input time.")]
		HRESULT LimitLabelEditInput([in] VARIANT_BOOL newValue);
		/// \brief <em>Retrieves the attached listview control's shell items</em>
		///
		/// Retrieves a collection object wrapping the listview control's shell items.
		///
		/// \remarks This property is read-only.
		///
		/// \sa Namespaces, Columns, IShListViewItems
		[propget, id(DISPID_SHLVW_LISTITEMS), helpstring("Retrieves a collection object wrapping the attached listview control's shell items."), nonbrowsable]
		HRESULT ListItems([out, retval] IShListViewItems** ppItems);
		/// \brief <em>Specifies whether overlay icons are loaded on demand</em>
		///
		/// Retrieves or sets whether an item's overlay icon is loaded on demand or when adding the item. If
		/// this property is set to \c True, the overlay icon is loaded when it is needed; otherwise it is
		/// loaded when the item is added.
		///
		/// \remarks Loading overlay icons on demand is faster, but the \c IListViewItem::OverlayIndex property
		///          always returns the <em>current</em> overlay icon index which isn't necessarily correct until
		///          the item is initially drawn.\n
		///          Changing this property won't update existing shell items.
		///
		/// \sa IShListViewItem::ManagedProperties
		[propget, id(DISPID_SHLVW_LOADOVERLAYSONDEMAND), helpstring("Retrieves or sets whether an item's overlay icon is loaded on demand or when adding the item.")]
		HRESULT LoadOverlaysOnDemand([out, retval] VARIANT_BOOL* pValue);
		[propput, id(DISPID_SHLVW_LOADOVERLAYSONDEMAND), helpstring("Retrieves or sets whether an item's overlay icon is loaded on demand or when adding the item.")]
		HRESULT LoadOverlaysOnDemand([in] VARIANT_BOOL newValue);
		/// \brief <em>Retrieves the shell namespaces managed by this control</em>
		///
		/// Retrieves a collection object wrapping the shell namespaces managed by this control.
		///
		/// \remarks This property is read-only.
		///
		/// \sa ListItems, Columns, IShListViewNamespaces
		[propget, id(DISPID_SHLVW_NAMESPACES), helpstring("Retrieves a collection object wrapping the shell namespaces managed by this control."), nonbrowsable]
		HRESULT Namespaces([out, retval] IShListViewNamespaces** ppNamespaces);
		/// \brief <em>Specifies whether the control selects the file name only when label-editing files</em>
		///
		/// Retrieves or sets whether the control selects the file name only when label-editing files. If set
		/// to \c True, the label-edit control contains the whole file name including the file extension, but
		/// only the base name without the extension is selected. If set to \c False, the whole file name
		/// including the file extension is selected.
		///
		/// \sa IShListViewItem::ManagedProperties, LimitLabelEditInput
		[propget, id(DISPID_SHLVW_PRESELECTBASENAMEONLABELEDIT), helpstring("Retrieves or sets whether the control selects the file name only when label-editing files.")]
		HRESULT PreselectBasenameOnLabelEdit([out, retval] VARIANT_BOOL* pValue);
		[propput, id(DISPID_SHLVW_PRESELECTBASENAMEONLABELEDIT), helpstring("Retrieves or sets whether the control selects the file name only when label-editing files.")]
		HRESULT PreselectBasenameOnLabelEdit([in] VARIANT_BOOL newValue);
		/// \brief <em>Specifies whether the control updates the shell items automatically</em>
		///
		/// Retrieves or sets whether the control checks for shell notifications and updates the shell items
		/// automatically on file deletions and similar actions. If set to \c True, shell notifications are
		/// processed; otherwise not.
		///
		/// \sa _IShListViewEvents::ChangedItemPIDL, _IShListViewEvents::ChangedNamespacePIDL
		[propget, id(DISPID_SHLVW_PROCESSSHELLNOTIFICATIONS), helpstring("Specifies whether the control updates the shell items automatically.")]
		HRESULT ProcessShellNotifications([out, retval] VARIANT_BOOL* pValue);
		[propput, id(DISPID_SHLVW_PROCESSSHELLNOTIFICATIONS), helpstring("Specifies whether the control updates the shell items automatically.")]
		HRESULT ProcessShellNotifications([in] VARIANT_BOOL newValue);
		/// \if PRIVATEDOC
		///   \brief <em>Retrieves the name(s) of the control's programmer(s)</em>
		///
		///   Retrieves the name(s) of the control's programmer(s). This property is part of the
		///   fingerprint that uniquely identifies each software written by Timo "TimoSoft" Kunze.
		///
		///   \remarks This property is hidden and read-only.
		///
		///   \sa AppID, AppName, AppShortName, Build, CharSet, IsRelease, Tester
		/// \endif
		[propget, id(DISPID_SHLVW_PROGRAMMER), hidden]
		HRESULT Programmer([out, retval] BSTR* pValue);
		/// \brief <em>Specifies whether the control selects the column, by which the items are sorted, automatically</em>
		///
		/// Retrieves or sets whether the control selects the column, by which the items are sorted,
		/// automatically. If set to \c True, the column by which the control is sorted, is set as the attached
		/// control's selected column automatically; otherwise not.
		///
		/// \remarks To make this feature work, the \c SortItems method must be used for sorting.\n
		///          Requires comctl32.dll version 6.0 or higher.
		///
		/// \sa SetSortArrows, SortItems, SortOnHeaderClick
		[propget, id(DISPID_SHLVW_SELECTSORTCOLUMN), helpstring("Retrieves or sets whether the control selects the column, by which the items are sorted, automatically. To make this feature work, the 'SortItems' method must be used for sorting. Requires comctl32.dll version 6.0 or higher.")]
		HRESULT SelectSortColumn([out, retval] VARIANT_BOOL* pValue);
		[propput, id(DISPID_SHLVW_SELECTSORTCOLUMN), helpstring("Retrieves or sets whether the control selects the column, by which the items are sorted, automatically. To make this feature work, the 'SortItems' method must be used for sorting. Requires comctl32.dll version 6.0 or higher.")]
		HRESULT SelectSortColumn([in] VARIANT_BOOL newValue);
		/// \brief <em>Specifies whether the control sets sort arrows automatically</em>
		///
		/// Retrieves or sets whether the control sets the sort arrows, that indicate by which column and in
		/// which direction the items are sorted, automatically. If set to \c True, sort arrows are set
		/// automatically; otherwise not.
		///
		/// \remarks To make this feature work, the \c SortItems method must be used for sorting.
		///
		/// \sa SelectSortColumn, SortItems, SortOnHeaderClick
		[propget, id(DISPID_SHLVW_SETSORTARROWS), helpstring("Retrieves or sets whether the control sets the sort arrows, that indicate by which column and in which direction the items are sorted, automatically. To make this feature work, the 'SortItems' method must be used for sorting.")]
		HRESULT SetSortArrows([out, retval] VARIANT_BOOL* pValue);
		[propput, id(DISPID_SHLVW_SETSORTARROWS), helpstring("Retrieves or sets whether the control sets the sort arrows, that indicate by which column and in which direction the items are sorted, automatically. To make this feature work, the 'SortItems' method must be used for sorting.")]
		HRESULT SetSortArrows([in] VARIANT_BOOL newValue);
		/// \brief <em>Retrieves the zero-based index of the shell column by which the attached listview control is currently sorted</em>
		///
		/// Retrieves the zero-based index of the shell column by which the attached listview control is
		/// currently sorted. If the control is sorted by a custom column instead of a shell column, this
		/// property is -1.
		///
		/// \remarks This property is read-only.
		///
		/// \sa SortItems, IShListViewNamespace::AutoSortItems, IShListViewNamespace::DefaultSortColumnIndex,
		///     _IShListViewEvents::ChangingSortColumn, _IShListViewEvents::ChangedSortColumn
		[propget, id(DISPID_SHLVW_SORTCOLUMNINDEX), helpstring("Retrieves the zero-based index of the shell column by which the attached listview control is currently sorted."), nonbrowsable]
		HRESULT SortColumnIndex([out, retval] LONG* pValue);
		/// \brief <em>Specifies whether the control updates the sort direction and column automatically if a column header is clicked</em>
		///
		/// Retrieves or sets whether the control updates the sort direction and column automatically if a
		/// column header is clicked. If set to \c True, the settings for item sorting are updated
		/// automatically if a column header is clicked; otherwise not.
		///
		/// \sa SortItems, SelectSortColumn, SetSortArrows
		[propget, id(DISPID_SHLVW_SORTONHEADERCLICK), helpstring("Retrieves or sets whether the control updates the sort direction and column automatically if a column header is clicked.")]
		HRESULT SortOnHeaderClick([out, retval] VARIANT_BOOL* pValue);
		[propput, id(DISPID_SHLVW_SORTONHEADERCLICK), helpstring("Retrieves or sets whether the control updates the sort direction and column automatically if a column header is clicked.")]
		HRESULT SortOnHeaderClick([in] VARIANT_BOOL newValue);
		/// \if PRIVATEDOC
		///   \brief <em>Retrieves the name(s) of the control's tester(s)</em>
		///
		///   Retrieves the name(s) of the control's tester(s). This property is part of the
		///   fingerprint that uniquely identifies each software written by Timo "TimoSoft" Kunze.
		///
		///   \remarks This property is hidden and read-only.
		///
		///   \sa AppID, AppName, AppShortName, Build, CharSet, IsRelease, Programmer
		/// \endif
		[propget, id(DISPID_SHLVW_TESTER), hidden]
		HRESULT Tester([out, retval] BSTR* pValue);
		/// \brief <em>Specifies the size of thumbnail images</em>
		///
		/// Retrieves or sets the width and height in pixels of thumbnail images. If set to a negative value,
		/// the system's default setting is used according to the following list:
		/// - \c -1 The system's default thumbnail size is used.
		/// - \c -2 The size of images in the small system imagelist is used.
		/// - \c -3 The size of images in the large system imagelist is used.
		/// - \c -4 The size of images in the extra-large system imagelist is used.
		/// - \c -5 The size of images in the jumbo-size system imagelist is used.
		///
		/// \sa DisplayThumbnails
		[propget, id(DISPID_SHLVW_THUMBNAILSIZE), helpstring("Retrieves or sets the width and height in pixels of thumbnail images.")]
		HRESULT ThumbnailSize([out, retval] LONG* pValue);
		[propput, id(DISPID_SHLVW_THUMBNAILSIZE), helpstring("Retrieves or sets the width and height in pixels of thumbnail images.")]
		HRESULT ThumbnailSize([in] LONG newValue);
		/// \brief <em>Specifies whether the control follows the columns' \c Resizable property</em>
		///
		/// Retrieves or sets whether the control sets the column resizability according to the column's
		/// \c Resizable property when inserting a shell column into the attached \c ExplorerListView control.
		/// If set to \c True, the column resizability is set according to the columns' \c Resizable property;
		/// otherwise not.
		///
		/// \sa IShListViewColumn::Resizable
		[propget, id(DISPID_SHLVW_USECOLUMNRESIZABILITY), helpstring("Retrieves or sets whether the control sets the column resizability according to the column's 'Resizable' property when inserting a shell column into the attached 'ExplorerListView' control.")]
		HRESULT UseColumnResizability([out, retval] VARIANT_BOOL* pValue);
		[propput, id(DISPID_SHLVW_USECOLUMNRESIZABILITY), helpstring("Retrieves or sets whether the control sets the column resizability according to the column's 'Resizable' property when inserting a shell column into the attached 'ExplorerListView' control.")]
		HRESULT UseColumnResizability([in] VARIANT_BOOL newValue);
		/// \brief <em>Specifies whether the control skips time-consuming extra-checks when e. g. removing items</em>
		///
		/// Retrieves or sets whether the control skips time-consuming extra-checks when e. g. removing items.
		/// The control can do extra-checks to ensure, that it doesn't remove or modify items that shouldn't be
		/// removed or modified. These extra-checks are time-consuming and may lead to delays of several
		/// seconds when browsing from one namespace with many items to another one.\n
		/// If set to \c True, these extra-checks are skipped; otherwise not.
		///
		/// \remarks Setting this property to \c True may result in unwanted behavior. E. g. removing a
		///          namespace will result in <strong>any</strong> item being removed, not just those that
		///          belong to the removed namespace.
		///
		/// \sa Namespaces
		[propget, id(DISPID_SHLVW_USEFASTBUTIMPRECISEITEMHANDLING), helpstring("Retrieves or sets whether the control skips time-consuming extra-checks when e. g. removing items. See the helpfile for important notes.")]
		HRESULT UseFastButImpreciseItemHandling([out, retval] VARIANT_BOOL* pValue);
		[propput, id(DISPID_SHLVW_USEFASTBUTIMPRECISEITEMHANDLING), helpstring("Retrieves or sets whether the control skips time-consuming extra-checks when e. g. removing items. See the helpfile for important notes.")]
		HRESULT UseFastButImpreciseItemHandling([in] VARIANT_BOOL newValue);
		/// \brief <em>Specifies which kind of system icons are displayed</em>
		///
		/// Retrieves or sets when the control displays generic icons and when it displays item-specific icons.
		/// Any of the values defined by the \c UseGenericIconsConstants enumeration is valid.
		///
		/// \sa UseSystemImageList, UseGenericIconsConstants
		[propget, id(DISPID_SHLVW_USEGENERICICONS), helpstring("Retrieves or sets when the control displays generic icons and when it displays item-specific icons.")]
		HRESULT UseGenericIcons([out, retval] UseGenericIconsConstants* pValue);
		[propput, id(DISPID_SHLVW_USEGENERICICONS), helpstring("Retrieves or sets when the control displays generic icons and when it displays item-specific icons.")]
		HRESULT UseGenericIcons([in] UseGenericIconsConstants newValue);
		/// \brief <em>Specifies when the system imagelist is used</em>
		///
		/// Retrieves or sets a bit field indicating which of the attached listview's imagelists are set to the
		/// system imagelist. Any combination of the values defined by the \c UseSystemImageListConstants
		/// enumeration is valid.
		///
		/// \sa DisplayThumbnails, hImageList, UseGenericIcons, UseSystemImageListConstants
		[propget, id(DISPID_SHLVW_USESYSTEMIMAGELIST), helpstring("Retrieves or sets a bit field indicating which of the attached listview's imagelists are set to the system imagelist."), nonbrowsable]
		HRESULT UseSystemImageList([out, retval] UseSystemImageListConstants* pValue);
		[propput, id(DISPID_SHLVW_USESYSTEMIMAGELIST), helpstring("Retrieves or sets a bit field indicating which of the attached listview's imagelists are set to the system imagelist."), nonbrowsable]
		HRESULT UseSystemImageList([in] UseSystemImageListConstants newValue);
		/// \brief <em>Specifies whether the control extracts the text of sub-items in a background thread if the column is marked as being slow</em>
		///
		/// Retrieves or sets whether the control extracts the text of shell items' sub-items in a background
		/// thread if access to the shell column's content is flagged (by the shell) as being slow. If set to
		/// \c True, a background thread is used; otherwise not.
		///
		/// \sa Columns, IShListViewColumn::Slow
		[propget, id(DISPID_SHLVW_USETHREADINGFORSLOWCOLUMNS), helpstring("Specifies whether the control extracts the text of sub-items in a background thread if the column is marked as being slow.")]
		HRESULT UseThreadingForSlowColumns([out, retval] VARIANT_BOOL* pValue);
		[propput, id(DISPID_SHLVW_USETHREADINGFORSLOWCOLUMNS), helpstring("Specifies whether the control extracts the text of sub-items in a background thread if the column is marked as being slow.")]
		HRESULT UseThreadingForSlowColumns([in] VARIANT_BOOL newValue);
		/// \brief <em>Specifies whether the thumbnail disk cache is used to improve performance of thumbnail retrieval</em>
		///
		/// Retrieves or sets whether the thumbnail disk cache (Thumbs.db files) is used to improve the
		/// performance of thumbnail mode. If set to \c True, the disk cache is used; otherwise not.
		///
		/// \remarks The disk cache can be used only if the setting of the \c ThumbnailSize property matches
		///          the system setting for the size of thumbnails.\n
		///          Starting with Windows Vista, the disk cache is always used (for any thumbnail size).
		///
		/// \sa DisplayThumbnails, ThumbnailSize
		[propget, id(DISPID_SHLVW_USETHUMBNAILDISKCACHE), helpstring("Retrieves or sets whether the thumbnail disk cache (Thumbs.db files) is used to improve the performance of thumbnail mode. See the help file for important details.")]
		HRESULT UseThumbnailDiskCache([out, retval] VARIANT_BOOL* pValue);
		[propput, id(DISPID_SHLVW_USETHUMBNAILDISKCACHE), helpstring("Retrieves or sets whether the thumbnail disk cache (Thumbs.db files) is used to improve the performance of thumbnail mode. See the help file for important details.")]
		HRESULT UseThumbnailDiskCache([in] VARIANT_BOOL newValue);
		/// \brief <em>Retrieves the control's version</em>
		///
		/// \remarks This property is read-only.
		[propget, id(DISPID_SHLVW_VERSION), helpstring("Retrieves the control's version."), nonbrowsable]
		HRESULT Version([out, retval] BSTR* pValue);

		/// \brief <em>Displays the control's credits</em>
		///
		/// Displays some information about this control and its author.
		[id(DISPID_SHLVW_ABOUT), helpstring("Displays some information about this control and its author.")]
		HRESULT About(void);
		/// \brief <em>Attaches the object to the specified \c SysListView32 window</em>
		///
		/// \param[in] hWnd The \c SysListView32 window to attach to.
		///
		/// \sa Detach, hWnd
		[id(DISPID_SHLVW_ATTACH), helpstring("Attaches the object to the specified 'SysListView32' window.")]
		HRESULT Attach([in] OLE_HANDLE hWnd);
		/// \brief <em>Compares two shell items</em>
		///
		/// \param[in] firstItem The first shell item to compare.
		/// \param[in] secondItem The second shell item to compare.
		/// \param[in] sortColumnIndex The zero-based index of the shell column by which to compare. If set to
		///            -1, the default sort column of the first defined shell namespace is used.
		///
		/// \return A negative value if the first item should preceed the second item; a positive value if the
		///         second item should preceed the first item; otherwise 0.
		///
		/// \sa IShListViewNamespace::AutoSortItems, SortItems
		[id(DISPID_SHLVW_COMPAREITEMS), helpstring("Compares two shell items.")]
		HRESULT CompareItems([in] IShListViewItem* firstItem, [in] IShListViewItem* secondItem, [in, defaultvalue(-1)] LONG sortColumnIndex, [out, retval] LONG* pResult);
		/// \brief <em>Creates the default context menu for the header control</em>
		///
		/// Creates the default context menu for the header control. The control uses the current column set.
		/// \c EnsureShellColumnsAreLoaded should be called before this method.
		///
		/// \return The context menu's handle.
		///
		/// \sa DisplayHeaderContextMenu, DestroyHeaderContextMenu, CreateShellContextMenu
		[id(DISPID_SHLVW_CREATEHEADERCONTEXTMENU), helpstring("Creates the default context menu for the header control.")]
		HRESULT CreateHeaderContextMenu([out, retval] OLE_HANDLE* pMenu);
		/// \brief <em>Creates a shell context menu</em>
		///
		/// \param[in] items An object specifying the listview items for which to create the shell context
		///            menu. The following values may be used to identify the items:
		///            - A single item ID.
		///            - An array of item IDs.
		///            - A \c ListViewItem object.
		///            - A \c ListViewItems object.
		///            - A \c ListViewItemContainer object.
		///            - A \c ShellListViewItem object.
		///            - A \c ShellListViewItems object.
		///            To create the background context menu of a shell namespace, pass the
		///            \c ShellListViewNamespace object of the shell namespace.
		///
		/// \return The shell context menu's handle.
		///
		/// \sa DisplayShellContextMenu, IShListViewItem::CreateShellContextMenu,
		///     IShListViewItems::CreateShellContextMenu, IShListViewNamespace::CreateShellContextMenu,
		///     DestroyShellContextMenu, CreateHeaderContextMenu
		[id(DISPID_SHLVW_CREATESHELLCONTEXTMENU), helpstring("Creates a shell context menu.")]
		HRESULT CreateShellContextMenu([in] VARIANT items, [out, retval] OLE_HANDLE* pMenu);
		/// \brief <em>Destroys the control's current header context menu</em>
		///
		/// Destroys the header context menu that was created by the last call to a \c CreateHeaderContextMenu
		/// method.
		///
		/// \sa CreateHeaderContextMenu, DestroyShellContextMenu
		[id(DISPID_SHLVW_DESTROYHEADERCONTEXTMENU), helpstring("Destroys the header context menu that was created by the last call to a 'CreateHeaderContextMenu' method.")]
		HRESULT DestroyHeaderContextMenu(void);
		/// \brief <em>Destroys the control's current shell context menu</em>
		///
		/// Destroys the shell context menu that was created by the last call to a \c CreateShellContextMenu
		/// method.
		///
		/// \sa CreateShellContextMenu, IShListViewItem::CreateShellContextMenu,
		///     IShListViewItems::CreateShellContextMenu, IShListViewNamespace::CreateShellContextMenu
		[id(DISPID_SHLVW_DESTROYSHELLCONTEXTMENU), helpstring("Destroys the shell context menu that was created by the last call to a 'CreateShellContextMenu' method.")]
		HRESULT DestroyShellContextMenu(void);
		/// \brief <em>Detaches the object from the \c SysListView32 window it is currently attached to</em>
		///
		/// \sa Attach, hWnd
		[id(DISPID_SHLVW_DETACH), helpstring("Detaches the object from the 'SysListView32' window it is currently attached to.")]
		HRESULT Detach(void);
		/// \brief <em>Displays the default context menu for the header control</em>
		///
		/// Displays the default context menu for the header control. The control uses the current column set.
		/// \c EnsureShellColumnsAreLoaded should be called before this method.
		///
		/// \param[in] x The x-coordinate (in pixels) of the menu's position relative to the attached control's
		///            upper-left corner.
		/// \param[in] y The y-coordinate (in pixels) of the menu's position relative to the attached control's
		///            upper-left corner.
		///
		/// \sa CreateHeaderContextMenu, DestroyHeaderContextMenu, DisplayShellContextMenu
		[id(DISPID_SHLVW_DISPLAYHEADERCONTEXTMENU), helpstring("Displays the default context menu for the header control.")]
		HRESULT DisplayHeaderContextMenu([in] OLE_XPOS_PIXELS x, [in] OLE_YPOS_PIXELS y);
		/// \brief <em>Displays a shell context menu</em>
		///
		/// \param[in] items An object specifying the listview items for which to display the shell context
		///            menu. The following values may be used to identify the items:
		///            - A single item ID.
		///            - An array of item IDs.
		///            - A \c ListViewItem object.
		///            - A \c ListViewItems object.
		///            - A \c ListViewItemContainer object.
		///            - A \c ShellListViewItem object.
		///            - A \c ShellListViewItems object.
		///            To display the background context menu of a shell namespace, pass the
		///            \c ShellListViewNamespace object of the shell namespace.
		/// \param[in] x The x-coordinate (in pixels) of the menu's position relative to the attached control's
		///            upper-left corner.
		/// \param[in] y The y-coordinate (in pixels) of the menu's position relative to the attached control's
		///            upper-left corner.
		///
		/// \sa CreateShellContextMenu, DestroyShellContextMenu, DisplayHeaderContextMenu,
		///     IShListViewItem::DisplayShellContextMenu, IShListViewItems::DisplayShellContextMenu,
		///     IShListViewNamespace::DisplayShellContextMenu
		[id(DISPID_SHLVW_DISPLAYSHELLCONTEXTMENU), helpstring("Displays a shell context menu.")]
		HRESULT DisplayShellContextMenu([in] VARIANT items, [in] OLE_XPOS_PIXELS x, [in] OLE_YPOS_PIXELS y);
		/// \brief <em>Ensures that the shell columns have been loaded</em>
		///
		/// \c ShellListView loads the shell columns as late as possible. As long as the active view mode
		/// doesn't require the shell columns to be loaded ('Tiles' and 'Details' view mode are the only view
		/// modes for which columns are required), the control doesn't load them.\n
		/// This method loads the shell columns if they have not yet been loaded; otherwise it does nothing. It
		/// should be called before accessing the \c Columns property if the control is in e. q. 'Icons' view
		/// mode.
		///
		/// \param[in] waitForLastColumn If set to \c True, the method doesn't return before all work is done.
		///            If set to \c False, it may move the shell column enumeration to a background thread and
		///            return before all columns have been loaded.
		///
		/// \sa Columns, AutoInsertColumns
		[id(DISPID_SHLVW_ENSURESHELLCOLUMNSARELOADED), helpstring("Ensures that the shell columns have been loaded.")]
		HRESULT EnsureShellColumnsAreLoaded([in, defaultvalue(-1)] VARIANT_BOOL waitForLastColumn);
		/// \brief <em>Reloads all icons managed by \c ShellListView</em>
		///
		/// \param[in] includeOverlays If set to \c True, not only the icons managed by \c ShellListView are
		///            flushed, but also the overlay images; otherwise only the icons are flushed.
		///
		/// \sa ProcessShellNotifications
		[id(DISPID_SHLVW_FLUSHMANAGEDICONS), helpstring("Reloads all icons managed by 'ShellListView'.")]
		HRESULT FlushManagedIcons([in, defaultvalue(-1)] VARIANT_BOOL includeOverlays);
		/// \brief <em>Retrieves the specified header menu item's caption</em>
		///
		/// Retrieves the caption of the specified header context menu item.
		///
		/// \param[in] commandID The unique ID of the context menu item.
		/// \param[in,out] itemCaption Receives the caption of the item specified by \c commandID.
		///
		/// \return \c True, if the menu item specified by \c commandID is a valid header context menu item;
		///         otherwise \c False.
		///
		/// \sa GetShellContextMenuItemString, _IShListViewEvents::ChangedContextMenuSelection
		[id(DISPID_SHLVW_GETHEADERCONTEXTMENUITEMSTRING), helpstring("Retrieves the caption of the specified header context menu item.")]
		HRESULT GetHeaderContextMenuItemString([in] LONG commandID, [in, out, optional] VARIANT* itemCaption, [out, retval] VARIANT_BOOL* pCommandIDWasValid);
		/// \brief <em>Retrieves the specified shell menu item's description or verb</em>
		///
		/// Retrieves the help text and/or the language-independent command name of the specified shell context
		/// menu item. The help text may be displayed in a status bar if the menu item is selected; the command
		/// name ('verb') may be used to identify the command (the command ID may be different on different
		/// systems).
		///
		/// \param[in] commandID The unique ID of the context menu item.
		/// \param[in,out] itemDescription Receives the help text of the item specified by \c commandID.
		/// \param[in,out] itemVerb Receives the language-independent command name of the item specified by
		///                \c commandID.
		///
		/// \return \c True, if the menu item specified by \c commandID is a valid shell context menu item;
		///         otherwise \c False.
		///
		/// \remarks Many shell extensions (some being part of Windows) are not implemented correctly.
		///          Therefore the method may report an invalid menu item although the item is a valid shell
		///          context menu item and valid strings are returned.
		///
		/// \sa GetHeaderContextMenuItemString, _IShListViewEvents::ChangedContextMenuSelection
		[id(DISPID_SHLVW_GETSHELLCONTEXTMENUITEMSTRING), helpstring("Retrieves the help text and/or the language-independent command name ('verb') of the specified shell context menu item.")]
		HRESULT GetShellContextMenuItemString([in] LONG commandID, [in, out, optional] VARIANT* itemDescription, [in, out, optional] VARIANT* itemVerb, [out, retval] VARIANT_BOOL* pCommandIDWasValid);
		/// \brief <em>Executes the default command from the specified items' shell context menu</em>
		///
		/// \param[in] items An object specifying the listview items for which to execute the command.
		///            The following values may be used to identify the items:
		///            - A single item ID.
		///            - An array of item IDs.
		///            - A \c ListViewItem object.
		///            - A \c ListViewItems object.
		///            - A \c ListViewItemContainer object.
		///            - A \c ShellListViewItem object.
		///            - A \c ShellListViewItems object.
		///
		/// \sa CreateShellContextMenu, DisplayShellContextMenu,
		///     IShListViewItem::InvokeDefaultShellContextMenuCommand,
		///     IShListViewItems::InvokeDefaultShellContextMenuCommand
		[id(DISPID_SHLVW_INVOKEDEFAULTSHELLCONTEXTMENUCOMMAND), helpstring("Executes the default command from the items' shell context menu.")]
		HRESULT InvokeDefaultShellContextMenuCommand([in] VARIANT items);
		/// \brief <em>Loads the control's settings from the specified file</em>
		///
		/// \param[in] file The file to read from.
		///
		/// \return \c True if the settings could be loaded; otherwise \c False.
		///
		/// \sa SaveSettingsToFile
		[id(DISPID_SHLVW_LOADSETTINGSFROMFILE), helpstring("Loads the control's settings from the specified file.")]
		HRESULT LoadSettingsFromFile([in] BSTR file, [out, retval] VARIANT_BOOL* pSucceeded);
		/// \brief <em>Saves the control's settings to the specified file</em>
		///
		/// \param[in] file The file to write to.
		///
		/// \return \c True if the settings could be saved; otherwise \c False.
		///
		/// \sa LoadSettingsFromFile
		[id(DISPID_SHLVW_SAVESETTINGSTOFILE), helpstring("Saves the control's settings to the specified file.")]
		HRESULT SaveSettingsToFile([in] BSTR file, [out, retval] VARIANT_BOOL* pSucceeded);
		/// \brief <em>Sorts the attached control's items</em>
		///
		/// Sorts the attached control's items.\n
		/// \c IExplorerListView::SortItems is called with the following parameters:
		/// - \c firstCriterion: \c sobShell
		/// - \c secondCriterion: \c sobText
		/// - \c thirdCriterion: \c sobCustom
		/// - \c fourthCriterion: \c sobNone
		/// - \c fifthCriterion: \c sobNone
		/// - \c column: The specified shell column's index within the attached control, if the column is
		///   currently activated; otherwise this parameter is not specified.
		/// - \c caseSensitive: \c False
		///
		/// \param[in] shellColumnIndex The zero-based index of the shell column by which to sort. If set to
		///            -1, the default sort column of the first defined shell namespace is used.
		///
		/// \sa ItemTypeSortOrder, SortColumnIndex, IShListViewNamespace::AutoSortItems, SelectSortColumn,
		///     SetSortArrows, SortOnHeaderClick, ListItems, Columns
		[id(DISPID_SHLVW_SORTITEMS), helpstring("Sorts the attached control's items.")]
		HRESULT SortItems([in, defaultvalue(-1)] LONG shellColumnIndex);

		/// \brief <em>Specifies whether shell column properties are persisted when switching to the columns of a different namespace</em>
		///
		/// Retrieves or sets whether the control keeps the current column settings when loading the columns
		/// of another namespace. Any of the values defined by the
		/// \c ShLvwPersistColumnSettingsAcrossNamespacesConstants enumeration is valid. The following column
		/// settings are preserved:
		/// - \c Alignment
		/// - \c Caption
		/// - \c Visible
		/// - \c Width
		/// - Column order
		/// - Sorting
		///
		/// \sa Columns, AutoInsertColumns, IShListViewColumn::Alignment, IShListViewColumn::Caption,
		///     IShListViewColumn::Visible, IShListViewColumn::Width,
		///     ShLvwPersistColumnSettingsAcrossNamespacesConstants
		[propget, id(DISPID_SHLVW_PERSISTCOLUMNSETTINGSACROSSNAMESPACES), helpstring("Retrieves or sets whether the control keeps the current column settings when loading the columns of another namespace.")]
		HRESULT PersistColumnSettingsAcrossNamespaces([out, retval] ShLvwPersistColumnSettingsAcrossNamespacesConstants* pValue);
		[propput, id(DISPID_SHLVW_PERSISTCOLUMNSETTINGSACROSSNAMESPACES), helpstring("Retrieves or sets whether the control keeps the current column settings when loading the columns of another namespace.")]
		HRESULT PersistColumnSettingsAcrossNamespaces([in] ShLvwPersistColumnSettingsAcrossNamespacesConstants newValue);
	  #ifdef ACTIVATE_SECZONE_FEATURES
			/// \brief <em>Retrieves the Internet Explorer security zones</em>
			///
			/// Retrieves a collection object wrapping the Internet Explorer security zones.
			///
			/// \remarks This property is read-only.
			///
			/// \sa ISecurityZones
			[propget, id(DISPID_SHLVW_SECURITYZONES), helpstring("Retrieves a collection object wrapping the Internet Explorer security zones."), nonbrowsable]
			HRESULT SecurityZones([out, retval] ISecurityZones** ppZones);
		#endif
	}


	/// \interface _IShListViewEvents
	/// \author Timo "TimoSoft" Kunze
	/// \brief <em>The \c ShellListView class' events interface</em>
	///
	/// This interface defines all events the \c ShellListView class may raise.
	///
	/// \sa IShListView
	[
		uuid(532C6E23-0360-4a51-8655-B5997D3306FB),
		helpstring("IShListView-event-interface")
	]
	dispinterface _IShListViewEvents
	{
		properties:
		methods:
			/// \brief <em>A shell column has been inserted into or removed from the listview control</em>
			///
			/// Will be fired after a shell column has been inserted into or removed from the listview control.
			///
			/// \param[in] column The column that has been inserted into or removed from the listview control.
			/// \param[in] hasBecomeVisible If \c True, the column has been inserted; otherwise it has been
			///            removed from the listview control.
			///
			/// \remarks This event may be disabled.
			///
			/// \sa ChangingColumnVisibility, UnloadedColumn, IShListView::DisabledEvents
			[id(DISPID_SHLVWE_CHANGEDCOLUMNVISIBILITY), helpstring("Will be fired after a shell column has been inserted into or removed from the listview control. This event may be disabled.")]
			void ChangedColumnVisibility(IShListViewColumn* column, VARIANT_BOOL hasBecomeVisible);
			/// \brief <em>The item selection in a context menu has changed</em>
			///
			/// Will be fired after the menu item selection in a context menu has changed. This event may be used
			/// to display a description of the selected command.
			///
			/// \param[in] hContextMenu The handle of the context menu. Will be 0 if the menu is closed.
			/// \param[in] isShellContextMenu If \c True, the menu is a shell context menu; otherwise it is a
			///            column header context menu.
			/// \param[in] commandID The ID of the new selected menu item. May be 0.
			/// \param[in] isCustomMenuItem If \c False, the selected menu item has been inserted by
			///            \c ShellListView; otherwise it is a custom menu item.
			///
			/// \sa SelectedShellContextMenuItem, IShListView::GetShellContextMenuItemString,
			///     IShListView::GetHeaderContextMenuItemString
			[id(DISPID_SHLVWE_CHANGEDCONTEXTMENUSELECTION), helpstring("Will be fired after the menu item selection in a context menu has changed. This event may be used to display a description of the selected command.")]
			void ChangedContextMenuSelection(OLE_HANDLE hContextMenu, VARIANT_BOOL isShellContextMenu, LONG commandID, VARIANT_BOOL isCustomMenuItem);
			/// \brief <em>An item's pIDL has changed</em>
			///
			/// Will be fired after an item's fully qualified pIDL was changed.
			///
			/// \param[in] listItem The item that was updated.
			/// \param[in] previousPIDL The item's previous fully qualified pIDL.
			/// \param[in] newPIDL The item's new fully qualified pIDL.
			///
			/// \remarks This event may be disabled.
			///
			/// \sa ChangedNamespacePIDL, IShListViewItem::FullyQualifiedPIDL, IShListView::DisabledEvents
			[id(DISPID_SHLVWE_CHANGEDITEMPIDL), helpstring("Will be fired after an item's fully qualified pIDL was changed. This event may be disabled.")]
			void ChangedItemPIDL(IShListViewItem* listItem, LONG previousPIDL, LONG newPIDL);
			/// \brief <em>A namespace's pIDL has changed</em>
			///
			/// Will be fired after a namespace's fully qualified pIDL was changed.
			///
			/// \param[in] namespace The namespace that was updated.
			/// \param[in] previousPIDL The namespace's previous fully qualified pIDL.
			/// \param[in] newPIDL The namespace's new fully qualified pIDL.
			///
			/// \remarks This event may be disabled.
			///
			/// \sa ChangedItemPIDL, IShListViewNamespace::FullyQualifiedPIDL, IShListView::DisabledEvents
			[id(DISPID_SHLVWE_CHANGEDNAMESPACEPIDL), helpstring("Will be fired after a namespace's fully qualified pIDL was changed. This event may be disabled.")]
			void ChangedNamespacePIDL(IShListViewNamespace* namespace, LONG previousPIDL, LONG newPIDL);
			/// \brief <em>The control's sort column has changed</em>
			///
			/// Will be fired after the column, by which the shell items are sorted, have been changed.
			///
			/// \param[in] previousSortColumnIndex The zero-based index of the old sort column. This index is the
			///            column's index given by the shell.
			/// \param[in] newSortColumnIndex The zero-based index of the new sort column. This index is the
			///            column's index given by the shell.
			///
			/// \sa ChangingSortColumn, IShListView::SortColumnIndex, IShListView::SortItems
			[id(DISPID_SHLVWE_CHANGEDSORTCOLUMN), helpstring("Will be fired after the column, by which the shell items are sorted, have been changed.")]
			void ChangedSortColumn(LONG previousSortColumnIndex, LONG newSortColumnIndex);
			/// \brief <em>A shell column is about to be inserted into or removed from the listview control</em>
			///
			/// Will be fired before a shell column is inserted into or removed from the listview control.
			///
			/// \param[in] column The column that is inserted into or removed from the listview control.
			/// \param[in] willBecomeVisible If \c True, the column will be inserted; otherwise it will be
			///            removed from the listview control.
			/// \param[in,out] cancel If set to \c True, insertion or removal of the column is aborted, i. e. the
			///                column isn't inserted or removed. If set to \c False, the column is inserted or
			///                removed.
			///
			/// \remarks This event may be disabled.
			///
			/// \sa LoadedColumn, ChangedColumnVisibility, UnloadedColumn, IShListView::DisabledEvents
			[id(DISPID_SHLVWE_CHANGINGCOLUMNVISIBILITY), helpstring("Will be fired before a shell column is inserted into or removed from the listview control. This event may be disabled.")]
			void ChangingColumnVisibility(IShListViewColumn* column, VARIANT_BOOL willBecomeVisible, VARIANT_BOOL* cancel);
			/// \brief <em>The control's sort column is about to be changed</em>
			///
			/// Will be fired before the column, by which the shell items are sorted, is changed.
			///
			/// \param[in] previousSortColumnIndex The zero-based index of the old sort column. This index is the
			///            column's index given by the shell.
			/// \param[in] newSortColumnIndex The zero-based index of the new sort column. This index is the
			///            column's index given by the shell.
			/// \param[in,out] cancelChange If set to \c True, changing the sort column is aborted, i. e. the
			///                sort column remains the same. If set to \c False, the sort column is redefined.
			///
			/// \sa ChangedSortColumn, IShListView::SortColumnIndex, IShListView::SortItems
			[id(DISPID_SHLVWE_CHANGINGSORTCOLUMN), helpstring("Will be fired before the column, by which the shell items are sorted, is changed.")]
			void ChangingSortColumn(LONG previousSortColumnIndex, LONG newSortColumnIndex, VARIANT_BOOL* cancelChange);
			/// \brief <em>The enumeration of the specified namespace's columns has been completed</em>
			///
			/// Will be fired if the enumeration of a namespace's columns has been completed. You may want to use
			/// this event to update information like how many columns the currently viewed namespace does
			/// contain.
			///
			/// \param[in] namespace The namespace whose columns have been enumerated.
			/// \param[in] aborted Specifies whether the enumeration has been aborted, e. g. because you have
			///            removed the namespace before it completed. If \c True, the enumeration has been
			///            aborted; otherwise not.
			///
			/// \sa ColumnEnumerationStarted, ColumnEnumerationTimedOut, ItemEnumerationCompleted,
			///     IShListViewNamespace, IShListView::ColumnEnumerationTimeout
			[id(DISPID_SHLVWE_COLUMNENUMERATIONCOMPLETED), helpstring("Will be fired if the enumeration of a namespace's columns has been completed.")]
			void ColumnEnumerationCompleted(IShListViewNamespace* namespace, VARIANT_BOOL aborted);
			/// \brief <em>The enumeration of the specified namespace's columns has been started</em>
			///
			/// Will be fired if the enumeration of a namespace's columns has been started. You may want to use
			/// this event to display some kind of "Please wait" UI, e. g. an animation.
			///
			/// \param[in] namespace The namespace whose columns are being enumerated.
			///
			/// \sa ColumnEnumerationTimedOut, ColumnEnumerationCompleted, ItemEnumerationStarted,
			///     IShListViewNamespace, IShListView::ColumnEnumerationTimeout
			[id(DISPID_SHLVWE_COLUMNENUMERATIONSTARTED), helpstring("Will be fired if the enumeration of a namespace's columns has been started.")]
			void ColumnEnumerationStarted(IShListViewNamespace* namespace);
			/// \brief <em>The enumeration of the specified namespace's columns timed out</em>
			///
			/// Will be fired if the enumeration of a namespace's columns is taking longer than allowed by the
			/// \c ColumnEnumerationTimeout property. You may use this event to display some kind of
			/// "Please wait" UI, e. g. an animation. <strong>The column enumeration doesn't stop when this event
			/// is fired.</strong>
			///
			/// \param[in] namespace The namespace whose columns are being enumerated.
			///
			/// \sa ColumnEnumerationStarted, ColumnEnumerationCompleted, ItemEnumerationTimedOut,
			///     IShListViewNamespace, IShListView::ColumnEnumerationTimeout
			[id(DISPID_SHLVWE_COLUMNENUMERATIONTIMEDOUT), helpstring("Will be fired if the enumeration of a namespace's columns is taking longer than allowed by the 'ColumnEnumerationTimeout' property.")]
			void ColumnEnumerationTimedOut(IShListViewNamespace* namespace);
			/// \brief <em>A header context menu has been created and is about to be displayed</em>
			///
			/// Will be fired after a header context menu has been created and before it is displayed. This event
			/// may be used to add custom menu items.
			///
			/// \param[in] hContextMenu The handle of the context menu.
			/// \param[in] minimumCustomCommandID The lowest command ID that may be used for custom menu items.
			///            For custom menu items any command ID larger or equal this value and smaller or equal
			///            65535 may be used.
			/// \param[in,out] cancelMenu If set to \c True, the context menu is canceled and won't be displayed.
			///                If set to \c False, the control will popup the menu.
			///
			/// \sa DestroyingHeaderContextMenu, SelectedHeaderContextMenuItem, CreatedShellContextMenu
			[id(DISPID_SHLVWE_CREATEDHEADERCONTEXTMENU), helpstring("Will be fired after a header context menu has been created and before it is displayed. This event may be used to add custom menu items.")]
			void CreatedHeaderContextMenu(OLE_HANDLE hContextMenu, LONG minimumCustomCommandID, VARIANT_BOOL* cancelMenu);
			/// \brief <em>A shell context menu has been created and is about to be displayed</em>
			///
			/// Will be fired after a shell context menu has been created and before it is displayed. This event
			/// may be used to add custom menu items.
			///
			/// \param[in] items The items the context menu refers to. \c This is a ListViewItemContainer object.
			///            For background context menus, this parameter will be \c Nothing.
			/// \param[in] hContextMenu The handle of the context menu.
			/// \param[in] minimumCustomCommandID The lowest command ID that may be used for custom menu items.
			///            For custom menu items any command ID larger or equal this value and smaller or equal
			///            65535 may be used.
			/// \param[in,out] cancelMenu If set to \c True, the context menu is canceled and won't be displayed.
			///                If set to \c False, the control will popup the menu.
			///
			/// \remarks Background context menus require that the control contains exactly 1 namespace.
			///
			/// \sa CreatingShellContextMenu, DestroyingShellContextMenu, SelectedShellContextMenuItem,
			///     CreatedHeaderContextMenu, IShListView::Namespaces
			[id(DISPID_SHLVWE_CREATEDSHELLCONTEXTMENU), helpstring("Will be fired after a shell context menu has been created and before it is displayed. This event may be used to add custom menu items.")]
			void CreatedShellContextMenu(IDispatch* items, OLE_HANDLE hContextMenu, LONG minimumCustomCommandID, VARIANT_BOOL* cancelMenu);
			/// \brief <em>A shell context menu is about to be created</em>
			///
			/// Will be fired before a shell context menu is created.
			///
			/// \param[in] items The items the context menu refers to. \c This is a ListViewItemContainer object.
			///            For background context menus, this parameter will be \c Nothing.
			/// \param[in,out] contextMenuStyle A bit field influencing the content of the context menu. Any
			///                combination of the values defined by the \c ShellContextMenuStyleConstants
			///                enumeration is valid.
			/// \param[in,out] cancel If set to \c True, the menu creation is aborted and no shell context menu
			///                is displayed. If set to \c False, the menu is created and the control proceeds
			///                displaying it.
			///
			/// \remarks Background context menus require that the control contains exactly 1 namespace.
			///
			/// \sa CreatedShellContextMenu, ShellContextMenuStyleConstants, IShListView::Namespaces
			[id(DISPID_SHLVWE_CREATINGSHELLCONTEXTMENU), helpstring("Will be fired before a shell context menu is created.")]
			void CreatingShellContextMenu(IDispatch* items, ShellContextMenuStyleConstants* contextMenuStyle, VARIANT_BOOL* cancel);
			/// \brief <em>A header context menu is about to be destroyed</em>
			///
			/// Will be fired before a header context menu is destroyed. Any resources used for custom menu items
			/// should be freed here.
			///
			/// \param[in] hContextMenu The handle of the context menu.
			///
			/// \sa CreatedHeaderContextMenu, DestroyingShellContextMenu
			[id(DISPID_SHLVWE_DESTROYINGHEADERCONTEXTMENU), helpstring("Will be fired before a header context menu is destroyed. Any resources used for custom menu items should be freed here.")]
			void DestroyingHeaderContextMenu(OLE_HANDLE hContextMenu);
			/// \brief <em>A shell context menu is about to be destroyed</em>
			///
			/// Will be fired before a shell context menu is destroyed. Any resources used for custom menu items
			/// should be freed here.
			///
			/// \param[in] items The items the context menu refers to. \c This is a ListViewItemContainer object.
			///            For background context menus, this parameter will be \c Nothing.
			/// \param[in] hContextMenu The handle of the context menu.
			///
			/// \remarks Background context menus require that the control contains exactly 1 namespace.
			///
			/// \sa CreatingShellContextMenu, DestroyingHeaderContextMenu, IShListView::Namespaces
			[id(DISPID_SHLVWE_DESTROYINGSHELLCONTEXTMENU), helpstring("Will be fired before a shell context menu is destroyed. Any resources used for custom menu items should be freed here.")]
			void DestroyingShellContextMenu(IDispatch* items, OLE_HANDLE hContextMenu);
			/// \brief <em>An item was inserted</em>
			///
			/// Will be fired after a new item was inserted.
			///
			/// \param[in] listItem The item that was inserted.
			///
			/// \remarks This event may be disabled.
			///
			/// \sa InsertingItem, InsertedNamespace, LoadedColumn, RemovingItem, IShListViewItem,
			///     IShListView::DisabledEvents
			[id(DISPID_SHLVWE_INSERTEDITEM), helpstring("Will be fired after a new item was inserted. This event may be disabled.")]
			void InsertedItem(IShListViewItem* listItem);
			/// \brief <em>A namespace was inserted</em>
			///
			/// Will be fired after a new namespace was inserted.
			///
			/// \param[in] namespace The namespace that was inserted.
			///
			/// \remarks This event may be disabled.
			///
			/// \sa InsertedItem, LoadedColumn, RemovingNamespace, IShListViewNamespace,
			///     IShListView::DisabledEvents
			[id(DISPID_SHLVWE_INSERTEDNAMESPACE), helpstring("Will be fired after a new namespace was inserted. This event may be disabled.")]
			void InsertedNamespace(IShListViewNamespace* namespace);
			/// \brief <em>An item is about to be inserted</em>
			///
			/// Will be fired before a new item is inserted.
			///
			/// \param[in] fullyQualifiedPIDL The fully qualified pIDL of the item being inserted.
			/// \param[in,out] cancelInsertion If set to \c True, insertion is aborted, i. e. the item
			///                isn't inserted. If set to \c False, the item is inserted.
			///
			/// \remarks This event may be disabled.
			///
			/// \sa InsertedItem, ChangingColumnVisibility, RemovingItem, IShListView::DisabledEvents
			[id(DISPID_SHLVWE_INSERTINGITEM), helpstring("Will be fired before a new item is inserted. This event may be disabled.")]
			void InsertingItem(LONG FullyQualifiedPIDL, VARIANT_BOOL* cancelInsertion);
			/// \brief <em>A header context menu command has been invoked</em>
			///
			/// Will be fired after a header context menu command has been invoked.
			///
			/// \param[in] hContextMenu The handle of the context menu.
			/// \param[in] commandID The command ID identifying the command.
			///
			/// \sa SelectedHeaderContextMenuItem, InvokedShellContextMenuCommand
			[id(DISPID_SHLVWE_INVOKEDHEADERCONTEXTMENUCOMMAND), helpstring("Will be fired after a header context menu command has been invoked.")]
			void InvokedHeaderContextMenuCommand(OLE_HANDLE hContextMenu, LONG commandID);
			/// \brief <em>A shell context menu command has been invoked</em>
			///
			/// Will be fired after a shell context menu command has been invoked.
			///
			/// \param[in] items The items the context menu refers to. \c This is a ListViewItemContainer object.
			///            For background context menus, this parameter will be \c Nothing.
			/// \param[in] hContextMenu The handle of the context menu.
			/// \param[in] commandID The command ID identifying the command.
			/// \param[in] usedWindowMode A value specifying how to display the window that may be opened
			///            when executing the command. Any of the values defined by the \c WindowModeConstants
			///            enumeration is valid.
			/// \param[in] usedInvocationFlags A bit field controlling command execution. Any combination of
			///            the values defined by the \c CommandInvocationFlagsConstants enumeration is valid.
			///
			/// \remarks Background context menus require that the control contains exactly 1 namespace.
			///
			/// \sa SelectedShellContextMenuItem, InvokedHeaderContextMenuCommand, WindowModeConstants,
			///     CommandInvocationFlagsConstants, IShListView::Namespaces
			[id(DISPID_SHLVWE_INVOKEDSHELLCONTEXTMENUCOMMAND), helpstring("Will be fired after a shell context menu command has been invoked.")]
			void InvokedShellContextMenuCommand(IDispatch* items, OLE_HANDLE hContextMenu, LONG commandID, WindowModeConstants usedWindowMode, CommandInvocationFlagsConstants usedInvocationFlags);
			/// \brief <em>The enumeration of the specified namespace's items has been completed</em>
			///
			/// Will be fired if the enumeration of a namespace's items has been completed. You may want to use
			/// this event to update information like how many items the currently viewed namespace does contain.
			///
			/// \param[in] namespace The namespace whose items have been enumerated.
			/// \param[in] aborted Specifies whether the enumeration has been aborted, e. g. because you have
			///            removed the namespace before it completed. If \c True, the enumeration has been
			///            aborted; otherwise not.
			///
			/// \sa ItemEnumerationStarted, ItemEnumerationTimedOut, ColumnEnumerationCompleted,
			///     IShListViewNamespace, IShListView::ItemEnumerationTimeout
			[id(DISPID_SHLVWE_ITEMENUMERATIONCOMPLETED), helpstring("Will be fired if the enumeration of a namespace's items has been completed.")]
			void ItemEnumerationCompleted(IShListViewNamespace* namespace, VARIANT_BOOL aborted);
			/// \brief <em>The enumeration of the specified namespace's items has been started</em>
			///
			/// Will be fired if the enumeration of a namespace's items has been started. You may want to use
			/// this event to display some kind of "Please wait" UI, e. g. an animation.
			///
			/// \param[in] namespace The namespace whose items are being enumerated.
			///
			/// \sa ItemEnumerationTimedOut, ItemEnumerationCompleted, ColumnEnumerationStarted,
			///     IShListViewNamespace, IShListView::ItemEnumerationTimeout
			[id(DISPID_SHLVWE_ITEMENUMERATIONSTARTED), helpstring("Will be fired if the enumeration of a namespace's items has been started.")]
			void ItemEnumerationStarted(IShListViewNamespace* namespace);
			/// \brief <em>The enumeration of the specified namespace's items timed out</em>
			///
			/// Will be fired if the enumeration of a namespace's items is taking longer than allowed by the
			/// \c ItemEnumerationTimeout property. You may use this event to display some kind of "Please wait"
			/// UI, e. g. an animation. <strong>The item enumeration doesn't stop when this event is
			/// fired.</strong>
			///
			/// \param[in] namespace The namespace whose items are being enumerated.
			///
			/// \sa ItemEnumerationStarted, ItemEnumerationCompleted, ColumnEnumerationTimedOut,
			///     IShListViewNamespace, IShListView::ItemEnumerationTimeout
			[id(DISPID_SHLVWE_ITEMENUMERATIONTIMEDOUT), helpstring("Will be fired if the enumeration of a namespace's items is taking longer than allowed by the 'ItemEnumerationTimeout' property.")]
			void ItemEnumerationTimedOut(IShListViewNamespace* namespace);
			/// \brief <em>A shell column has been loaded</em>
			///
			/// Will be fired after a new column has been loaded and before the column is inserted into the
			/// attached listview control.
			///
			/// \param[in] column The column that has been loaded.
			/// \param[in,out] makeVisible If set to \c True, the column is inserted into the listview control;
			///                otherwise not.
			///
			/// \remarks This event may be disabled.
			///
			/// \sa UnloadedColumn, ChangingColumnVisibility, InsertedItem, InsertedNamespace, IShListViewColumn,
			///     IShListView::DisabledEvents
			[id(DISPID_SHLVWE_LOADEDCOLUMN), helpstring("Will be fired after a new column has been loaded and before the column is inserted into the attached listview control. This event may be disabled.")]
			void LoadedColumn(IShListViewColumn* column, VARIANT_BOOL* makeVisible);
			/// \brief <em>An item is about to be removed</em>
			///
			/// Will be fired before an item is removed.
			///
			/// \param[in] listItem The item that is about to be removed. If \c Nothing, all items are removed.
			///
			/// \remarks This event may be disabled.
			///
			/// \sa RemovingNamespace, UnloadedColumn, InsertedItem, IShListViewItem, IShListView::DisabledEvents
			[id(DISPID_SHLVWE_REMOVINGITEM), helpstring("Will be fired before an item is removed. If 'listItem' is 'Nothing', all items are removed. This event may be disabled.")]
			void RemovingItem(IShListViewItem* listItem);
			/// \brief <em>A namespace is about to be removed</em>
			///
			/// Will be fired before a namespace is removed.
			///
			/// \param[in] namespace The namespace that is about to be removed. If \c Nothing, all namespaces are
			///            removed.
			///
			/// \remarks This event may be disabled.
			///
			/// \sa RemovingItem, UnloadedColumn, InsertedNamespace, IShListViewNamespace,
			///     IShListView::DisabledEvents
			[id(DISPID_SHLVWE_REMOVINGNAMESPACE), helpstring("Will be fired before a namespace is removed. If 'namespace' is 'Nothing', all namespaces are removed. This event may be disabled.")]
			void RemovingNamespace(IShListViewNamespace* namespace);
			/// \brief <em>A context menu item has been selected and is about to be executed</em>
			///
			/// Will be fired after a context menu item has been selected and before it is executed. This event
			/// may be used to execute custom menu items. This event is for header context menus.
			///
			/// \param[in] hContextMenu The handle of the context menu.
			/// \param[in] commandID The command ID identifying the selected command.
			/// \param[in,out] executeCommand If set to \c True, the menu item is executed; otherwise not.\n
			///                If the menu item is a custom one, this value is ignored and always treated as
			///                being set to \c False.
			///
			/// \sa InvokedHeaderContextMenuCommand, ChangedContextMenuSelection, CreatedHeaderContextMenu,
			///     SelectedShellContextMenuItem
			[id(DISPID_SHLVWE_SELECTEDHEADERCONTEXTMENUITEM), helpstring("Will be fired after a context menu item has been selected and before it is executed. This event may be used to execute custom menu items. This event is for header context menus.")]
			void SelectedHeaderContextMenuItem(OLE_HANDLE hContextMenu, LONG commandID, VARIANT_BOOL* executeCommand);
			/// \brief <em>A context menu item has been selected and is about to be executed</em>
			///
			/// Will be fired after a context menu item has been selected and before it is executed. This event
			/// may be used to execute custom menu items. This event is for shell context menus.
			///
			/// \param[in] items The items the context menu refers to. \c This is a ListViewItemContainer object.
			///            For background context menus, this parameter will be \c Nothing.
			/// \param[in] hContextMenu The handle of the context menu.
			/// \param[in] commandID The command ID identifying the selected command.
			/// \param[in,out] windowModeToUse A value specifying how to display the window that may be opened
			///                when executing the command. Any of the values defined by the
			///                \c WindowModeConstants enumeration is valid.
			/// \param[in,out] invocationFlagsToUse A bit field controlling command execution. Any combination of
			///                the values defined by the \c CommandInvocationFlagsConstants enumeration is valid.
			/// \param[in,out] executeCommand If set to \c True, the menu item is executed; otherwise not.\n
			///                If the menu item is a custom one, this value is ignored and always treated as
			///                being set to \c False.
			///
			/// \remarks Background context menus require that the control contains exactly 1 namespace.
			///
			/// \sa InvokedShellContextMenuCommand, ChangedContextMenuSelection, CreatedShellContextMenu,
			///     SelectedHeaderContextMenuItem, WindowModeConstants, CommandInvocationFlagsConstants,
			///     IShListView::Namespaces
			[id(DISPID_SHLVWE_SELECTEDSHELLCONTEXTMENUITEM), helpstring("Will be fired after a context menu item has been selected and before it is executed. This event may be used to execute custom menu items. This event is for shell context menus.")]
			void SelectedShellContextMenuItem(IDispatch* items, OLE_HANDLE hContextMenu, LONG commandID, WindowModeConstants* windowModeToUse, CommandInvocationFlagsConstants* invocationFlagsToUse, VARIANT_BOOL* executeCommand);
			/// \brief <em>A shell column has been unloaded</em>
			///
			/// Will be fired after a shell column has been removed from \c ShellListView's internal list of
			/// shell columns.
			///
			/// \param[in] column The column that has been unloaded. If \c Nothing, all columns have been
			///            unloaded.
			///
			/// \remarks This event may be disabled.
			///
			/// \sa LoadedColumn, RemovingItem, RemovingNamespace, IShListViewColumn,
			///     IShListView::DisabledEvents
			[id(DISPID_SHLVWE_UNLOADEDCOLUMN), helpstring("Will be fired after a shell column has been removed from ShellListView's internal list of shell columns. If 'column' is 'Nothing', all columns have been unloaded. This event may be disabled.")]
			void UnloadedColumn(IShListViewColumn* column);
	};


	/// \brief <em>The \c ShellListView class</em>
	///
	/// The shell listview control's main COM class. It implements the \c IShListView and
	/// \c _IShListViewEvents interfaces.
	///
	/// \sa IShListView, _IShListViewEvents
	[
		uuid(15767507-5A73-412b-8C94-4FB10B356A57),
		version(1.5),
		noncreatable,
		helpstring("ShellListView Control 1.5 (Unicode)")
	]
	coclass ShellListView
	{
		[default] interface IShListView;
		[default, source] dispinterface _IShListViewEvents;
	};


	/// \interface IShTreeViewItem
	/// \brief <em>Wraps an existing shell treeview item</em>
	///
	/// This interface is a wrapper around a shell treeview item.
	///
	/// \sa _IShTreeViewItemEvents, IShTreeViewItems, IShTreeView
	[
		object,
		uuid(0C537AA9-984B-4b8a-8EE2-2475583916CB),
		dual,
		nonextensible,
		helpstring("IShTreeViewItem interface"),
		pointer_default(unique)
	]
	interface IShTreeViewItem : IDispatch
	{
		/// \brief <em>Retrieves whether the item can be customized via a Desktop.ini file</em>
		///
		/// Retrieves whether the item can be customized via a Desktop.ini file. If \c True, it can be
		/// customized; otherwise not.
		///
		/// \remarks This property is read-only.
		///
		/// \sa Customize
		[propget, id(DISPID_SHTVI_CUSTOMIZABLE), helpstring("Retrieves whether the item can be customized via a Desktop.ini file."), nonbrowsable]
		HRESULT Customizable([out, retval] VARIANT_BOOL* pValue);
		/// \brief <em>Retrieves the zero-based index of the item's default display column</em>
		///
		/// Retrieves the zero-based index of the item's default display column. This column is the one that
		/// should be displayed if only one column is displayed.
		///
		/// \remarks This property is read-only.
		///
		/// \sa IShTreeViewNamespace::DefaultDisplayColumnIndex, DefaultSortColumnIndex
		[propget, id(DISPID_SHTVI_DEFAULTDISPLAYCOLUMNINDEX), helpstring("Retrieves the zero-based index of the item's default display column."), nonbrowsable]
		HRESULT DefaultDisplayColumnIndex([out, retval] LONG* pValue);
		/// \brief <em>Retrieves the zero-based index of the item's default sort column</em>
		///
		/// Retrieves the zero-based index of the item's default sort column. This column is the one by which
		/// the item's sub-items should be sorted initially.
		///
		/// \remarks This property is read-only.
		///
		/// \sa IShTreeViewNamespace::DefaultSortColumnIndex, DefaultDisplayColumnIndex
		[propget, id(DISPID_SHTVI_DEFAULTSORTCOLUMNINDEX), helpstring("Retrieves the zero-based index of the item's default sort column."), nonbrowsable]
		HRESULT DefaultSortColumnIndex([out, retval] LONG* pValue);
		/// \brief <em>Retrieves or sets the item's name</em>
		///
		/// Retrieves the item's name as provided by the shell. For items having the \c isaCanBeRenamed shell
		/// attribute set, the \c dntDisplayName display name can be set.
		///
		/// \param[in] displayNameType Specifies the name to retrieve or set. Any of the values defined by the
		///            \c DisplayNameTypeConstants enumeration is valid.
		/// \param[in] relativeToDesktop If \c True, the retrieved name is relative to the Desktop; otherwise
		///            it is relative to the parent shell item.
		///
		/// \sa ShellAttributes, LinkTarget, DisplayNameTypeConstants
		[propget, id(DISPID_SHTVI_DISPLAYNAME), helpstring("Retrieves or sets the item's display name."), nonbrowsable]
		HRESULT DisplayName([in, defaultvalue(dntDisplayName)] DisplayNameTypeConstants displayNameType, [in, defaultvalue(0)] VARIANT_BOOL relativeToDesktop, [out, retval] BSTR* pValue);
		[propput, id(DISPID_SHTVI_DISPLAYNAME), helpstring("Retrieves or sets the item's display name."), nonbrowsable]
		HRESULT DisplayName([in, defaultvalue(dntDisplayName)] DisplayNameTypeConstants displayNameType, [in, defaultvalue(0)] VARIANT_BOOL relativeToDesktop, [in] BSTR newValue);
		/// \brief <em>Specifies the item's file attributes</em>
		///
		/// Retrieves or sets the item's file attributes. Any combination of the values defined by the
		/// \c ItemFileAttributesConstants enumeration is valid.
		///
		/// \param[in] mask Specifies the file attributes to check. Any combination of the values defined by
		///            the \c ItemFileAttributesConstants enumeration is valid.
		///
		/// \remarks This property will fail for non-filesystem items.
		///
		/// \sa ShellAttributes, ItemFileAttributesConstants
		[propget, id(DISPID_SHTVI_FILEATTRIBUTES), helpstring("Retrieves or sets the item's file attributes. This property will fail for non-filesystem items."), nonbrowsable]
		HRESULT FileAttributes([in, defaultvalue(0x17FB7)] ItemFileAttributesConstants mask, [out, retval] ItemFileAttributesConstants* pValue);
		[propput, id(DISPID_SHTVI_FILEATTRIBUTES), helpstring("Retrieves or sets the item's file attributes. This property will fail for non-filesystem items."), nonbrowsable]
		HRESULT FileAttributes([in, defaultvalue(0x17FB7)] ItemFileAttributesConstants mask, [in] ItemFileAttributesConstants newValue);
		/// \brief <em>Retrieves the treeview item's pIDL</em>
		///
		/// Retrieves the fully qualified pIDL associated with this treeview item.
		///
		/// \remarks The returned pIDL should NOT be freed!\n
		///          This is the default property of the \c IShTreeViewItem interface.\n
		///          This property is read-only.
		///
		/// \sa Handle
		[propget, id(DISPID_SHTVI_FULLYQUALIFIEDPIDL), helpstring("Retrieves the treeview item's fully qualified pIDL. Do NOT free this pIDL!"), nonbrowsable]
		HRESULT FullyQualifiedPIDL([out, retval] LONG* pValue);
		/// \brief <em>Retrieves the treeview item's handle</em>
		///
		/// Retrieves a handle identifying this treeview item.
		///
		/// \remarks A treeview item's handle will never change.\n
		///          This property is read-only.
		///
		/// \sa FullyQualifiedPIDL, TreeViewItemObject
		[propget, id(DISPID_SHTVI_HANDLE), helpstring("Retrieves the treeview item's handle."), nonbrowsable]
		HRESULT Handle([out, retval] OLE_HANDLE* pValue);
		/// \brief <em>Retrieves the item's info tip text</em>
		///
		/// Retrieves the item's info tip text.
		///
		/// \param[in] flags A bit field influencing the info tip being returned. Any combination of the values
		///            defined by the \c InfoTipFlagsConstants enumeration is valid.
		///
		/// \remarks This property is read-only.
		///
		/// \sa IShTreeView::InfoTipFlags, InfoTipFlagsConstants
		[propget, id(DISPID_SHTVI_INFOTIPTEXT), helpstring("Retrieves the item's info tip text."), nonbrowsable]
		HRESULT InfoTipText([in, defaultvalue(itfDefault | itfAllowSlowInfoTipFollowSysSettings)] InfoTipFlagsConstants flags, [out, retval] BSTR* pValue);
		/// \brief <em>Retrieves the link target if the item is a link</em>
		///
		/// Retrieves the path to which the item is linking.
		///
		/// \remarks This property raises an error if it is called for an item that isn't a link.\n
		///          This property is read-only.
		///
		/// \sa ShellAttributes, DisplayName, LinkTargetPIDL
		[propget, id(DISPID_SHTVI_LINKTARGET), helpstring("Retrieves the path to which the item is linking."), nonbrowsable]
		HRESULT LinkTarget([out, retval] BSTR* pValue);
		/// \brief <em>Retrieves the link target's fully qualified pIDL if the item is a link</em>
		///
		/// Retrieves the pIDL to which the item is linking.
		///
		/// \remarks The returned pIDL MUST be freed!\n
		///          This property raises an error if it is called for an item that isn't a link.\n
		///          This property is read-only.
		///
		/// \sa ShellAttributes, LinkTarget
		[propget, id(DISPID_SHTVI_LINKTARGETPIDL), helpstring("Retrieves the pIDL to which the item is linking. You MUST free this pIDL!"), nonbrowsable]
		HRESULT LinkTargetPIDL([out, retval] LONG* pValue);
		/// \brief <em>Specifies which of the treeview item's properties are managed by the \c ShellTreeView control</em>
		///
		/// Retrieves or sets a bit field specifying which of the treeview item's properties are managed by the
		/// \c ShellTreeView control rather than the treeview control/your application. Any combination of the
		/// values defined by the \c ShTvwManagedItemPropertiesConstants enumeration is valid.
		///
		/// \sa IShTreeView::DefaultManagedItemProperties, ShTvwManagedItemPropertiesConstants
		[propget, id(DISPID_SHTVI_MANAGEDPROPERTIES), helpstring("Retrieves or sets which of the treeview item's properties are managed by the ShellTreeView control.")]
		HRESULT ManagedProperties([out, retval] ShTvwManagedItemPropertiesConstants* pValue);
		[propput, id(DISPID_SHTVI_MANAGEDPROPERTIES), helpstring("Retrieves or sets which of the treeview item's properties are managed by the ShellTreeView control.")]
		HRESULT ManagedProperties([in] ShTvwManagedItemPropertiesConstants newValue);
		/// \brief <em>Retrieves the shell namespace that the item belongs to</em>
		///
		/// Retrieves the shell namespace that the item belongs to. If set to \c Nothing, the item doesn't
		/// belong to any namespace.
		///
		/// \remarks This property is read-only.
		///
		/// \sa TreeViewItemObject
		[propget, id(DISPID_SHTVI_NAMESPACE), helpstring("Retrieves the shell namespace that the item belongs to.")]
		HRESULT Namespace([out, retval] IShTreeViewNamespace** ppNamespace);
		/// \brief <em>Retrieves the namespace enumeration settings used to enumerate this item's sub-items</em>
		///
		/// Retrieves the namespace enumeration settings used to enumerate this item's sub-items. Will be
		/// \c Nothing, if the item's sub-items aren't managed by the control.
		///
		/// \remarks This property is read-only.
		///
		/// \sa INamespaceEnumSettings, IShTreeViewNamespace::NamespaceEnumSettings
		[propget, id(DISPID_SHTVI_NAMESPACEENUMSETTINGS), helpstring("Retrieves the namespace enumeration settings used to enumerate this item's sub-items.")]
		HRESULT NamespaceEnumSettings([out, retval] INamespaceEnumSettings** ppEnumSettings);
		/// \brief <em>Retrieves whether opening this item requires elevated rights</em>
		///
		/// Retrieves whether opening this item requires elevated rights.
		///
		/// \remarks Requires Windows Vista or newer.\n
		///          This property is read-only.
		///
		/// \sa IShTreeView::DisplayElevationShieldOverlays
		[propget, id(DISPID_SHTVI_REQUIRESELEVATION), helpstring("Retrieves whether opening this item requires elevated rights. Requires Windows Vista or newer."), nonbrowsable]
		HRESULT RequiresElevation([out, retval] VARIANT_BOOL* pValue);
		/// \brief <em>Retrieves the item's shell attributes</em>
		///
		/// Retrieves the item's shell attributes. Any combination of the values defined by the
		/// \c ItemShellAttributesConstants enumeration is valid.
		///
		/// \param[in] mask Specifies the shell attributes to check. Any combination of the values defined by
		///            the \c ItemShellAttributesConstants enumeration is valid.
		/// \param[in] validate If \c False, cached data may be used to handle the request; otherwise not.
		///
		/// \remarks This property is read-only.
		///
		/// \sa FileAttributes, ItemShellAttributesConstants
		[propget, id(DISPID_SHTVI_SHELLATTRIBUTES), helpstring("Retrieves the item's shell attributes."), nonbrowsable]
		HRESULT ShellAttributes([in, defaultvalue(0xFEFFE17F)] ItemShellAttributesConstants mask, [in, defaultvalue(0)] VARIANT_BOOL Validate, [out, retval] ItemShellAttributesConstants* pValue);
		/// \brief <em>Retrieves whether the item supports the creation of new folders as sub-items</em>
		///
		/// Retrieves whether the item supports the creation of new folders as sub-items. If \c True, it does;
		/// otherwise it doesn't.
		///
		/// \remarks This property is read-only.
		[propget, id(DISPID_SHTVI_SUPPORTSNEWFOLDERS), helpstring("Retrieves whether the item supports the creation of new folders as sub-items."), nonbrowsable]
		HRESULT SupportsNewFolders([out, retval] VARIANT_BOOL* pValue);
		/// \brief <em>Retrieves the treeview item's corresponding \c TreeViewItem object</em>
		///
		/// Retrieves the \c TreeViewItem object of this treeview item from the attached \c ExplorerTreeView
		/// control.
		///
		/// \remarks This property is read-only.
		///
		/// \sa Handle, Namespace
		[propget, id(DISPID_SHTVI_TREEVIEWITEMOBJECT), helpstring("Retrieves the 'TreeViewItem' object of this treeview item from the attached 'ExplorerTreeView' control.")]
		HRESULT TreeViewItemObject([out, retval] IDispatch** ppItem);

		/// \brief <em>Creates the item's shell context menu</em>
		///
		/// \return The shell context menu's handle.
		///
		/// \sa DisplayShellContextMenu, IShTreeView::CreateShellContextMenu,
		///     IShTreeViewItems::CreateShellContextMenu, IShTreeViewNamespace::CreateShellContextMenu,
		///     IShTreeView::DestroyShellContextMenu
		[id(DISPID_SHTVI_CREATESHELLCONTEXTMENU), helpstring("Creates the item's shell context menu.")]
		HRESULT CreateShellContextMenu([out, retval] OLE_HANDLE* pMenu);
		/// \brief <em>Opens the folder customization dialog for the item</em>
		///
		/// \sa Customizable
		[id(DISPID_SHTVI_CUSTOMIZE), helpstring("Opens the folder customization dialog for the item.")]
		HRESULT Customize(void);
		/// \brief <em>Displays the item's shell context menu</em>
		///
		/// \param[in] x The x-coordinate (in pixels) of the menu's position relative to the attached control's
		///            upper-left corner.
		/// \param[in] y The y-coordinate (in pixels) of the menu's position relative to the attached control's
		///            upper-left corner.
		///
		/// \sa CreateShellContextMenu, IShTreeView::DisplayShellContextMenu,
		///     IShTreeViewItems::DisplayShellContextMenu, IShTreeViewNamespace::DisplayShellContextMenu
		[id(DISPID_SHTVI_DISPLAYSHELLCONTEXTMENU), helpstring("Displays the item's shell context menu.")]
		HRESULT DisplayShellContextMenu([in] OLE_XPOS_PIXELS x, [in] OLE_YPOS_PIXELS y);
		/// \brief <em>Ensures that the item's sub-items have been loaded into the treeview if they are managed by \c ShellTreeView</em>
		///
		/// \c ShellTreeView loads items on demand, i. e. an item's sub-items are not inserted into the control
		/// until the item is expanded for the first time. If this method is called for an item that has not
		/// yet been expanded, it inserts the item's sub-items. Otherwise it does nothing.
		///
		/// \param[in] waitForLastItem If set to \c True, the method doesn't return before all work is done. If
		///            set to \c False, it may move the item enumeration to a background thread and return
		///            before all sub-items have been inserted.
		///
		/// \sa ManagedProperties
		[id(DISPID_SHTVI_ENSURESUBITEMSARELOADED), helpstring("Ensures that the item's sub-items have been loaded into the treeview if they are managed by 'ShellTreeView'.")]
		HRESULT EnsureSubItemsAreLoaded([in, defaultvalue(-1)] VARIANT_BOOL waitForLastItem);
		/// \brief <em>Executes the default command from the item's shell context menu</em>
		///
		/// \sa CreateShellContextMenu, DisplayShellContextMenu,
		///     IShTreeView::InvokeDefaultShellContextMenuCommand,
		///     IShTreeViewItems::InvokeDefaultShellContextMenuCommand
		[id(DISPID_SHTVI_INVOKEDEFAULTSHELLCONTEXTMENUCOMMAND), helpstring("Executes the default command from the item's shell context menu.")]
		HRESULT InvokeDefaultShellContextMenuCommand(void);
		/// \brief <em>Checks whether the shell item wrapped by this object still exists</em>
		///
		/// \return \c True if the shell item still exists; otherwise \c False.
		[id(DISPID_SHTVI_VALIDATE), helpstring("Checks whether the shell item wrapped by this object still exists.")]
		HRESULT Validate([out, retval] VARIANT_BOOL* pValue);

		#ifdef ACTIVATE_SECZONE_FEATURES
			/// \brief <em>Retrieves the Internet Explorer security zone the item belongs to</em>
			///
			/// Retrieves the Internet Explorer security zone the item belongs to.
			///
			/// \remarks This property is read-only.
			///
			/// \sa ISecurityZone
			[propget, id(DISPID_SHTVI_SECURITYZONE), helpstring("Retrieves the Internet Explorer security zone the item belongs to.")]
			HRESULT SecurityZone([out, retval] ISecurityZone** ppSecurityZone);
		#endif
	}


	/// \interface _IShTreeViewItemEvents
	/// \brief <em>The \c ShellTreeViewItem class' events interface</em>
	///
	/// This interface defines all events the \c ShellTreeViewItem class may raise.
	///
	/// \sa IShTreeViewItem
	[
		uuid(C81FD694-71D7-4faf-92E7-20E9DEB55133),
		helpstring("IShTreeViewItem-event-interface")
	]
	dispinterface _IShTreeViewItemEvents
	{
		properties:
		methods:
	};


	/// \brief <em>The \c ShellTreeViewItem class</em>
	///
	/// This COM class implements the \c IShTreeViewItem and \c _IShTreeViewItemEvents interfaces.
	///
	/// \sa IShTreeViewItem, _IShTreeViewItemEvents, ShellTreeView, ShellTreeViewItems
	[
		uuid(44DFDA73-1234-4f80-8D28-ABD7630AFB2C),
		version(1.5),
		noncreatable,
		helpstring("ShellTreeViewItem Class 1.5 (Unicode)")
	]
	coclass ShellTreeViewItem
	{
		[default] interface IShTreeViewItem;
		[default, source] dispinterface _IShTreeViewItemEvents;
	};


	/// \interface IShTreeViewItems
	/// \brief <em>Manages a collection of \c ShellTreeViewItem objects</em>
	///
	/// This interface provides easy access (including filtering) to collections of \c ShellTreeViewItem
	/// objects. A \c ShellTreeViewItems object is used to group items that have certain properties in
	/// common.
	///
	/// \sa _IShTreeViewItemsEvents, IShTreeViewItem, IShTreeView
	[
		object,
		uuid(2FEB3CE5-D496-4b4e-851D-D849DBF1DDEA),
		dual,
		nonextensible,
		helpstring("IShTreeViewItems interface"),
		pointer_default(unique)
	]
	interface IShTreeViewItems : IDispatch
	{
		/// \brief <em>Specifies whether filters for string properties are case sensitive</em>
		///
		/// Retrieves or sets whether string comparisons, that are done when applying the filters on an item,
		/// are case sensitive. If this property is set to \c True, string comparisons are case sensitive;
		/// otherwise not.
		///
		/// \sa Filter, ComparisonFunction
		[propget, id(DISPID_SHTVIS_CASESENSITIVEFILTERS), helpstring("Retrieves or sets whether string comparisons, that are done when applying the filters on an item, are case sensitive.")]
		HRESULT CaseSensitiveFilters([out, retval] VARIANT_BOOL* pValue);
		[propput, id(DISPID_SHTVIS_CASESENSITIVEFILTERS), helpstring("Retrieves or sets whether string comparisons, that are done when applying the filters on an item, are case sensitive.")]
		HRESULT CaseSensitiveFilters([in] VARIANT_BOOL newValue);
		/// \brief <em>Specifies a filter's comparison function</em>
		///
		/// Retrieves or sets an item filter's comparison function. This property takes the address of a
		/// function having the following signature:\n
		/// \code
		///   IsEqual(ByVal itemProperty As Long, ByVal pattern As Long) As Long
		/// \endcode
		/// This function must compare its arguments and return a non-zero value if the arguments are equal and
		/// zero otherwise.\n
		/// If this property is set to 0, the control compares the values itself using the "=" operator
		/// (\c lstrcmp and \c lstrcmpi for string filters).
		///
		/// \param[in] filteredProperty A value specifying the property that the filter refers to. Any of the
		///            values defined by the \c ShTvwFilteredPropertyConstants enumeration is valid.
		///
		/// \sa Filter, CaseSensitiveFilters, ShTvwFilteredPropertyConstants,
		///     <a href="https://msdn.microsoft.com/en-us/library/ms647488.aspx">lstrcmp</a>,
		///     <a href="https://msdn.microsoft.com/en-us/library/ms647489.aspx">lstrcmpi</a>
		[propget, id(DISPID_SHTVIS_COMPARISONFUNCTION), helpstring("Retrieves or sets an item filter's comparison function."), nonbrowsable]
		HRESULT ComparisonFunction([in] ShTvwFilteredPropertyConstants filteredProperty, [out, retval] LONG* pValue);
		[propput, id(DISPID_SHTVIS_COMPARISONFUNCTION), helpstring("Retrieves or sets an item filter's comparison function."), nonbrowsable]
		HRESULT ComparisonFunction([in] ShTvwFilteredPropertyConstants filteredProperty, [in] LONG newValue);
		/// \brief <em>Specifies a filter for a property</em>
		///
		/// Retrieves or sets an item filter.\n
		/// An \c IShTreeViewItems collection can be filtered by any of \c IShTreeViewItem's properties, that
		/// the \c ShTvwFilteredPropertyConstants enumeration defines a constant for. Combinations of multiple
		/// filters are possible, too. A filter is a \c Variant containing an array whose elements are of
		/// type \c Variant. Each element of this array contains a valid value for the property, that the
		/// filter refers to.\n
		/// When applying the filter, the elements of the array are connected using the logical Or operator.\n\n
		/// Setting this property to \c Empty or any other value, that doesn't match the described structure,
		/// deactivates the filter.
		///
		/// \param[in] filteredProperty A value specifying the property that the filter refers to. Any of the
		///            values defined by the \c ShTvwFilteredPropertyConstants enumeration is valid.
		///
		/// \sa FilterType, ComparisonFunction, ShTvwFilteredPropertyConstants
		[propget, id(DISPID_SHTVIS_FILTER), helpstring("Retrieves or sets an item filter.")]
		HRESULT Filter([in] ShTvwFilteredPropertyConstants filteredProperty, [out, retval] VARIANT* pValue);
		[propput, id(DISPID_SHTVIS_FILTER), helpstring("Retrieves or sets an item filter.")]
		HRESULT Filter([in] ShTvwFilteredPropertyConstants filteredProperty, [in] VARIANT newValue);
		/// \brief <em>Specifies a filter's type</em>
		///
		/// Retrieves or sets an item filter's type.
		///
		/// \param[in] filteredProperty A value specifying the property that the filter refers to. Any of the
		///            values defined by the \c ShTvwFilteredPropertyConstants enumeration is valid.
		///
		/// \sa Filter, ShTvwFilteredPropertyConstants, FilterTypeConstants
		[propget, id(DISPID_SHTVIS_FILTERTYPE), helpstring("Retrieves or sets an item filter's type.")]
		HRESULT FilterType([in] ShTvwFilteredPropertyConstants filteredProperty, [out, retval] FilterTypeConstants* pValue);
		[propput, id(DISPID_SHTVIS_FILTERTYPE), helpstring("Retrieves or sets an item filter's type.")]
		HRESULT FilterType([in] ShTvwFilteredPropertyConstants filteredProperty, [in] FilterTypeConstants newValue);
		/// \brief <em>Retrieves a \c ShellTreeViewItem object from the collection</em>
		///
		/// Retrieves a \c ShellTreeViewItem object from the collection that wraps the item identified by
		/// \c itemIdentifier.
		///
		/// \param[in] itemIdentifier A value that identifies the treeview item to be retrieved.
		/// \param[in] itemIdentifierType A value specifying the meaning of \c itemIdentifier. Any of the
		///            values defined by the \c ShTvwItemIdentifierTypeConstants enumeration is valid.
		///
		/// \remarks This is the default property of the \c IShTreeViewItem interface.\n
		///          This property is read-only.
		///
		/// \sa IShTreeViewItem, ShTvwItemIdentifierTypeConstants, Add, Remove, Contains
		[propget, id(DISPID_SHTVIS_ITEM), helpstring("Retrieves a 'ShellTreeViewItem' object from the collection that wraps the item identified by 'itemIdentifier'.")]
		HRESULT Item([in] VARIANT itemIdentifier, [in, defaultvalue(stiitHandle)] ShTvwItemIdentifierTypeConstants itemIdentifierType, [out, retval] IShTreeViewItem** ppItem);
		/// \if PRIVATEDOC
		///   \brief <em>Retrieves a \c VARIANT enumerator</em>
		///
		///   Retrieves a \c VARIANT enumerator that may be used to iterate the \c ShellTreeViewItem objects
		///   managed by this collection object. This iterator is used by Visual Basic's \c For...Each
		///   construct.
		///
		///   \remarks This property is read-only and hidden.
		///
		///   \sa <a href="https://msdn.microsoft.com/en-us/library/ms221053.aspx">IEnumVARIANT</a>
		/// \endif
		[propget, id(DISPID_SHTVIS__NEWENUM), restricted]
		HRESULT _NewEnum([out, retval] IUnknown** ppEnumerator);

		/// \brief <em>Adds a new shell treeview item to the treeview control</em>
		///
		/// Adds a shell treeview item with the specified properties at the specified position in the treeview
		/// control and returns a \c ShellTreeViewItem object wrapping the inserted item.
		///
		/// \param[in] pIDLOrParsingName The fully qualified pIDL or parsing name of the new item. The control
		///            takes ownership over the pIDL and will free it if the item is transformed into a normal
		///            treeview item.
		/// \param[in] parentItem The new item's immediate parent item. If set to 0, the item will be a
		///            top-level item.
		/// \param[in] insertAfter The new item's preceding item. This may be either a treeview item handle
		///            or a value defined by \c ExplorerTreeView's \c InsertAfterConstants enumeration. If set
		///            to 0, the item will be inserted after the last item that has the same immediate parent
		///            item.
		/// \param[in] managedProperties Specifies which of the treeview item's properties are managed by the
		///            \c ShellTreeView control rather than the treeview control/your application. Any
		///            combination of the values defined by the \c ShTvwManagedItemPropertiesConstants
		///            enumeration is valid. If set to -1, the value of the
		///            \c IShTreeView::DefaultManagedItemProperties property is used.
		/// \param[in] itemText The new item's caption text. The maximum number of characters in this text
		///            is 260. If set to \c vbNullString, the treeview control will fire its
		///            \c ItemGetDisplayInfo event each time this property's value is required.
		/// \param[in] hasExpando A value specifying whether to draw a "+" or "-" next to the item
		///            indicating the item has sub-items. Any of the values defined by \c ExplorerTreeView's
		///            \c HasExpandoConstants enumeration is valid. If set to \c heCallback, the treeview
		///            control will fire its \c ItemGetDisplayInfo event each time this property's value is
		///            required.
		/// \param[in] iconIndex The zero-based index of the item's icon in the treeview control's imagelist
		///            identified by \c IExplorerTreeView::hImageList. If set to -1, the treeview control will
		///            fire its \c ItemGetDisplayInfo event each time this property's value is required. A
		///            value of -2 means 'not specified' and is valid if there's no imagelist associated with
		///            the treeview control.
		/// \param[in] selectedIconIndex The zero-based index of the item's selected icon in the treeview
		///            control's imagelist identified by \c IExplorerTreeView::hImageList. This icon will be
		///            used instead of the normal icon identified by \c iconIndex if the item is the caret
		///            item. If set to -1, the treeview control will fire its \c ItemGetDisplayInfo event each
		///            time this property's value is required. If set to -2, the normal icon specified by
		///            \c iconIndex will be used.
		/// \param[in] expandedIconIndex The zero-based index of the item's expanded icon in the treeview
		///            control's imagelist identified by \c IExplorerTreeView::hImageList. This icon will be
		///            used instead of the normal icon identified by \c iconIndex if the item is expanded.
		///            If set to -1, the treeview control will fire its \c ItemGetDisplayInfo event each time
		///            this property's value is required. If set to -2, the normal icon specified by
		///            \c iconIndex will be used.
		/// \param[in] itemData A \c Long value that will be associated with the item.
		/// \param[in] isVirtual If set to \c True, the item will be treated as not existent when drawing the
		///            treeview and therefore won't be drawn. Instead its sub-items will be drawn at this
		///            item's position. If set to \c False, the item and its sub-items will be drawn normally.
		/// \param[in] heightIncrement The item's height in multiples of the treeview control's basic item
		///            height. E. g. a value of 2 means that the item will be twice as high as an item with
		///            \c heighIncrement set to 1.
		///
		/// \return The inserted item.
		///
		/// \remarks The \c expandedIconIndex and \c isVirtual parameters will be ignored if comctl32.dll is
		///          used in a version older than 6.10.
		///
		/// \sa AddExisting, Count, Remove, RemoveAll, IShTreeViewItem::FullyQualifiedPIDL,
		///     IShTreeView::DefaultManagedItemProperties, ShTvwManagedItemPropertiesConstants
		[id(DISPID_SHTVIS_ADD), helpstring("Adds a new shell treeview item to the treeview control.")]
		HRESULT Add([in] VARIANT pIDLOrParsingName, [in, defaultvalue(NULL)] OLE_HANDLE parentItem, [in, defaultvalue(NULL)] OLE_HANDLE insertAfter, [in, defaultvalue(-1)] ShTvwManagedItemPropertiesConstants ManagedProperties, [in, defaultvalue(NULL)] BSTR itemText, [in, defaultvalue(0)] LONG HasExpando, [in, defaultvalue(-2)] LONG IconIndex, [in, defaultvalue(-2)] LONG SelectedIconIndex, [in, defaultvalue(-2)] LONG ExpandedIconIndex, [in, defaultvalue(0)] LONG ItemData, [in, defaultvalue(0)] VARIANT_BOOL isVirtual, [in, defaultvalue(1)] LONG HeightIncrement, [out, retval] IShTreeViewItem** ppAddedItem);
		/// \brief <em>Transfers the specified treeview item into a shell treeview item</em>
		///
		/// Transfers a treeview item into a shell treeview item and returns a \c ShellTreeViewItem object
		/// wrapping the item.
		///
		/// \param[in] itemHandle The handle of the item to transfer. If the item already is a shell item,
		///            its pIDL is freed and replaced with the one specified by \c pIDLOrParsingName.
		/// \param[in] pIDLOrParsingName The fully qualified pIDL or parsing name of the item specified by
		///            \c itemHandle. The control takes ownership over the pIDL and will free it if the item is
		///            transformed back into a normal treeview item.
		/// \param[in] managedProperties Specifies which of the treeview item's properties are managed by the
		///            \c ShellTreeView control rather than the treeview control/your application. Any
		///            combination of the values defined by the \c ShTvwManagedItemPropertiesConstants
		///            enumeration is valid. If set to -1, the value of the
		///            \c IShTreeView::DefaultManagedItemProperties property is used.
		///
		/// \return The transfered item.
		///
		/// \sa Add, Count, Remove, RemoveAll, IShTreeViewItem::Handle, IShTreeViewItem::FullyQualifiedPIDL,
		///     IShTreeView::DefaultManagedItemProperties, ShTvwManagedItemPropertiesConstants
		[id(DISPID_SHTVIS_ADDEXISTING), helpstring("Transfers the specified treeview item into a shell treeview item.")]
		HRESULT AddExisting([in] OLE_HANDLE itemHandle, [in] VARIANT pIDLOrParsingName, [in, defaultvalue(-1)] ShTvwManagedItemPropertiesConstants ManagedProperties, [out, retval] IShTreeViewItem** ppAddedItem);
		/// \brief <em>Retrieves whether the specified item is part of the item collection</em>
		///
		/// \param[in] itemIdentifier A value that identifies the item to be checked.
		/// \param[in] itemIdentifierType A value specifying the meaning of \c itemIdentifier. Any of the
		///            values defined by the \c ShTvwItemIdentifierTypeConstants enumeration is valid.
		///
		/// \return \c True, if the specified item is part of the collection; otherwise \c False.
		///
		/// \sa Filter, Add, Remove, ShTvwItemIdentifierTypeConstants
		[id(DISPID_SHTVIS_CONTAINS), helpstring("Retrieves whether the specified item is part of the item collection.")]
		HRESULT Contains([in] VARIANT itemIdentifier, [in, defaultvalue(stiitHandle)] ShTvwItemIdentifierTypeConstants itemIdentifierType, [out, retval] VARIANT_BOOL* pValue);
		/// \brief <em>Counts the items in the collection</em>
		///
		/// Retrieves the number of \c ShellTreeViewItem objects in the collection.
		///
		/// \return The number of elements in the collection.
		///
		/// \sa Add, Remove, RemoveAll
		[id(DISPID_SHTVIS_COUNT), helpstring("Retrieves the number of 'ShellTreeViewItem' objects in the collection.")]
		HRESULT Count([out, retval] LONG* pValue);
		/// \brief <em>Creates the items' shell context menu</em>
		///
		/// \return The shell context menu's handle.
		///
		/// \sa DisplayShellContextMenu, IShTreeView::CreateShellContextMenu,
		///     IShTreeViewItem::CreateShellContextMenu, IShTreeViewNamespace::CreateShellContextMenu,
		///     IShTreeView::DestroyShellContextMenu
		[id(DISPID_SHTVIS_CREATESHELLCONTEXTMENU), helpstring("Creates the items' shell context menu.")]
		HRESULT CreateShellContextMenu([out, retval] OLE_HANDLE* pMenu);
		/// \brief <em>Displays the items' shell context menu</em>
		///
		/// \param[in] x The x-coordinate (in pixels) of the menu's position relative to the attached control's
		///            upper-left corner.
		/// \param[in] y The y-coordinate (in pixels) of the menu's position relative to the attached control's
		///            upper-left corner.
		///
		/// \sa CreateShellContextMenu, IShTreeView::DisplayShellContextMenu,
		///     IShTreeViewItem::DisplayShellContextMenu, IShTreeViewNamespace::DisplayShellContextMenu
		[id(DISPID_SHTVIS_DISPLAYSHELLCONTEXTMENU), helpstring("Displays the items' shell context menu.")]
		HRESULT DisplayShellContextMenu([in] OLE_XPOS_PIXELS x, [in] OLE_YPOS_PIXELS y);
		/// \brief <em>Executes the default command from the items' shell context menu</em>
		///
		/// \sa CreateShellContextMenu, DisplayShellContextMenu,
		///     IShTreeView::InvokeDefaultShellContextMenuCommand,
		///     IShTreeViewItem::InvokeDefaultShellContextMenuCommand
		[id(DISPID_SHTVIS_INVOKEDEFAULTSHELLCONTEXTMENUCOMMAND), helpstring("Executes the default command from the items' shell context menu.")]
		HRESULT InvokeDefaultShellContextMenuCommand(void);
		/// \brief <em>Removes the specified item from the collection</em>
		///
		/// \param[in] itemIdentifier A value that identifies the shell treeview item to be removed.
		/// \param[in] itemIdentifierType A value specifying the meaning of \c itemIdentifier. Any of the
		///            values defined by the \c ShTvwItemIdentifierTypeConstants enumeration is valid.
		/// \param[in] removeFromTreeView If \c True, the item is removed from the treeview control, too;
		///            otherwise it becomes a normal treeview item.
		///
		/// \sa Add, Count, RemoveAll, Contains, ShTvwItemIdentifierTypeConstants
		[id(DISPID_SHTVIS_REMOVE), helpstring("Removes the specified item from the collection.")]
		HRESULT Remove([in] VARIANT itemIdentifier, [in, defaultvalue(stiitHandle)] ShTvwItemIdentifierTypeConstants itemIdentifierType, [in, defaultvalue(-1)] VARIANT_BOOL removeFromTreeView);
		/// \brief <em>Removes all items from the collection</em>
		///
		/// \param[in] removeFromTreeView If \c True, the items are removed from the treeview control, too;
		///            otherwise they become normal treeview items.
		///
		/// \sa Add, Count, Remove
		[id(DISPID_SHTVIS_REMOVEALL), helpstring("Removes all items from the collection.")]
		HRESULT RemoveAll([in, defaultvalue(-1)] VARIANT_BOOL removeFromTreeView);
	}


	/// \interface _IShTreeViewItemsEvents
	/// \brief <em>The \c ShellTreeViewItems class' events interface</em>
	///
	/// This interface defines all events the \c ShellTreeViewItems class may raise.
	///
	/// \sa IShTreeViewItems
	[
		uuid(E90CD8CC-966A-4856-8287-00834FDFD004),
		helpstring("IShTreeViewItems-event-interface")
	]
	dispinterface _IShTreeViewItemsEvents
	{
		properties:
		methods:
	};


	/// \brief <em>The \c ShellTreeViewItems class</em>
	///
	/// This COM class implements the \c IShTreeViewItems and \c _IShTreeViewItemsEvents interfaces.
	///
	/// \sa IShTreeViewItems, _IShTreeViewItemsEvents, ShellTreeView, ShellTreeViewItem
	[
		uuid(6DEF82AF-8DB3-4add-8F58-0ECB8902EB26),
		version(1.5),
		noncreatable,
		helpstring("ShellTreeViewItems Class 1.5 (Unicode)")
	]
	coclass ShellTreeViewItems
	{
		[default] interface IShTreeViewItems;
		[default, source] dispinterface _IShTreeViewItemsEvents;
	};


	/// \interface IShTreeViewNamespace
	/// \brief <em>Wraps an existing shell namespace</em>
	///
	/// This interface is a wrapper around a shell namespace.
	///
	/// \sa _IShTreeViewNamespaceEvents, IShTreeViewNamespaces, IShTreeView
	[
		object,
		uuid(A738B851-2756-4621-BABD-F1C168B4B5A0),
		dual,
		nonextensible,
		helpstring("IShTreeViewNamespace interface"),
		pointer_default(unique)
	]
	interface IShTreeViewNamespace : IDispatch
	{
		/// \brief <em>Specifies whether the sub-tree represented by this namespace shall be sorted automatically</em>
		///
		/// Retrieves or sets whether the sub-tree represented by this namespace shall be sorted automatically.
		/// If this property is set to \c True, the sub-tree is sorted automatically; otherwise not.
		///
		/// \remarks On automatic sorting the items are sorted like in Windows Explorer.\n
		///          Shell items are inserted in front of other items.
		///
		/// \sa Items, SortItems, IShTreeView::ItemTypeSortOrder
		[propget, id(DISPID_SHTVNS_AUTOSORTITEMS), helpstring("Retrieves or sets whether the sub-tree represented by this namespace shall be sorted automatically.")]
		HRESULT AutoSortItems([out, retval] VARIANT_BOOL* pValue);
		[propput, id(DISPID_SHTVNS_AUTOSORTITEMS), helpstring("Retrieves or sets whether the sub-tree represented by this namespace shall be sorted automatically.")]
		HRESULT AutoSortItems([in] VARIANT_BOOL newValue);
		/// \brief <em>Retrieves whether the namespace can be customized via a Desktop.ini file</em>
		///
		/// Retrieves whether the namespace can be customized via a Desktop.ini file. If \c True, it can be
		/// customized; otherwise not.
		///
		/// \remarks This property is read-only.
		///
		/// \sa Customize
		[propget, id(DISPID_SHTVNS_CUSTOMIZABLE), helpstring("Retrieves whether the namespace can be customized via a Desktop.ini file."), nonbrowsable]
		HRESULT Customizable([out, retval] VARIANT_BOOL* pValue);
		/// \brief <em>Retrieves the zero-based index of the namespace's default display column</em>
		///
		/// Retrieves the zero-based index of the namespace's default display column. This column is the one
		/// that should be displayed if only one column is displayed.
		///
		/// \remarks This property is read-only.
		///
		/// \sa IShTreeViewItem::DefaultDisplayColumnIndex, DefaultSortColumnIndex
		[propget, id(DISPID_SHTVNS_DEFAULTDISPLAYCOLUMNINDEX), helpstring("Retrieves the zero-based index of the namespace's default display column."), nonbrowsable]
		HRESULT DefaultDisplayColumnIndex([out, retval] LONG* pValue);
		/// \brief <em>Retrieves the zero-based index of the namespace's default sort column</em>
		///
		/// Retrieves the zero-based index of the namespace's default sort column. This column is the one by
		/// which the namespace's items should be sorted initially.
		///
		/// \remarks This property is read-only.
		///
		/// \sa IShTreeViewItem::DefaultSortColumnIndex, DefaultDisplayColumnIndex
		[propget, id(DISPID_SHTVNS_DEFAULTSORTCOLUMNINDEX), helpstring("Retrieves the zero-based index of the namespace's default sort column."), nonbrowsable]
		HRESULT DefaultSortColumnIndex([out, retval] LONG* pValue);
		/// \brief <em>Retrieves the pIDL of the namespace's root</em>
		///
		/// Retrieves the fully qualified pIDL associated with this namespace.
		///
		/// \remarks The returned pIDL should NOT be freed!\n
		///          This is the default property of the \c IShTreeViewNamespace interface.\n
		///          This property is read-only.
		///
		/// \sa Index, ParentItemHandle, ShTvwNamespaceIdentifierTypeConstants
		[propget, id(DISPID_SHTVNS_FULLYQUALIFIEDPIDL), helpstring("Retrieves the fully qualified pIDL of the namespace's root. Do NOT free this pIDL!"), nonbrowsable]
		HRESULT FullyQualifiedPIDL([out, retval] LONG* pValue);
		/// \brief <em>Retrieves the namespace's zero-based index</em>
		///
		/// Retrieves a zero-based index identifying this namespace.
		///
		/// \remarks Adding or removing namespaces changes other namespaces' indexes.\n
		///          This property is read-only.
		///
		/// \sa FullyQualifiedPIDL, ShTvwNamespaceIdentifierTypeConstants
		[propget, id(DISPID_SHTVNS_INDEX), helpstring("Retrieves the namespace's zero-based index.")]
		HRESULT Index([out, retval] LONG* pValue);
		/// \brief <em>Retrieves the shell treeview items belonging to this namespace</em>
		///
		/// Retrieves a collection object wrapping the shell treeview items belonging to this namespace.
		///
		/// \remarks This property is read-only.
		///
		/// \sa IShTreeView::TreeItems, IShTreeViewItems
		[propget, id(DISPID_SHTVNS_ITEMS), helpstring("Retrieves a collection object wrapping the shell treeview items belonging to this namespace.")]
		HRESULT Items([out, retval] IShTreeViewItems** ppItems);
		/// \brief <em>Retrieves the namespace enumeration settings used to enumerate items</em>
		///
		/// Retrieves the namespace enumeration settings used to enumerate items within this namespace.
		///
		/// \remarks This property is read-only.
		///
		/// \sa INamespaceEnumSettings, IShTreeViewItem::NamespaceEnumSettings
		[propget, id(DISPID_SHTVNS_NAMESPACEENUMSETTINGS), helpstring("Retrieves the namespace enumeration settings used to enumerate items within this namespace.")]
		HRESULT NamespaceEnumSettings([out, retval] INamespaceEnumSettings** ppEnumSettings);
		/// \brief <em>Retrieves the handle of the treeview item that is the namespace's parent item</em>
		///
		/// Retrieves a handle identifying the treeview item that is the namespace's parent item.
		///
		/// \remarks A treeview item's handle will never change.\n
		///          This property is read-only.
		///
		/// \sa FullyQualifiedPIDL, ParentTreeViewItemObject
		[propget, id(DISPID_SHTVNS_PARENTITEMHANDLE), helpstring("Retrieves the handle of the treeview item that is the namespace's parent item."), nonbrowsable]
		HRESULT ParentItemHandle([out, retval] OLE_HANDLE* pValue);
		/// \brief <em>Retrieves the corresponding \c TreeViewItem object of the treeview item specified by the \c ParentItemHandle property</em>
		///
		/// Retrieves the \c TreeViewItem object of the treeview item specified by the \c ParentItemHandle
		/// property from the attached \c ExplorerTreeView control.
		///
		/// \remarks This property is read-only.
		///
		/// \sa ParentItemHandle
		[propget, id(DISPID_SHTVNS_PARENTTREEVIEWITEMOBJECT), helpstring("Retrieves the 'TreeViewItem' object of the treeview item specified by the 'ParentItemHandle' property from the attached 'ExplorerTreeView' control.")]
		HRESULT ParentTreeViewItemObject([out, retval] IDispatch** ppItem);
		/// \brief <em>Retrieves whether the namespace supports the creation of new folders as sub-items</em>
		///
		/// Retrieves whether the namespace supports the creation of new folders as sub-items. If \c True, it
		/// does; otherwise it doesn't.
		///
		/// \remarks This property is read-only.
		[propget, id(DISPID_SHTVNS_SUPPORTSNEWFOLDERS), helpstring("Retrieves whether the namespace supports the creation of new folders as sub-items."), nonbrowsable]
		HRESULT SupportsNewFolders([out, retval] VARIANT_BOOL* pValue);

		/// \brief <em>Creates the namespace's background shell context menu</em>
		///
		/// \return The shell context menu's handle.
		///
		/// \sa DisplayShellContextMenu, IShTreeView::CreateShellContextMenu,
		///     IShTreeViewItem::CreateShellContextMenu, IShTreeViewItems::CreateShellContextMenu,
		///     IShTreeView::DestroyShellContextMenu
		[id(DISPID_SHTVNS_CREATESHELLCONTEXTMENU), helpstring("Creates the namespace's background shell context menu.")]
		HRESULT CreateShellContextMenu([out, retval] OLE_HANDLE* pMenu);
		/// \brief <em>Opens the folder customization dialog for the namespace</em>
		///
		/// \sa Customizable
		[id(DISPID_SHTVNS_CUSTOMIZE), helpstring("Opens the folder customization dialog for the namespace.")]
		HRESULT Customize(void);
		/// \brief <em>Displays the namespace's background shell context menu</em>
		///
		/// \param[in] x The x-coordinate (in pixels) of the menu's position relative to the attached control's
		///            upper-left corner.
		/// \param[in] y The y-coordinate (in pixels) of the menu's position relative to the attached control's
		///            upper-left corner.
		///
		/// \sa CreateShellContextMenu, IShTreeView::DisplayShellContextMenu,
		///     IShTreeViewItem::DisplayShellContextMenu, IShTreeViewItems::DisplayShellContextMenu
		[id(DISPID_SHTVNS_DISPLAYSHELLCONTEXTMENU), helpstring("Displays the namespace's background shell context menu.")]
		HRESULT DisplayShellContextMenu([in] OLE_XPOS_PIXELS x, [in] OLE_YPOS_PIXELS y);
		/// \brief <em>Sorts the attached control's items</em>
		///
		/// Sorts the sub-tree represented by this namespace.\n
		/// \c ITreeViewItem::SortSubItems is called with the following parameters:
		/// - \c firstCriterion: \c sobShell
		/// - \c secondCriterion: \c sobText
		/// - \c thirdCriterion: \c sobCustom
		/// - \c fourthCriterion: \c sobNone
		/// - \c fifthCriterion: \c sobNone
		/// - \c recurse: As set using the \c recurse parameter.
		/// - \c caseSensitive: \c False
		///
		/// \param[in] recurse If set to \c False, only the namespace parent item's immediate sub-items will be
		///            sorted; otherwise all sub-items of the namespace will be sorted recursively.
		///
		/// \sa AutoSortItems, Items, IShTreeView::ItemTypeSortOrder
		[id(DISPID_SHTVNS_SORTITEMS), helpstring("Sorts the sub-tree represented by this namespace.")]
		HRESULT SortItems([in, defaultvalue(0)] VARIANT_BOOL recurse);

		#ifdef ACTIVATE_SECZONE_FEATURES
			/// \brief <em>Retrieves the Internet Explorer security zone the namespace belongs to</em>
			///
			/// Retrieves the Internet Explorer security zone the namespace belongs to.
			///
			/// \remarks This property is read-only.
			///
			/// \sa ISecurityZone
			[propget, id(DISPID_SHTVNS_SECURITYZONE), helpstring("Retrieves the Internet Explorer security zone the namespace belongs to.")]
			HRESULT SecurityZone([out, retval] ISecurityZone** ppSecurityZone);
		#endif
	}


	/// \interface _IShTreeViewNamespaceEvents
	/// \brief <em>The \c ShellTreeViewNamespace class' events interface</em>
	///
	/// This interface defines all events the \c ShellTreeViewNamespace class may raise.
	///
	/// \sa IShTreeViewNamespace
	[
		uuid(6615F8C0-5909-4081-A569-516C2B3262A7),
		helpstring("IShTreeViewNamespace-event-interface")
	]
	dispinterface _IShTreeViewNamespaceEvents
	{
		properties:
		methods:
	};


	/// \brief <em>The \c ShellTreeViewNamespace class</em>
	///
	/// This COM class implements the \c IShTreeViewNamespace and \c _IShTreeViewNamespaceEvents interfaces.
	///
	/// \sa IShTreeViewNamespace, _IShTreeViewNamespaceEvents, ShellTreeView, ShellTreeViewNamespaces
	[
		uuid(AA782A1C-3915-43bb-86BE-F4925D41C4D1),
		version(1.5),
		noncreatable,
		helpstring("ShellTreeViewNamespace Class 1.5 (Unicode)")
	]
	coclass ShellTreeViewNamespace
	{
		[default] interface IShTreeViewNamespace;
		[default, source] dispinterface _IShTreeViewNamespaceEvents;
	};


	/// \interface IShTreeViewNamespaces
	/// \brief <em>Manages a collection of \c ShellTreeViewNamespace objects</em>
	///
	/// This interface provides easy access (including filtering) to collections of \c ShellTreeViewNamespace
	/// objects. A \c ShellTreeViewNamespaces object is used to group shell namespaces that have certain
	/// properties in common.
	///
	/// \sa _IShTreeViewNamespacesEvents, IShTreeViewNamespace, IShTreeView
	[
		object,
		uuid(42134F93-C92B-452a-8EF7-9332B58FCB8C),
		dual,
		nonextensible,
		helpstring("IShTreeViewNamespaces interface"),
		pointer_default(unique)
	]
	interface IShTreeViewNamespaces : IDispatch
	{
		/// \brief <em>Retrieves a \c ShellTreeViewNamespace object from the collection</em>
		///
		/// Retrieves a \c ShellTreeViewNamespace object from the collection that wraps the item identified by
		/// \c namespaceIdentifier.
		///
		/// \param[in] namespaceIdentifier A value that identifies the namespace to be retrieved.
		/// \param[in] namespaceIdentifierType A value specifying the meaning of \c namespaceIdentifier. Any of
		///            the values defined by the \c ShTvwNamespaceIdentifierTypeConstants enumeration is valid.
		///
		/// \remarks This is the default property of the \c IShTreeViewNamespace interface.\n
		///          This property is read-only.
		///
		/// \sa IShTreeViewNamespace, ShTvwNamespaceIdentifierTypeConstants, Add, Remove, Contains
		[propget, id(DISPID_SHTVNSS_ITEM), helpstring("Retrieves a 'ShellTreeViewNamespace' object from the collection that wraps the item identified by 'namespaceIdentifier'.")]
		HRESULT Item([in] VARIANT namespaceIdentifier, [in, defaultvalue(stnsitExactPIDL)] ShTvwNamespaceIdentifierTypeConstants namespaceIdentifierType, [out, retval] IShTreeViewNamespace** ppNamespace);
		/// \if PRIVATEDOC
		///   \brief <em>Retrieves a \c VARIANT enumerator</em>
		///
		///   Retrieves a \c VARIANT enumerator that may be used to iterate the \c ShellTreeViewNamespace
		///   objects managed by this collection object. This iterator is used by Visual Basic's \c For...Each
		///   construct.
		///
		///   \remarks This property is read-only and hidden.
		///
		///   \sa <a href="https://msdn.microsoft.com/en-us/library/ms221053.aspx">IEnumVARIANT</a>
		/// \endif
		[propget, id(DISPID_SHTVNSS__NEWENUM), restricted]
		HRESULT _NewEnum([out, retval] IUnknown** ppEnumerator);

		/// \brief <em>Adds a new shell namespace to the treeview control</em>
		///
		/// Adds a shell namespace with the specified properties at the specified position in the treeview
		/// control and returns a \c ShellTreeViewNamespace object wrapping the inserted namespace.
		///
		/// \param[in] pIDLOrParsingName The fully qualified pIDL or parsing name of the namespace's parent
		///            shell item. The control takes ownership over the pIDL and will free it if the namespace
		///            is removed from the treeview.\n
		///            The shell item specified by \c pIDLOrParsingName won't be inserted into the treeview,
		///            but its sub-items will.
		/// \param[in] parentItem The new items' immediate parent item. If set to 0, the items will be
		///            top-level items.
		/// \param[in] insertAfter The new items' preceding item. This may be either a treeview item handle
		///            or a value defined by \c ExplorerTreeView's \c InsertAfterConstants enumeration. If set
		///            to 0, the items will be inserted after the last item that has the same immediate parent
		///            item.
		/// \param[in] enumerationSettings A \c NamespaceEnumSettings object specifying various item
		///            enumeration options for this namespace. If not specified, the control's default
		///            enumeration settings specified by \c IShTreeView::DefaultNamespaceEnumSettings are
		///            used.
		/// \param[in] autoSortItems Specifies whether the sub-tree represented by the new namespace shall be
		///            sorted automatically. If set to \c True, the sub-tree is sorted automatically; otherwise
		///            not.
		///
		/// \return The inserted namespace.
		///
		/// \remarks The items' \c ManagedProperties property is set to the value of the
		///          \c IShTreeView::DefaultManagedItemProperties property.\n
		///          On automatic sorting the items are sorted like in Windows Explorer; shell items are
		///          inserted in front of other items.
		///
		/// \sa Count, Remove, RemoveAll, IShTreeViewNamespace::FullyQualifiedPIDL, INamespaceEnumSettings,
		///     IShTreeView::DefaultNamespaceEnumSettings, IShTreeView::DefaultManagedItemProperties,
		///     IShTreeViewNamespace::AutoSortItems
		[id(DISPID_SHTVNSS_ADD), helpstring("Adds a new shell namespace to the treeview control.")]
		HRESULT Add([in] VARIANT pIDLOrParsingName, [in, defaultvalue(NULL)] OLE_HANDLE parentItem, [in, defaultvalue(NULL)] OLE_HANDLE insertAfter, [in, defaultvalue(NULL)] INamespaceEnumSettings* enumerationSettings, [in, defaultvalue(1)] VARIANT_BOOL AutoSortItems, [out, retval] IShTreeViewNamespace** ppAddedNamespace);
		/// \brief <em>Retrieves whether the specified namespace is part of the namespace collection</em>
		///
		/// \param[in] namespaceIdentifier A value that identifies the namespace to be checked.
		/// \param[in] namespaceIdentifierType A value specifying the meaning of \c namespaceIdentifier. Any of
		///            the values defined by the \c ShTvwNamespaceIdentifierTypeConstants enumeration is valid.
		///
		/// \return \c True, if the specified namespace is part of the collection; otherwise \c False.
		///
		/// \sa Add, Remove, ShTvwNamespaceIdentifierTypeConstants
		[id(DISPID_SHTVNSS_CONTAINS), helpstring("Retrieves whether the specified namespace is part of the namespace collection.")]
		HRESULT Contains([in] VARIANT namespaceIdentifier, [in, defaultvalue(stnsitExactPIDL)] ShTvwNamespaceIdentifierTypeConstants namespaceIdentifierType, [out, retval] VARIANT_BOOL* pValue);
		/// \brief <em>Counts the namespaces in the collection</em>
		///
		/// Retrieves the number of \c ShellTreeViewNamespace objects in the collection.
		///
		/// \return The number of elements in the collection.
		///
		/// \sa Add, Remove, RemoveAll
		[id(DISPID_SHTVNSS_COUNT), helpstring("Retrieves the number of 'ShellTreeViewNamespace' objects in the collection.")]
		HRESULT Count([out, retval] LONG* pValue);
		/// \brief <em>Removes the specified namespace from the collection</em>
		///
		/// \param[in] namespaceIdentifier A value that identifies the namespace to be removed.
		/// \param[in] namespaceIdentifierType A value specifying the meaning of \c namespaceIdentifier. Any of
		///            the values defined by the \c ShTvwNamespaceIdentifierTypeConstants enumeration is valid.
		/// \param[in] removeFromTreeView If \c True, the items are removed from the treeview control, too;
		///            otherwise they become normal treeview items.
		///
		/// \sa Add, Count, RemoveAll, Contains, ShTvwNamespaceIdentifierTypeConstants
		[id(DISPID_SHTVNSS_REMOVE), helpstring("Removes the specified namespace from the collection.")]
		HRESULT Remove([in] VARIANT namespaceIdentifier, [in, defaultvalue(stnsitExactPIDL)] ShTvwNamespaceIdentifierTypeConstants namespaceIdentifierType, [in, defaultvalue(-1)] VARIANT_BOOL removeFromTreeView);
		/// \brief <em>Removes all namespaces from the collection</em>
		///
		/// \param[in] removeFromTreeView If \c True, the items are removed from the treeview control, too;
		///            otherwise they become normal treeview items.
		///
		/// \sa Add, Count, Remove
		[id(DISPID_SHTVNSS_REMOVEALL), helpstring("Removes all namespaces from the collection.")]
		HRESULT RemoveAll([in, defaultvalue(-1)] VARIANT_BOOL removeFromTreeView);
	}


	/// \interface _IShTreeViewNamespacesEvents
	/// \brief <em>The \c ShellTreeViewNamespaces class' events interface</em>
	///
	/// This interface defines all events the \c ShellTreeViewNamespaces class may raise.
	///
	/// \sa IShTreeViewNamespaces
	[
		uuid(40533209-B539-4874-BDB4-F712CA0DCFF2),
		helpstring("IShTreeViewNamespaces-event-interface")
	]
	dispinterface _IShTreeViewNamespacesEvents
	{
		properties:
		methods:
	};


	/// \brief <em>The \c ShellTreeViewNamespaces class</em>
	///
	/// This COM class implements the \c IShTreeViewNamespaces and \c _IShTreeViewNamespacesEvents
	/// interfaces.
	///
	/// \sa IShTreeViewNamespaces, _IShTreeViewNamespacesEvents, ShellTreeView, ShellTreeViewNamespace
	[
		uuid(42586E75-6D3A-4713-B50B-0C5B8168AB99),
		version(1.5),
		noncreatable,
		helpstring("ShellTreeViewNamespaces Class 1.5 (Unicode)")
	]
	coclass ShellTreeViewNamespaces
	{
		[default] interface IShTreeViewNamespaces;
		[default, source] dispinterface _IShTreeViewNamespacesEvents;
	};


	/// \interface IShTreeView
	/// \brief <em>The main interface (shell treeview)</em>
	///
	/// This is the shell treeview control's main interface.
	///
	/// \sa _IShTreeViewEvents, IShListView
	[
		object,
		uuid(8F1C5D67-D347-456b-A2A2-978DAA9FFA9E),
		dual,
		nonextensible,
		helpstring("IShTreeView interface"),
		pointer_default(unique)
	]
	interface IShTreeView : IDispatch
	{
		/// \if PRIVATEDOC
		///   \brief <em>Retrieves the control's application ID</em>
		///
		///   Retrieves the control's application ID. This property is part of the fingerprint that
		///   uniquely identifies each software written by Timo "TimoSoft" Kunze.
		///
		///   \remarks This property is hidden and read-only.
		///
		///   \sa AppName, AppShortName, Build, CharSet, IsRelease, Programmer, Tester
		/// \endif
		[propget, id(DISPID_SHTVW_APPID), hidden]
		HRESULT AppID([out, retval] SHORT* pValue);
		/// \if PRIVATEDOC
		///   \brief <em>Retrieves the control's application name</em>
		///
		///   Retrieves the control's application name. This property is part of the fingerprint that
		///   uniquely identifies each software written by Timo "TimoSoft" Kunze.
		///
		///   \remarks This property is hidden and read-only.
		///
		///   \sa AppID, AppShortName, Build, CharSet, IsRelease, Programmer, Tester
		/// \endif
		[propget, id(DISPID_SHTVW_APPNAME), hidden]
		HRESULT AppName([out, retval] BSTR* pValue);
		/// \if PRIVATEDOC
		///   \brief <em>Retrieves the control's short application name</em>
		///
		///   Retrieves the control's short application name. This property is part of the fingerprint
		///   that uniquely identifies each software written by Timo "TimoSoft" Kunze.
		///
		///   \remarks This property is hidden and read-only.
		///
		///   \sa AppID, AppName, Build, CharSet, IsRelease, Programmer, Tester
		/// \endif
		[propget, id(DISPID_SHTVW_APPSHORTNAME), hidden]
		HRESULT AppShortName([out, retval] BSTR* pValue);
		/// \brief <em>Specifies whether label-edit mode is entered automatically for items that have been created through the shell new context menu</em>
		///
		/// If the control detects the creation of a new shell item, it can check how this item has been
		/// created. If the item has been created by selecting a menu item from the <em>New</em> sub menu of a
		/// namespace's background shell context menu, you may want to enter label-edit mode for the new item
		/// so the user can rename it immediately. This property retrieves or sets whether the control enters
		/// label-edit mode automatically in the described situation.\n
		/// If set to \c True, it enters label-edit mode automatically; otherwise not.
		///
		/// \remarks This feature won't work if the \c ProcessShellNotifications property is set to \c False.
		///
		/// \sa ProcessShellNotifications
		[propget, id(DISPID_SHTVW_AUTOEDITNEWITEMS), helpstring("Retrieves or sets whether label-edit mode is entered automatically for items that have been created through the shell new context menu.")]
		HRESULT AutoEditNewItems([out, retval] VARIANT_BOOL* pValue);
		[propput, id(DISPID_SHTVW_AUTOEDITNEWITEMS), helpstring("Retrieves or sets whether label-edit mode is entered automatically for items that have been created through the shell new context menu.")]
		HRESULT AutoEditNewItems([in] VARIANT_BOOL newValue);
		/// \if PRIVATEDOC
		///   \brief <em>Retrieves the control's build number</em>
		///
		///   Retrieves the control's build number. This property is part of the fingerprint
		///   that uniquely identifies each software written by Timo "TimoSoft" Kunze.
		///
		///   \remarks This property is hidden and read-only.
		///
		///   \sa Version, AppID, AppName, AppShortName, CharSet, IsRelease, Programmer, Tester
		/// \endif
		[propget, id(DISPID_SHTVW_BUILD), hidden]
		HRESULT Build([out, retval] LONG* pValue);
		/// \if PRIVATEDOC
		///   \brief <em>Retrieves the control's character set</em>
		///
		///   Retrieves the control's character set (Unicode or ANSI). This property is part of the
		///   fingerprint that uniquely identifies each software written by Timo "TimoSoft" Kunze.
		///
		///   \remarks This property is hidden and read-only.
		///
		///   \sa AppID, AppName, AppShortName, Build, IsRelease, Programmer, Tester
		/// \endif
		[propget, id(DISPID_SHTVW_CHARSET), hidden]
		HRESULT CharSet([out, retval] BSTR* pValue);
		/// \brief <em>Specifies whether compressed items are displayed in another color</em>
		///
		/// Retrieves or sets whether compressed items are displayed in another color. If set to \c True,
		/// compressed items are displayed in the system's color for compressed items; otherwise the normal
		/// text color is used.
		///
		/// \sa ColorEncryptedItems, IShTreeViewItem::ShellAttributes
		[propget, id(DISPID_SHTVW_COLORCOMPRESSEDITEMS), helpstring("Retrieves or sets whether compressed items are displayed in another color.")]
		HRESULT ColorCompressedItems([out, retval] VARIANT_BOOL* pValue);
		[propput, id(DISPID_SHTVW_COLORCOMPRESSEDITEMS), helpstring("Retrieves or sets whether compressed items are displayed in another color.")]
		HRESULT ColorCompressedItems([in] VARIANT_BOOL newValue);
		/// \brief <em>Specifies whether encrypted items are displayed in another color</em>
		///
		/// Retrieves or sets whether encrypted items are displayed in another color. If set to \c True,
		/// encrypted items are displayed in the system's color for encrypted items; otherwise the normal
		/// text color is used.
		///
		/// \sa ColorCompressedItems, IShTreeViewItem::ShellAttributes
		[propget, id(DISPID_SHTVW_COLORENCRYPTEDITEMS), helpstring("Retrieves or sets whether encrypted items are displayed in another color.")]
		HRESULT ColorEncryptedItems([out, retval] VARIANT_BOOL* pValue);
		[propput, id(DISPID_SHTVW_COLORENCRYPTEDITEMS), helpstring("Retrieves or sets whether encrypted items are displayed in another color.")]
		HRESULT ColorEncryptedItems([in] VARIANT_BOOL newValue);
		/// \brief <em>Specifies which of the treeview items' properties by default are managed by the \c ShellTreeView control</em>
		///
		/// Retrieves or sets a bit field specifying which of the treeview items' properties by default are
		/// managed by the \c ShellTreeView control rather than the treeview control/your application. Any
		/// combination of the values defined by the \c ShTvwManagedItemPropertiesConstants enumeration is
		/// valid.
		///
		/// \remarks The default settings are used for items that are inserted as part of a namespace or in
		///          response to shell notifications. Changing this property doesn't affect items that already
		///          have been inserted into the treeview.
		///
		/// \sa ProcessShellNotifications, IShTreeViewItem::ManagedProperties,
		///     IShTreeViewNamespaces::Add, ShTvwManagedItemPropertiesConstants
		[propget, id(DISPID_SHTVW_DEFAULTMANAGEDITEMPROPERTIES), helpstring("Retrieves or sets which of the treeview items' properties by default are managed by the ShellTreeView control."), nonbrowsable]
		HRESULT DefaultManagedItemProperties([out, retval] ShTvwManagedItemPropertiesConstants* pValue);
		[propput, id(DISPID_SHTVW_DEFAULTMANAGEDITEMPROPERTIES), helpstring("Retrieves or sets which of the treeview items' properties by default are managed by the ShellTreeView control."), nonbrowsable]
		HRESULT DefaultManagedItemProperties([in] ShTvwManagedItemPropertiesConstants newValue);
		/// \brief <em>Specifies the control's default namespace enumeration settings</em>
		///
		/// Retrieves or sets the control's default namespace enumeration settings.
		///
		/// \sa INamespaceEnumSettings, IShTreeViewItem::NamespaceEnumSettings,
		///     IShTreeViewNamespace::NamespaceEnumSettings
		[propget, id(DISPID_SHTVW_DEFAULTNAMESPACEENUMSETTINGS), helpstring("Retrieves or sets the control's default namespace enumeration settings.")]
		HRESULT DefaultNamespaceEnumSettings([out, retval] INamespaceEnumSettings** ppEnumSettings);
		[propputref, id(DISPID_SHTVW_DEFAULTNAMESPACEENUMSETTINGS), helpstring("Retrieves or sets the control's default namespace enumeration settings.")]
		HRESULT DefaultNamespaceEnumSettings([in] INamespaceEnumSettings* pEnumSettings);
		/// \brief <em>Controls which events are fired</em>
		///
		/// Retrieves or sets the events that won't be fired. Disabling events increases performance.
		/// Any combination of the values defined by the \c DisabledEventsConstants enumeration is valid.
		///
		/// \sa DisabledEventsConstants
		[propget, id(DISPID_SHTVW_DISABLEDEVENTS), helpstring("Retrieves or sets the events that won't be fired. Disabling events increases performance."), nonbrowsable]
		HRESULT DisabledEvents([out, retval] DisabledEventsConstants* pValue);
		[propput, id(DISPID_SHTVW_DISABLEDEVENTS), helpstring("Retrieves or sets the events that won't be fired. Disabling events increases performance."), nonbrowsable]
		HRESULT DisabledEvents([in] DisabledEventsConstants newValue);
		/// \brief <em>Controls the overlays displayed in thumbnail mode</em>
		///
		/// Retrieves or sets whether the elevation shield is displayed as overlay image, if the item requires
		/// elevation. If set to \c True, the elevation shield is displayed; otherwise not.
		///
		/// \remarks Requires Windows Vista or newer.
		///
		/// \sa IShTreeViewItem::RequiresElevation
		[propget, id(DISPID_SHTVW_DISPLAYELEVATIONSHIELDOVERLAYS), helpstring("Retrieves or sets whether the elevation shield is displayed as overlay image, if the item requires elevation. If the item has a thumbnail image and requires elevation, the executable's icon is displayed.")]
		HRESULT DisplayElevationShieldOverlays([out, retval] VARIANT_BOOL* pValue);
		[propput, id(DISPID_SHTVW_DISPLAYELEVATIONSHIELDOVERLAYS), helpstring("Retrieves or sets whether the elevation shield is displayed as overlay image, if the item requires elevation. If the item has a thumbnail image and requires elevation, the executable's icon is displayed.")]
		HRESULT DisplayElevationShieldOverlays([in] VARIANT_BOOL newValue);
		/// \brief <em>Specifies which parts of OLE drag'n'drop are handled automatically by the control</em>
		///
		/// Retrieves or sets which parts of OLE drag'n'drop are handled automatically. Any combination of the
		/// values defined by the \c HandleOLEDragDropConstants enumeration is valid.
		///
		/// \sa HandleOLEDragDropConstants
		[propget, id(DISPID_SHTVW_HANDLEOLEDRAGDROP), helpstring("Retrieves or sets which parts of OLE drag'n'drop are handled automatically.")]
		HRESULT HandleOLEDragDrop([out, retval] HandleOLEDragDropConstants* pValue);
		[propput, id(DISPID_SHTVW_HANDLEOLEDRAGDROP), helpstring("Retrieves or sets which parts of OLE drag'n'drop are handled automatically.")]
		HRESULT HandleOLEDragDrop([in] HandleOLEDragDropConstants newValue);
		/// \brief <em>Specifies how hidden items are displayed</em>
		///
		/// Retrieves or sets the display style of hidden shell items. Any of the values defined by the
		/// \c HiddenItemsStyleConstants enumeration is valid.
		///
		/// \remarks Setting this property to \c hisGhostedOnDemand increases performance, but the
		///          \c ITreeViewItem::Ghosted property always returns the <em>current</em> state which isn't
		///          necessarily correct until the item is initially drawn.\n
		///          Changing this property won't update existing shell items.
		///
		/// \sa HiddenItemsStyleConstants
		[propget, id(DISPID_SHTVW_HIDDENITEMSSTYLE), helpstring("Retrieves or sets the display style of hidden shell items.")]
		HRESULT HiddenItemsStyle([out, retval] HiddenItemsStyleConstants* pValue);
		[propput, id(DISPID_SHTVW_HIDDENITEMSSTYLE), helpstring("Retrieves or sets the display style of hidden shell items.")]
		HRESULT HiddenItemsStyle([in] HiddenItemsStyleConstants newValue);
		/// \brief <em>Specifies one of the control's associated image list</em>
		///
		/// Retrieves or sets the handle of the specified image list.
		///
		/// \param[in] imageList The image list to retrieve or set. Any of the values defined by the
		///            \c ImageListConstants enumeration is valid.
		///
		/// \remarks The previously set image list does NOT get destroyed automatically.
		///
		/// \sa UseSystemImageList, ImageListConstants
		[propget, id(DISPID_SHTVW_HIMAGELIST), helpstring("Retrieves or sets the handle to the specified image list."), nonbrowsable]
		HRESULT hImageList([in] ImageListConstants imageList, [out, retval] OLE_HANDLE* pValue);
		[propput, id(DISPID_SHTVW_HIMAGELIST), helpstring("Retrieves or sets the handle to the specified image list."), nonbrowsable]
		HRESULT hImageList([in] ImageListConstants imageList, [in] OLE_HANDLE newValue);
		/// \brief <em>Retrieves the associated treeview's window handle</em>
		///
		/// Retrieves the handle of the \c SysTreeView32 window that the object is currently attached to.
		///
		/// \remarks This property is read-only.
		///
		/// \sa hWndShellUIParentWindow, Attach, Detach
		[propget, id(DISPID_SHTVW_HWND), helpstring("Retrieves the handle of the 'SysTreeView32' window that the object is currently attached to."), nonbrowsable]
		HRESULT hWnd([out, retval] OLE_HANDLE* pValue);
		/// \brief <em>Specifies the parent window of any UI displayed by the shell</em>
		///
		/// Retrieves or sets the handle of the window that is used as parent window for any UI that the
		/// shell may display.
		///
		/// \remarks If this property is set to 0, many UI isn't displayed at all.
		///
		/// \sa hWnd
		[propget, id(DISPID_SHTVW_HWNDSHELLUIPARENTWINDOW), helpstring("Retrieves or sets the handle of the window that is used as parent window for any UI that the shell may display."), nonbrowsable]
		HRESULT hWndShellUIParentWindow([out, retval] OLE_HANDLE* pValue);
		[propput, id(DISPID_SHTVW_HWNDSHELLUIPARENTWINDOW), helpstring("Retrieves or sets the handle of the window that is used as parent window for any UI that the shell may display."), nonbrowsable]
		HRESULT hWndShellUIParentWindow([in] OLE_HANDLE newValue);
		/// \brief <em>Customizes the treeview items info tips managed by the \c ShellTreeView control</em>
		///
		/// Retrieves or sets a bit field influencing the treeview items info tips if they are managed by the
		/// \c ShellTreeView control. Any combination of the values defined by the \c InfoTipFlagsConstants
		/// enumeration is valid.
		///
		/// \sa IShTreeViewItem::ManagedProperties, IShTreeViewItem::InfoTipText, InfoTipFlagsConstants
		[propget, id(DISPID_SHTVW_INFOTIPFLAGS), helpstring("Retrieves or sets a bit field influencing the treeview items info tips if they are managed by the ShellTreeView control."), nonbrowsable]
		HRESULT InfoTipFlags([out, retval] InfoTipFlagsConstants* pValue);
		[propput, id(DISPID_SHTVW_INFOTIPFLAGS), helpstring("Retrieves or sets a bit field influencing the treeview items info tips if they are managed by the ShellTreeView control."), nonbrowsable]
		HRESULT InfoTipFlags([in] InfoTipFlagsConstants newValue);
		/// \if PRIVATEDOC
		///   \brief <em>Retrieves the control's release type</em>
		///
		///   Retrieves the control's release type. This property is part of the fingerprint
		///   that uniquely identifies each software written by Timo "TimoSoft" Kunze. If set to
		///   \c True, the control was compiled for release; otherwise it was compiled for debugging.
		///
		///   \remarks This property is hidden and read-only.
		///
		///   \sa AppID, AppName, AppShortName, Build, CharSet, Programmer, Tester
		/// \endif
		[propget, id(DISPID_SHTVW_ISRELEASE), hidden]
		HRESULT IsRelease([out, retval] VARIANT_BOOL* pValue);
		/// \brief <em>Controls when the \c ItemEnumerationTimedOut event is fired</em>
		///
		/// Retrieves or sets the number of milliseconds the enumeration of a namespace's items may take before
		/// the \c ItemEnumerationTimedOut event is fired. The value must be 1000 or greater. If this property
		/// is set to -1, the event isn't fired.
		///
		/// \sa _IShTreeViewEvents::ItemEnumerationTimedOut
		[propget, id(DISPID_SHTVW_ITEMENUMERATIONTIMEOUT), helpstring("Retrieves or sets the number of milliseconds the enumeration of a namespace's items may take before the 'ItemEnumerationTimedOut' event is fired.")]
		HRESULT ItemEnumerationTimeout([out, retval] LONG* pValue);
		[propput, id(DISPID_SHTVW_ITEMENUMERATIONTIMEOUT), helpstring("Retrieves or sets the number of milliseconds the enumeration of a namespace's items may take before the 'ItemEnumerationTimedOut' event is fired.")]
		HRESULT ItemEnumerationTimeout([in] LONG newValue);
		/// \brief <em>Controls the order of the different kinds of items when sorting</em>
		///
		/// Retrieves or sets the order of the different kinds of items (shell items, normal items) within the
		/// attached treeview control. This order is applied when sorting items. Any of the values defined by
		/// the \c ItemTypeSortOrderConstants enumeration is valid.
		///
		/// \sa IShTreeViewNamespace::AutoSortItems, IShTreeViewNamespace::SortItems,
		///     ItemTypeSortOrderConstants
		[propget, id(DISPID_SHTVW_ITEMTYPESORTORDER), helpstring("Retrieves or sets the order of the different kinds of items (shell items, normal items) within the attached treeview control.")]
		HRESULT ItemTypeSortOrder([out, retval] ItemTypeSortOrderConstants* pValue);
		[propput, id(DISPID_SHTVW_ITEMTYPESORTORDER), helpstring("Retrieves or sets the order of the different kinds of items (shell items, normal items) within the attached treeview control.")]
		HRESULT ItemTypeSortOrder([in] ItemTypeSortOrderConstants newValue);
		/// \brief <em>Specifies whether the keyboard input is validated during input when renaming an item</em>
		///
		/// Retrieves or sets whether characters, that are not allowed in the affected shell item's name, are
		/// recognized and declined at input time. If set to \c True, invalid characters are declined
		/// immediately and an info tip is displayed explaining that the character was invalid. If set to
		/// \c False, no characters are declined, but later the actual renaming will fail and an error message
		/// will be displayed.
		///
		/// \sa IShTreeViewItem::ManagedProperties, PreselectBasenameOnLabelEdit
		[propget, id(DISPID_SHTVW_LIMITLABELEDITINPUT), helpstring("Retrieves or sets whether characters, that are not allowed in the affected shell item's name, are recognized and declined at input time.")]
		HRESULT LimitLabelEditInput([out, retval] VARIANT_BOOL* pValue);
		[propput, id(DISPID_SHTVW_LIMITLABELEDITINPUT), helpstring("Retrieves or sets whether characters, that are not allowed in the affected shell item's name, are recognized and declined at input time.")]
		HRESULT LimitLabelEditInput([in] VARIANT_BOOL newValue);
		/// \brief <em>Specifies whether overlay icons are loaded on demand</em>
		///
		/// Retrieves or sets whether an item's overlay icon is loaded on demand or when adding the item. If
		/// this property is set to \c True, the overlay icon is loaded when it is needed; otherwise it is
		/// loaded when the item is added.
		///
		/// \remarks Loading overlay icons on demand is faster, but the \c ITreeViewItem::OverlayIndex property
		///          always returns the <em>current</em> overlay icon index which isn't necessarily correct until
		///          the item is initially drawn.\n
		///          Changing this property won't update existing shell items.
		///
		/// \sa IShTreeViewItem::ManagedProperties
		[propget, id(DISPID_SHTVW_LOADOVERLAYSONDEMAND), helpstring("Retrieves or sets whether an item's overlay icon is loaded on demand or when adding the item.")]
		HRESULT LoadOverlaysOnDemand([out, retval] VARIANT_BOOL* pValue);
		[propput, id(DISPID_SHTVW_LOADOVERLAYSONDEMAND), helpstring("Retrieves or sets whether an item's overlay icon is loaded on demand or when adding the item.")]
		HRESULT LoadOverlaysOnDemand([in] VARIANT_BOOL newValue);
		/// \brief <em>Retrieves the shell namespaces managed by this control</em>
		///
		/// Retrieves a collection object wrapping the shell namespaces managed by this control.
		///
		/// \remarks This property is read-only.
		///
		/// \sa TreeItems, IShTreeViewNamespaces
		[propget, id(DISPID_SHTVW_NAMESPACES), helpstring("Retrieves a collection object wrapping the shell namespaces managed by this control."), nonbrowsable]
		HRESULT Namespaces([out, retval] IShTreeViewNamespaces** ppNamespaces);
		/// \brief <em>Specifies whether the control selects the file name only when label-editing files</em>
		///
		/// Retrieves or sets whether the control selects the file name only when label-editing files. If set
		/// to \c True, the label-edit control contains the whole file name including the file extension, but
		/// only the base name without the extension is selected. If set to \c False, the whole file name
		/// including the file extension is selected.
		///
		/// \sa IShTreeViewItem::ManagedProperties, LimitLabelEditInput
		[propget, id(DISPID_SHTVW_PRESELECTBASENAMEONLABELEDIT), helpstring("Retrieves or sets whether the control selects the file name only when label-editing files.")]
		HRESULT PreselectBasenameOnLabelEdit([out, retval] VARIANT_BOOL* pValue);
		[propput, id(DISPID_SHTVW_PRESELECTBASENAMEONLABELEDIT), helpstring("Retrieves or sets whether the control selects the file name only when label-editing files.")]
		HRESULT PreselectBasenameOnLabelEdit([in] VARIANT_BOOL newValue);
		/// \brief <em>Specifies whether the control updates the shell items automatically</em>
		///
		/// Retrieves or sets whether the control checks for shell notifications and updates the shell items
		/// automatically on file deletions and similar actions. If set to \c True, shell notifications are
		/// processed; otherwise not.
		///
		/// \sa _IShTreeViewEvents::ChangedItemPIDL, _IShTreeViewEvents::ChangedNamespacePIDL
		[propget, id(DISPID_SHTVW_PROCESSSHELLNOTIFICATIONS), helpstring("Specifies whether the control updates the shell items automatically.")]
		HRESULT ProcessShellNotifications([out, retval] VARIANT_BOOL* pValue);
		[propput, id(DISPID_SHTVW_PROCESSSHELLNOTIFICATIONS), helpstring("Specifies whether the control updates the shell items automatically.")]
		HRESULT ProcessShellNotifications([in] VARIANT_BOOL newValue);
		/// \if PRIVATEDOC
		///   \brief <em>Retrieves the name(s) of the control's programmer(s)</em>
		///
		///   Retrieves the name(s) of the control's programmer(s). This property is part of the
		///   fingerprint that uniquely identifies each software written by Timo "TimoSoft" Kunze.
		///
		///   \remarks This property is hidden and read-only.
		///
		///   \sa AppID, AppName, AppShortName, Build, CharSet, IsRelease, Tester
		/// \endif
		[propget, id(DISPID_SHTVW_PROGRAMMER), hidden]
		HRESULT Programmer([out, retval] BSTR* pValue);
		/// \if PRIVATEDOC
		///   \brief <em>Retrieves the name(s) of the control's tester(s)</em>
		///
		///   Retrieves the name(s) of the control's tester(s). This property is part of the
		///   fingerprint that uniquely identifies each software written by Timo "TimoSoft" Kunze.
		///
		///   \remarks This property is hidden and read-only.
		///
		///   \sa AppID, AppName, AppShortName, Build, CharSet, IsRelease, Programmer
		/// \endif
		[propget, id(DISPID_SHTVW_TESTER), hidden]
		HRESULT Tester([out, retval] BSTR* pValue);
		/// \brief <em>Retrieves the attached treeview control's shell items</em>
		///
		/// Retrieves a collection object wrapping the treeview control's shell items.
		///
		/// \remarks This property is read-only.
		///
		/// \sa Namespaces, IShTreeViewItems
		[propget, id(DISPID_SHTVW_TREEITEMS), helpstring("Retrieves a collection object wrapping the attached treeview control's shell items."), nonbrowsable]
		HRESULT TreeItems([out, retval] IShTreeViewItems** ppItems);
		/// \brief <em>Specifies which kind of system icons are displayed</em>
		///
		/// Retrieves or sets when the control displays generic icons and when it displays item-specific icons.
		/// Any of the values defined by the \c UseGenericIconsConstants enumeration is valid.
		///
		/// \sa UseSystemImageList, UseGenericIconsConstants
		[propget, id(DISPID_SHTVW_USEGENERICICONS), helpstring("Retrieves or sets when the control displays generic icons and when it displays item-specific icons.")]
		HRESULT UseGenericIcons([out, retval] UseGenericIconsConstants* pValue);
		[propput, id(DISPID_SHTVW_USEGENERICICONS), helpstring("Retrieves or sets when the control displays generic icons and when it displays item-specific icons.")]
		HRESULT UseGenericIcons([in] UseGenericIconsConstants newValue);
		/// \brief <em>Specifies when the system imagelist is used</em>
		///
		/// Retrieves or sets a bit field indicating which of the attached treeview's imagelists are set to the
		/// system imagelist. Only 0 and \c usilSmallImageList (defined by the \c UseSystemImageListConstants
		/// enumeration) are valid.
		///
		/// \sa hImageList, UseGenericIcons, UseSystemImageListConstants
		[propget, id(DISPID_SHTVW_USESYSTEMIMAGELIST), helpstring("Retrieves or sets a bit field indicating which of the attached treeview's imagelists are set to the system imagelist."), nonbrowsable]
		HRESULT UseSystemImageList([out, retval] UseSystemImageListConstants* pValue);
		[propput, id(DISPID_SHTVW_USESYSTEMIMAGELIST), helpstring("Retrieves or sets a bit field indicating which of the attached treeview's imagelists are set to the system imagelist."), nonbrowsable]
		HRESULT UseSystemImageList([in] UseSystemImageListConstants newValue);
		/// \brief <em>Retrieves the control's version</em>
		///
		/// \remarks This property is read-only.
		[propget, id(DISPID_SHTVW_VERSION), helpstring("Retrieves the control's version."), nonbrowsable]
		HRESULT Version([out, retval] BSTR* pValue);

		/// \brief <em>Displays the control's credits</em>
		///
		/// Displays some information about this control and its author.
		[id(DISPID_SHTVW_ABOUT), helpstring("Displays some information about this control and its author.")]
		HRESULT About(void);
		/// \brief <em>Attaches the object to the specified \c SysTreeView32 window</em>
		///
		/// \param[in] hWnd The \c SysTreeView32 window to attach to.
		///
		/// \sa Detach, hWnd
		[id(DISPID_SHTVW_ATTACH), helpstring("Attaches the object to the specified 'SysTreeView32' window.")]
		HRESULT Attach([in] OLE_HANDLE hWnd);
		/// \brief <em>Compares two shell items</em>
		///
		/// \param[in] firstItem The first shell item to compare.
		/// \param[in] secondItem The second shell item to compare.
		/// \param[in] sortColumnIndex The zero-based index of the shell column by which to compare.
		///
		/// \return A negative value if the first item should preceed the second item; a positive value if the
		///         second item should preceed the first item; otherwise 0.
		///
		/// \sa IShTreeViewNamespace::SortItems, ShTvwManagedItemPropertiesConstants::stmipSubItemsSorting
		[id(DISPID_SHTVW_COMPAREITEMS), helpstring("Compares two shell items.")]
		HRESULT CompareItems([in] IShTreeViewItem* firstItem, [in] IShTreeViewItem* secondItem, [in, defaultvalue(0)] LONG sortColumnIndex, [out, retval] LONG* pResult);
		/// \brief <em>Creates a shell context menu</em>
		///
		/// \param[in] items An object specifying the treeview items for which to create the shell context
		///            menu. The following values may be used to identify the items:
		///            - A single item handle.
		///            - An array of item handles.
		///            - A \c TreeViewItem object.
		///            - A \c TreeViewItems object.
		///            - A \c TreeViewItemContainer object.
		///            - A \c ShellTreeViewItem object.
		///            - A \c ShellTreeViewItems object.
		///            To create the background context menu of a shell namespace, pass the
		///            \c ShellTreeViewNamespace object of the shell namespace.
		///
		/// \return The shell context menu's handle.
		///
		/// \sa DisplayShellContextMenu, IShTreeViewItem::CreateShellContextMenu,
		///     IShTreeViewItems::CreateShellContextMenu, IShTreeViewNamespace::CreateShellContextMenu,
		///     DestroyShellContextMenu
		[id(DISPID_SHTVW_CREATESHELLCONTEXTMENU), helpstring("Creates a shell context menu.")]
		HRESULT CreateShellContextMenu([in] VARIANT items, [out, retval] OLE_HANDLE* pMenu);
		/// \brief <em>Destroys the control's current shell context menu</em>
		///
		/// Destroys the shell context menu that was created by the last call to a \c CreateShellContextMenu
		/// method.
		///
		/// \sa CreateShellContextMenu, IShTreeViewItem::CreateShellContextMenu,
		///     IShTreeViewItems::CreateShellContextMenu, IShTreeViewNamespace::CreateShellContextMenu
		[id(DISPID_SHTVW_DESTROYSHELLCONTEXTMENU), helpstring("Destroys the shell context menu that was created by the last call to a 'CreateShellContextMenu' method.")]
		HRESULT DestroyShellContextMenu(void);
		/// \brief <em>Detaches the object from the \c SysTreeView32 window it is currently attached to</em>
		///
		/// \sa Attach, hWnd
		[id(DISPID_SHTVW_DETACH), helpstring("Detaches the object from the 'SysTreeView32' window it is currently attached to.")]
		HRESULT Detach(void);
		/// \brief <em>Displays a shell context menu</em>
		///
		/// \param[in] items An object specifying the treeview items for which to display the shell context
		///            menu. The following values may be used to identify the items:
		///            - A single item handle.
		///            - An array of item handles.
		///            - A \c TreeViewItem object.
		///            - A \c TreeViewItems object.
		///            - A \c TreeViewItemContainer object.
		///            - A \c ShellTreeViewItem object.
		///            - A \c ShellTreeViewItems object.
		///            To create the background context menu of a shell namespace, pass the
		///            \c ShellTreeViewNamespace object of the shell namespace.
		/// \param[in] x The x-coordinate (in pixels) of the menu's position relative to the attached control's
		///            upper-left corner.
		/// \param[in] y The y-coordinate (in pixels) of the menu's position relative to the attached control's
		///            upper-left corner.
		///
		/// \sa CreateShellContextMenu, IShTreeViewItem::DisplayShellContextMenu,
		///     IShTreeViewItems::DisplayShellContextMenu, IShTreeViewNamespace::DisplayShellContextMenu
		[id(DISPID_SHTVW_DISPLAYSHELLCONTEXTMENU), helpstring("Displays a shell context menu.")]
		HRESULT DisplayShellContextMenu([in] VARIANT items, [in] OLE_XPOS_PIXELS x, [in] OLE_YPOS_PIXELS y);
		/// \brief <em>Ensures that a specific shell item has been loaded into the treeview</em>
		///
		/// Walks the specified fully qualified pIDL or parsing name and inserts any items part of this path if
		/// they have not yet been inserted.
		///
		/// \param[in] pIDLOrParsingName The fully qualified pIDL or the fully qualified parsing name of the
		///            item to insert.
		///
		/// \return Returns the item identified by \c pIDLOrParsingName. If this item is invalid, its last
		///         valid parent item is returned.
		///
		/// \sa IShTreeViewItems::Add, DefaultNamespaceEnumSettings, IShTreeViewItem
		[id(DISPID_SHTVW_ENSUREITEMISLOADED), helpstring("Walks a fully qualified pIDL or parsing name and inserts any items part of this path if they have not yet been inserted.")]
		HRESULT EnsureItemIsLoaded([in] VARIANT pIDLOrParsingName, [out, retval] IShTreeViewItem** ppLastValidItem);
		/// \brief <em>Reloads all icons managed by \c ShellTreeView</em>
		///
		/// \param[in] includeOverlays If set to \c True, not only the icons managed by \c ShellTreeView are
		///            flushed, but also the overlay images; otherwise only the icons are flushed.
		///
		/// \sa ProcessShellNotifications
		[id(DISPID_SHTVW_FLUSHMANAGEDICONS), helpstring("Reloads all icons managed by 'ShellTreeView'.")]
		HRESULT FlushManagedIcons([in, defaultvalue(-1)] VARIANT_BOOL includeOverlays);
		/// \brief <em>Retrieves the specified shell menu item's description or verb</em>
		///
		/// Retrieves the help text and/or the language-independent command name of the specified shell context
		/// menu item. The help text may be displayed in a status bar if the menu item is selected; the command
		/// name ('verb') may be used to identify the command (the command ID may be different on different
		/// systems).
		///
		/// \param[in] commandID The unique ID of the context menu item.
		/// \param[in,out] itemDescription Receives the help text of the item specified by \c commandID.
		/// \param[in,out] itemVerb Receives the language-independent command name of the item specified by
		///                \c commandID.
		///
		/// \return \c True, if the menu item specified by \c commandID is a valid shell context menu item;
		///         otherwise \c False.
		///
		/// \remarks Many shell extensions (some being part of Windows) are not implemented correctly.
		///          Therefore the method may report an invalid menu item although the item is a valid shell
		///          context menu item and valid strings are returned.
		///
		/// \sa _IShTreeViewEvents::ChangedContextMenuSelection
		[id(DISPID_SHTVW_GETSHELLCONTEXTMENUITEMSTRING), helpstring("Retrieves the help text and/or the language-independent command name ('verb') of the specified shell context menu item.")]
		HRESULT GetShellContextMenuItemString([in] LONG commandID, [in, out, optional] VARIANT* itemDescription, [in, out, optional] VARIANT* itemVerb, [out, retval] VARIANT_BOOL* pCommandIDWasValid);
		/// \brief <em>Executes the default command from the specified items' shell context menu</em>
		///
		/// \param[in] items An object specifying the treeview items for which to execute the command.
		///            The following values may be used to identify the items:
		///            - A single item handle.
		///            - An array of item handles.
		///            - A \c TreeViewItem object.
		///            - A \c TreeViewItems object.
		///            - A \c TreeViewItemContainer object.
		///            - A \c ShellTreeViewItem object.
		///            - A \c ShellTreeViewItems object.
		///
		/// \sa CreateShellContextMenu, DisplayShellContextMenu,
		///     IShTreeViewItem::InvokeDefaultShellContextMenuCommand,
		///     IShTreeViewItems::InvokeDefaultShellContextMenuCommand
		[id(DISPID_SHTVW_INVOKEDEFAULTSHELLCONTEXTMENUCOMMAND), helpstring("Executes the default command from the items' shell context menu.")]
		HRESULT InvokeDefaultShellContextMenuCommand([in] VARIANT items);
		/// \brief <em>Loads the control's settings from the specified file</em>
		///
		/// \param[in] file The file to read from.
		///
		/// \return \c True if the settings could be loaded; otherwise \c False.
		///
		/// \sa SaveSettingsToFile
		[id(DISPID_SHTVW_LOADSETTINGSFROMFILE), helpstring("Loads the control's settings from the specified file.")]
		HRESULT LoadSettingsFromFile([in] BSTR file, [out, retval] VARIANT_BOOL* pSucceeded);
		/// \brief <em>Saves the control's settings to the specified file</em>
		///
		/// \param[in] file The file to write to.
		///
		/// \return \c True if the settings could be saved; otherwise \c False.
		///
		/// \sa LoadSettingsFromFile
		[id(DISPID_SHTVW_SAVESETTINGSTOFILE), helpstring("Saves the control's settings to the specified file.")]
		HRESULT SaveSettingsToFile([in] BSTR file, [out, retval] VARIANT_BOOL* pSucceeded);

	  #ifdef ACTIVATE_SECZONE_FEATURES
			/// \brief <em>Retrieves the Internet Explorer security zones</em>
			///
			/// Retrieves a collection object wrapping the Internet Explorer security zones.
			///
			/// \remarks This property is read-only.
			///
			/// \sa ISecurityZones
			[propget, id(DISPID_SHTVW_SECURITYZONES), helpstring("Retrieves a collection object wrapping the Internet Explorer security zones."), nonbrowsable]
			HRESULT SecurityZones([out, retval] ISecurityZones** ppZones);
		#endif
	}


	/// \interface _IShTreeViewEvents
	/// \author Timo "TimoSoft" Kunze
	/// \brief <em>The \c ShellTreeView class' events interface</em>
	///
	/// This interface defines all events the \c ShellTreeView class may raise.
	///
	/// \sa IShTreeView
	[
		uuid(DA2A9042-D7A5-4225-B5F8-8D9861D34EEA),
		helpstring("IShTreeView-event-interface")
	]
	dispinterface _IShTreeViewEvents
	{
		properties:
		methods:
			/// \brief <em>The item selection in a context menu has changed</em>
			///
			/// Will be fired after the menu item selection in a context menu has changed. This event may be used
			/// to display a description of the selected command.
			///
			/// \param[in] hContextMenu The handle of the context menu. Will be 0 if the menu is closed.
			/// \param[in] commandID The ID of the new selected menu item. May be 0.
			/// \param[in] isCustomMenuItem If \c False, the selected menu item has been inserted by
			///            \c ShellListView; otherwise it is a custom menu item.
			///
			/// \sa SelectedShellContextMenuItem, IShTreeView::GetShellContextMenuItemString
			[id(DISPID_SHTVWE_CHANGEDCONTEXTMENUSELECTION), helpstring("Will be fired after the menu item selection in a context menu has changed. This event may be used to display a description of the selected command.")]
			void ChangedContextMenuSelection(OLE_HANDLE hContextMenu, LONG commandID, VARIANT_BOOL isCustomMenuItem);
			/// \brief <em>An item's pIDL has changed</em>
			///
			/// Will be fired after an item's fully qualified pIDL was changed.
			///
			/// \param[in] treeItem The item that was updated.
			/// \param[in] previousPIDL The item's previous fully qualified pIDL.
			/// \param[in] newPIDL The item's new fully qualified pIDL.
			///
			/// \remarks This event may be disabled.
			///
			/// \sa ChangedNamespacePIDL, IShTreeViewItem::FullyQualifiedPIDL, IShTreeView::DisabledEvents
			[id(DISPID_SHTVWE_CHANGEDITEMPIDL), helpstring("Will be fired after an item's fully qualified pIDL was changed. This event may be disabled.")]
			void ChangedItemPIDL(IShTreeViewItem* treeItem, LONG previousPIDL, LONG newPIDL);
			/// \brief <em>A namespace's pIDL has changed</em>
			///
			/// Will be fired after a namespace's fully qualified pIDL was changed.
			///
			/// \param[in] namespace The namespace that was updated.
			/// \param[in] previousPIDL The namespace's previous fully qualified pIDL.
			/// \param[in] newPIDL The namespace's new fully qualified pIDL.
			///
			/// \remarks This event may be disabled.
			///
			/// \sa ChangedItemPIDL, IShTreeViewNamespace::FullyQualifiedPIDL, IShTreeView::DisabledEvents
			[id(DISPID_SHTVWE_CHANGEDNAMESPACEPIDL), helpstring("Will be fired after a namespace's fully qualified pIDL was changed. This event may be disabled.")]
			void ChangedNamespacePIDL(IShTreeViewNamespace* namespace, LONG previousPIDL, LONG newPIDL);
			/// \brief <em>A shell context menu has been created and is about to be displayed</em>
			///
			/// Will be fired after a shell context menu has been created and before it is displayed. This event
			/// may be used to add custom menu items.
			///
			/// \param[in] items The items the context menu refers to. \c This is a TreeViewItemContainer object.
			/// \param[in] hContextMenu The handle of the context menu.
			/// \param[in] minimumCustomCommandID The lowest command ID that may be used for custom menu items.
			///            For custom menu items any command ID larger or equal this value and smaller or equal
			///            65535 may be used.
			/// \param[in,out] cancelMenu If set to \c True, the context menu is canceled and won't be displayed.
			///                If set to \c False, the control will popup the menu.
			///
			/// \sa CreatingShellContextMenu, DestroyingShellContextMenu, SelectedShellContextMenuItem
			[id(DISPID_SHTVWE_CREATEDSHELLCONTEXTMENU), helpstring("Will be fired after a shell context menu has been created and before it is displayed. This event may be used to add custom menu items.")]
			void CreatedShellContextMenu(IDispatch* items, OLE_HANDLE hContextMenu, LONG minimumCustomCommandID, VARIANT_BOOL* cancelMenu);
			/// \brief <em>A shell context menu is about to be created</em>
			///
			/// Will be fired before a shell context menu is created.
			///
			/// \param[in] items The items the context menu refers to. \c This is a TreeViewItemContainer object.
			/// \param[in,out] contextMenuStyle A bit field influencing the content of the context menu. Any
			///                combination of the values defined by the \c ShellContextMenuStyleConstants
			///                enumeration is valid.
			/// \param[in,out] cancel If set to \c True, the menu creation is aborted and no shell context menu
			///                is displayed. If set to \c False, the menu is created and the control proceeds
			///                displaying it.
			///
			/// \sa CreatedShellContextMenu, ShellContextMenuStyleConstants
			[id(DISPID_SHTVWE_CREATINGSHELLCONTEXTMENU), helpstring("Will be fired before a shell context menu is created.")]
			void CreatingShellContextMenu(IDispatch* items, ShellContextMenuStyleConstants* contextMenuStyle, VARIANT_BOOL* cancel);
			/// \brief <em>A shell context menu is about to be destroyed</em>
			///
			/// Will be fired before a shell context menu is destroyed. Any resources used for custom menu items
			/// should be freed here.
			///
			/// \param[in] items The items the context menu refers to. \c This is a TreeViewItemContainer object.
			/// \param[in] hContextMenu The handle of the context menu.
			///
			/// \sa CreatingShellContextMenu
			[id(DISPID_SHTVWE_DESTROYINGSHELLCONTEXTMENU), helpstring("Will be fired before a shell context menu is destroyed. Any resources used for custom menu items should be freed here.")]
			void DestroyingShellContextMenu(IDispatch* items, OLE_HANDLE hContextMenu);
			/// \brief <em>An item was inserted</em>
			///
			/// Will be fired after a new item was inserted.
			///
			/// \param[in] treeItem The item that was inserted.
			///
			/// \remarks This event may be disabled.
			///
			/// \sa InsertingItem, InsertedNamespace, RemovingItem, IShTreeViewItem, IShTreeView::DisabledEvents
			[id(DISPID_SHTVWE_INSERTEDITEM), helpstring("Will be fired after a new item was inserted. This event may be disabled.")]
			void InsertedItem(IShTreeViewItem* treeItem);
			/// \brief <em>A namespace was inserted</em>
			///
			/// Will be fired after a new namespace was inserted.
			///
			/// \param[in] namespace The namespace that was inserted.
			///
			/// \remarks This event may be disabled.
			///
			/// \sa InsertedItem, RemovingNamespace, IShTreeViewNamespace, IShTreeView::DisabledEvents
			[id(DISPID_SHTVWE_INSERTEDNAMESPACE), helpstring("Will be fired after a new namespace was inserted. This event may be disabled.")]
			void InsertedNamespace(IShTreeViewNamespace* namespace);
			/// \brief <em>An item is about to be inserted</em>
			///
			/// Will be fired before a new item is inserted.
			///
			/// \param[in] parentItemHandle The handle of the item that will be the immediate parent of the new
			///            item. If 0, the item will become a root item.
			/// \param[in] fullyQualifiedPIDL The fully qualified pIDL of the item being inserted.
			/// \param[in,out] cancelInsertion If set to \c True, insertion is aborted, i. e. the item
			///                isn't inserted. If set to \c False, the item is inserted.
			///
			/// \remarks This event may be disabled.
			///
			/// \sa InsertedItem, RemovingItem, IShTreeView::DisabledEvents
			[id(DISPID_SHTVWE_INSERTINGITEM), helpstring("Will be fired before a new item is inserted. This event may be disabled.")]
			void InsertingItem(OLE_HANDLE ParentItemHandle, LONG FullyQualifiedPIDL, VARIANT_BOOL* cancelInsertion);
			/// \brief <em>A shell context menu command has been invoked</em>
			///
			/// Will be fired after a shell context menu command has been invoked.
			///
			/// \param[in] items The items the context menu refers to. \c This is a TreeViewItemContainer object.
			/// \param[in] hContextMenu The handle of the context menu.
			/// \param[in] commandID The command ID identifying the command.
			/// \param[in] usedWindowMode A value specifying how to display the window that may be opened
			///            when executing the command. Any of the values defined by the \c WindowModeConstants
			///            enumeration is valid.
			/// \param[in] usedInvocationFlags A bit field controlling command execution. Any combination of
			///            the values defined by the \c CommandInvocationFlagsConstants enumeration is valid.
			///
			/// \sa SelectedShellContextMenuItem, WindowModeConstants, CommandInvocationFlagsConstants
			[id(DISPID_SHTVWE_INVOKEDSHELLCONTEXTMENUCOMMAND), helpstring("Will be fired after a shell context menu command has been invoked.")]
			void InvokedShellContextMenuCommand(IDispatch* items, OLE_HANDLE hContextMenu, LONG commandID, WindowModeConstants usedWindowMode, CommandInvocationFlagsConstants usedInvocationFlags);
			/// \brief <em>The enumeration of the specified namespace's items has been completed</em>
			///
			/// Will be fired if the enumeration of a namespace's items has been completed. You may want to use
			/// this event to hide animations setup in the \c ItemEnumerationStarted or
			/// \c ItemEnumerationTimedOut event handler.
			///
			/// \param[in] namespace The namespace whose items have been enumerated. If the event refers to a
			///            namespace, this is a \c ShellTreeViewNamespace object. If it refers to an item's
			///            sub-items, this is a \c ShellTreeViewItem object wrapping the item whose sub-items
			///            have been enumerated.
			/// \param[in] aborted Specifies whether the enumeration has been aborted, e. g. because you have
			///            removed the namespace before it completed. If \c True, the enumeration has been
			///            aborted; otherwise not.
			///
			/// \sa ItemEnumerationStarted, ItemEnumerationTimedOut, IShTreeViewNamespace, IShTreeViewItem,
			///     IShTreeView::ItemEnumerationTimeout
			[id(DISPID_SHTVWE_ITEMENUMERATIONCOMPLETED), helpstring("Will be fired if the enumeration of a namespace's items has been completed.")]
			void ItemEnumerationCompleted(IDispatch* namespace, VARIANT_BOOL aborted);
			/// \brief <em>The enumeration of the specified namespace's items has been started</em>
			///
			/// Will be fired if the enumeration of a namespace's items has been started. You may want to use
			/// this event to display some kind of "Please wait" UI, e. g. an animation.
			///
			/// \param[in] namespace The namespace whose items are being enumerated. If the event refers to a
			///            namespace, this is a \c ShellTreeViewNamespace object. If it refers to an item's
			///            sub-items, this is a \c ShellTreeViewItem object wrapping the item whose sub-items
			///            are being enumerated.
			///
			/// \sa ItemEnumerationTimedOut, ItemEnumerationCompleted, IShTreeViewNamespace, IShTreeViewItem,
			///     IShTreeView::ItemEnumerationTimeout
			[id(DISPID_SHTVWE_ITEMENUMERATIONSTARTED), helpstring("Will be fired if the enumeration of a namespace's items has been started.")]
			void ItemEnumerationStarted(IDispatch* namespace);
			/// \brief <em>The enumeration of the specified namespace's items timed out</em>
			///
			/// Will be fired if the enumeration of a namespace's items is taking longer than allowed by the
			/// \c ItemEnumerationTimeout property. You may use this event to display some kind of "Please wait"
			/// UI, e. g. an animation. <strong>The item enumeration doesn't stop when this event is
			/// fired.</strong>
			///
			/// \param[in] namespace The namespace whose items are being enumerated. If the event refers to a
			///            namespace, this is a \c ShellTreeViewNamespace object. If it refers to an item's
			///            sub-items, this is a \c ShellTreeViewItem object wrapping the item whose sub-items
			///            are being enumerated.
			///
			/// \sa ItemEnumerationStarted, ItemEnumerationCompleted, IShTreeViewNamespace, IShTreeViewItem,
			///     IShTreeView::ItemEnumerationTimeout
			[id(DISPID_SHTVWE_ITEMENUMERATIONTIMEDOUT), helpstring("Will be fired if the enumeration of a namespace's items is taking longer than allowed by the 'ItemEnumerationTimeout' property.")]
			void ItemEnumerationTimedOut(IDispatch* namespace);
			/// \brief <em>An item is about to be removed</em>
			///
			/// Will be fired before an item is removed.
			///
			/// \param[in] treeItem The item that is about to be removed. If \c Nothing, all items are removed.
			///
			/// \remarks This event may be disabled.
			///
			/// \sa RemovingNamespace, InsertedItem, IShTreeViewItem, IShTreeView::DisabledEvents
			[id(DISPID_SHTVWE_REMOVINGITEM), helpstring("Will be fired before an item is removed. If 'treeItem' is 'Nothing', all items are removed. This event may be disabled.")]
			void RemovingItem(IShTreeViewItem* treeItem);
			/// \brief <em>A namespace is about to be removed</em>
			///
			/// Will be fired before a namespace is removed.
			///
			/// \param[in] namespace The namespace that is about to be removed. If \c Nothing, all namespaces are
			///            removed.
			///
			/// \remarks This event may be disabled.
			///
			/// \sa RemovingItem, InsertedNamespace, IShTreeViewNamespace, IShTreeView::DisabledEvents
			[id(DISPID_SHTVWE_REMOVINGNAMESPACE), helpstring("Will be fired before a namespace is removed. If 'namespace' is 'Nothing', all namespaces are removed. This event may be disabled.")]
			void RemovingNamespace(IShTreeViewNamespace* namespace);
			/// \brief <em>A context menu item has been selected and is about to be executed</em>
			///
			/// Will be fired after a context menu item has been selected and before it is executed. This event
			/// may be used to execute custom menu items.
			///
			/// \param[in] items The items the context menu refers to. \c This is a TreeViewItemContainer object.
			/// \param[in] hContextMenu The handle of the context menu.
			/// \param[in] commandID The command ID identifying the selected command.
			/// \param[in,out] windowModeToUse A value specifying how to display the window that may be opened
			///                when executing the command. Any of the values defined by the
			///                \c WindowModeConstants enumeration is valid.
			/// \param[in,out] invocationFlagsToUse A bit field controlling command execution. Any combination of
			///                the values defined by the \c CommandInvocationFlagsConstants enumeration is valid.
			/// \param[in,out] executeCommand If set to \c True, the menu item is executed; otherwise not.\n
			///                If the menu item is a custom one, this value is ignored and always treated as
			///                being set to \c False.
			///
			/// \sa InvokedShellContextMenuCommand, ChangedContextMenuSelection, CreatedShellContextMenu,
			///     WindowModeConstants, CommandInvocationFlagsConstants
			[id(DISPID_SHTVWE_SELECTEDSHELLCONTEXTMENUITEM), helpstring("Will be fired after a context menu item has been selected and before it is executed. This event may be used to execute custom menu items.")]
			void SelectedShellContextMenuItem(IDispatch* items, OLE_HANDLE hContextMenu, LONG commandID, WindowModeConstants* windowModeToUse, CommandInvocationFlagsConstants* invocationFlagsToUse, VARIANT_BOOL* executeCommand);
	};


	/// \brief <em>The \c ShellTreeView class</em>
	///
	/// The shell treeview control's main COM class. It implements the \c IShTreeView and
	/// \c _IShTreeViewEvents interfaces.
	///
	/// \sa IShTreeView, _IShTreeViewEvents
	[
		uuid(F721AB69-1C9F-4c49-9C08-F9B6690CB8BC),
		version(1.5),
		noncreatable,
		helpstring("ShellTreeView Control 1.5 (Unicode)")
	]
	coclass ShellTreeView
	{
		[default] interface IShTreeView;
		[default, source] dispinterface _IShTreeViewEvents;
	};


	[
		uuid(7A2EC646-0793-473d-9239-CEB42B86C234),
		version(1.5),
		noncreatable,
		helpstring("CommonProperties Class 1.5 (Unicode)"),
		hidden
	]
	coclass CommonProperties
	{
		[default] interface IUnknown;
	};


	[
		uuid(9A815DF1-9658-4b9d-B24C-1FEC47F57056),
		version(1.5),
		noncreatable,
		helpstring("ShLvwDefaultManagedItemPropertiesProperties Class 1.5 (Unicode)"),
		hidden
	]
	coclass ShLvwDefaultManagedItemPropertiesProperties
	{
		[default] interface IUnknown;
	};


	[
		uuid(AEA9551A-AD30-4736-891B-3E06416D13E6),
		version(1.5),
		noncreatable,
		helpstring("ShTvwDefaultManagedItemPropertiesProperties Class 1.5 (Unicode)"),
		hidden
	]
	coclass ShTvwDefaultManagedItemPropertiesProperties
	{
		[default] interface IUnknown;
	};


	[
		uuid(B15CE2D8-D638-4848-AE49-EBF95C7B698A),
		version(1.5),
		noncreatable,
		helpstring("NamespaceEnumSettingsProperties Class 1.5 (Unicode)"),
		hidden
	]
	coclass NamespaceEnumSettingsProperties
	{
		[default] interface IUnknown;
	};


	[
		uuid(FD992810-FAD8-431f-BE61-552A71B63610),
		version(1.5),
		noncreatable,
		helpstring("ThumbnailsProperties Class 1.5 (Unicode)"),
		hidden
	]
	coclass ThumbnailsProperties
	{
		[default] interface IUnknown;
	};
};
